<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>海燕</title>
  
  <subtitle>热爱编程，爱算法，爱生活，爱钻研</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-18T12:31:59.524Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>海燕</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django之用户认证-auth模块</title>
    <link href="http://yoursite.com/2018/11/16/Django%E4%B9%8B%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81-auth%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/11/16/Django之用户认证-auth模块/</id>
    <published>2018-11-16T10:05:56.000Z</published>
    <updated>2018-11-18T12:31:59.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户认知———auth模块"><a href="#用户认知———auth模块" class="headerlink" title="用户认知———auth模块"></a>用户认知———auth模块</h1><blockquote><h3 id="一、auth模块"><a href="#一、auth模块" class="headerlink" title="一、auth模块"></a>一、auth模块</h3></blockquote><blockquote><p>from django.contrib import auth</p></blockquote><blockquote><h6 id="1、authenticate-：验证用户输入的用户名和密码是否相同"><a href="#1、authenticate-：验证用户输入的用户名和密码是否相同" class="headerlink" title="1、authenticate()：验证用户输入的用户名和密码是否相同"></a>1、authenticate()：验证用户输入的用户名和密码是否相同</h6><ul><li><p>提供了用户认证，即<strong>验证用户名以及密码是否正确</strong>,一般需要usernamepassword两个关键字参数</p></li><li><p>如果认证信息有效，会返回一个User对象。authenticate()会在User对象上设置一个属性标识，那</p><p>种认证，后端认证了该用户，且信息在后面的登录过程中是需要的。当我们试图登录一个从数据库</p><p>中直接取出来不经过authenticate()的User对象会报错的！！！</p></li></ul><h6 id="2、login-HttpRequest-user-登录"><a href="#2、login-HttpRequest-user-登录" class="headerlink" title="2、login(HttpRequest,user):登录"></a>2、login(HttpRequest,user):登录</h6><ul><li><p>该函数接受一个HttpRequest对象，以及一个认证的User对象</p></li><li><p>此函数使用django的session框架给每个已认证的用户附加上session id等信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login</span><br><span class="line">&gt;     </span><br><span class="line">&gt;  <span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;    username = request.POST[<span class="string">'username'</span>]</span><br><span class="line">&gt;    password = request.POST[<span class="string">'password'</span>]</span><br><span class="line">&gt;    user = authenticate(username=username, password=password)</span><br><span class="line">&gt;    <span class="keyword">if</span> user:</span><br><span class="line">&gt;      login(request, user)</span><br><span class="line">&gt;      <span class="comment"># Redirect to a success page.</span></span><br><span class="line">&gt;      ...</span><br><span class="line">&gt;    <span class="keyword">else</span>:</span><br><span class="line">&gt;      <span class="comment"># Return an 'invalid login' error message.</span></span><br><span class="line">&gt;      ...</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><h6 id="3、logout-request-注销用户"><a href="#3、logout-request-注销用户" class="headerlink" title="3、logout(request):注销用户"></a>3、logout(request):注销用户</h6><ul><li><p>该函数接受一个HttpRequest对象，无返回值，当调用该函数是时，当请求的session信息会全部</p><p>清除。该用户即使没有登录，使用该函数也不会登录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> logout</span><br><span class="line">&gt;     </span><br><span class="line">&gt;  <span class="function"><span class="keyword">def</span> <span class="title">logout_view</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;    logout(request)</span><br><span class="line">&gt;    <span class="comment"># Redirect to a success page.</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><h6 id="4、user对象的is-authenticated"><a href="#4、user对象的is-authenticated" class="headerlink" title="4、user对象的is_authenticated()"></a>4、user对象的is_authenticated()</h6><ul><li><p>要求</p><ul><li>用户登录后才能访问某些页面</li><li>如果用户没有登录就访问该页面的话直接跳转登录页面</li><li>用户在跳转的登录界面中完成登录后，自动访问跳转到之前访问的地址</li></ul></li><li><p>方法一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;    <span class="keyword">if</span> <span class="keyword">not</span> request.user.is_authenticated():</span><br><span class="line">&gt;      <span class="keyword">return</span> redirect(<span class="string">'%s?next=%s'</span> % (settings.LOGIN_URL, request.path))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>方法二：django已经为我们设计好了一个用于次情况的装饰器：login_request()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line">&gt;        </span><br><span class="line">&gt;  @login_required</span><br><span class="line">&gt;  <span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;    ...</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p> 若用户没有登录，则会跳转到django默认的登录URL’/account/login’(这个值可以在settings文件中</p><p> 通过LOGIN_URL进行修改）。并传递当前访问url的绝对路径（登录成功后，会重定向该路径）</p></blockquote><blockquote><h3 id="二、User对象"><a href="#二、User对象" class="headerlink" title="二、User对象"></a>二、User对象</h3></blockquote><blockquote><ul><li><p>User对象属性：</p><ul><li>username</li><li>password（必填项）password用哈希算法保存到数据库</li><li>is_staff：用户是否拥有网站的管理权限</li><li>is_active：是否允许用户登录，设置为‘False’，可以不用删除用户来禁止用户登录</li></ul></li><li><p>is_authenticated()</p><ul><li><p>如果是真正的User对象，返回值恒为True。用于检测用户是否已经通过认证。</p></li><li><p>通过认证并不意味着用户拥有任何权限，甚至也不检查该用户是否处于激活状态，这只是表明</p><p>用户成功通过了认证。</p><ul><li>这个方法很重要，在后台使用</li><li>request.user.is_authenticated()判断用户是否已经登录，如果True则可以向前台展示</li><li>-request.user.name</li></ul></li></ul></li><li><p>创建用户<strong>create_user</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">&gt;  user = User.objects.create_user（username=<span class="string">''</span>,password=<span class="string">''</span>,email=<span class="string">''</span>）</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>check_passw(passwd):密码检测</p><p>用户需要修改密码的时候 首先要让他输入原来的密码 ，如果给定的字符串通过了密码检查，返回 </p><p>True</p></li><li><p>修改密码：set_password()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;  user = User.objects.get(username=<span class="string">''</span>)</span><br><span class="line">&gt;  user.set_password(password=<span class="string">''</span>)</span><br><span class="line">&gt;  user.save　</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote></blockquote><h3 id="三、简单实例"><a href="#三、简单实例" class="headerlink" title="三、简单实例"></a>三、简单实例</h3><blockquote><p>登录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">def</span> <span class="title">log_in</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;    print(request.POST)</span><br><span class="line">&gt;    <span class="keyword">if</span> request.method ==<span class="string">"POST"</span>:</span><br><span class="line">&gt;        username = request.POST.get(<span class="string">"username"</span>)</span><br><span class="line">&gt;        password = request.POST.get(<span class="string">"password"</span>)</span><br><span class="line">&gt;        print(username,password)</span><br><span class="line">&gt;        user=auth.authenticate(username=username,password=password)<span class="comment">#验证用户名和密码</span></span><br><span class="line">&gt;        <span class="keyword">if</span> user:</span><br><span class="line">&gt;            <span class="comment">#如果认证成功，就让登录，这个login里面包括了session操作和cookie</span></span><br><span class="line">&gt;            auth.login(request,user)</span><br><span class="line">&gt;            <span class="keyword">return</span> redirect(<span class="string">"/chakan/"</span>)</span><br><span class="line">&gt;        <span class="keyword">else</span>:</span><br><span class="line">&gt;            s = <span class="string">"用户名和密码输入错误"</span></span><br><span class="line">&gt;            <span class="keyword">return</span> render(request,<span class="string">"login.html"</span>,&#123;<span class="string">"s"</span>:s&#125;)</span><br><span class="line">&gt;    <span class="keyword">return</span> render(request,<span class="string">"login.html"</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>修改密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">def</span> <span class="title">set_pwd</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;    <span class="keyword">if</span> request.method==<span class="string">"POST"</span>:</span><br><span class="line">&gt;        oldpassword = request.POST.get(<span class="string">"oldpassword"</span>)</span><br><span class="line">&gt;        newpassword = request.POST.get(<span class="string">"newpassword"</span>)</span><br><span class="line">&gt;        <span class="comment">#得到当前登录的用户，判断旧密码是不是和当前的密码一样</span></span><br><span class="line">&gt;        username = request.user  <span class="comment">#打印的是当前登录的用户名</span></span><br><span class="line">&gt;        user = User.objects.get(username=username)  <span class="comment">#查看用户</span></span><br><span class="line">&gt;        ret = user.check_password(oldpassword)  <span class="comment">#检查密码是否正确</span></span><br><span class="line">&gt;        <span class="keyword">if</span> ret:</span><br><span class="line">&gt;            user.set_password(newpassword) <span class="comment">#如果正确就给设置一个新密码</span></span><br><span class="line">&gt;            user.save()  <span class="comment">#保存</span></span><br><span class="line">&gt;            <span class="keyword">return</span> redirect(<span class="string">"/login/"</span>)</span><br><span class="line">&gt;        <span class="keyword">else</span>:</span><br><span class="line">&gt;            info = <span class="string">"输入密码有误"</span></span><br><span class="line">&gt;            <span class="keyword">return</span> render(request,<span class="string">"set_pwd.html"</span>,&#123;<span class="string">"info"</span>:info&#125;)</span><br><span class="line">&gt;    <span class="keyword">return</span> render(request,<span class="string">"set_pwd.html"</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>注册：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;    <span class="keyword">if</span> request.method==<span class="string">"POST"</span>:</span><br><span class="line">&gt;        username = request.POST.get(<span class="string">"username"</span>)</span><br><span class="line">&gt;        password = request.POST.get(<span class="string">"password"</span>)</span><br><span class="line">&gt;        <span class="comment">#得到用户输入的用户名和密码创建一个新用户</span></span><br><span class="line">&gt;        User.objects.create_user(username=username,password=password)  <span class="comment">#User是以个对象</span></span><br><span class="line">&gt;        s = <span class="string">"恭喜你注册成功，现在可以登录了"</span></span><br><span class="line">&gt;        <span class="keyword">return</span> redirect(<span class="string">"/login/"</span>)</span><br><span class="line">&gt;    <span class="keyword">return</span> render(request,<span class="string">"reg.html"</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>注销：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">def</span> <span class="title">log_out</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;    auth.logout(request)</span><br><span class="line">&gt;    <span class="keyword">return</span> redirect(<span class="string">"/login/"</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用户认知———auth模块&quot;&gt;&lt;a href=&quot;#用户认知———auth模块&quot; class=&quot;headerlink&quot; title=&quot;用户认知———auth模块&quot;&gt;&lt;/a&gt;用户认知———auth模块&lt;/h1&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;一、auth模块
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django-admin管理工具</title>
    <link href="http://yoursite.com/2018/11/15/Django-admin%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2018/11/15/Django-admin管理工具/</id>
    <published>2018-11-15T11:29:08.130Z</published>
    <updated>2018-11-15T11:44:52.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="admin组件使用"><a href="#admin组件使用" class="headerlink" title="admin组件使用"></a>admin组件使用</h1><p>Django提供了基于web的管理工具</p><p>Django 自动管理工具是 django.contrib 的一部分。你可以在项目的 settings.py 中的</p><p> INSTALLED_APPS 看到它：</p><pre><code># Application definitionINSTALLED_APPS = [    &apos;django.contrib.admin&apos;,    &apos;django.contrib.auth&apos;,    &apos;django.contrib.contenttypes&apos;,    &apos;django.contrib.sessions&apos;,    &apos;django.contrib.messages&apos;,    &apos;django.contrib.staticfiles&apos;,    &quot;app01&quot;]</code></pre><p>django.contrib是一套庞大的功能集，它是Django基本代码的组成部分。</p><p>激活管理工具</p><p>通常在生成项目的时候会在urls.py中自动设置好</p><pre><code>from django.conf.urls import urlfrom django.contrib import adminurlpatterns = [    url(r&apos;^admin/&apos;, admin.site.urls),]</code></pre><p>当这一切配置好后，Django管理工具就可以运行了。</p><h1 id="使用管理工具"><a href="#使用管理工具" class="headerlink" title="使用管理工具"></a>使用管理工具</h1><p>启动开发服务器，然后在浏览器中访问 <a href="http://127.0.0.1:8000/admin/，得到登陆界面，" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/，得到登陆界面，</a></p><p>你可以通过命令 python manage.py createsuperuser 来创建超级用户。</p><p>为了让 admin 界面管理某个数据模型，我们需要先注册该数据模型到 admin</p><pre><code>from django.db import models# Create your models here.class Author(models.Model):    name=models.CharField( max_length=32)    age=models.IntegerField()    def __str__(self):        return self.nameclass Publish(models.Model):    name=models.CharField( max_length=32)    email=models.EmailField()    def __str__(self):        return self.nameclass Book(models.Model):    title = models.CharField( max_length=32)    publishDate=models.DateField()    price=models.DecimalField(max_digits=5,decimal_places=2)    publisher=models.ForeignKey(to=&quot;Publish&quot;)    authors=models.ManyToManyField(to=&apos;Author&apos;)    def __str__(self):        return self.title</code></pre><h1 id="admin的定制"><a href="#admin的定制" class="headerlink" title="admin的定制"></a>admin的定制</h1><p>在admin中只需要将Model中的某个类注册，即可在Admin中实现增删改查的功能，如：</p><pre><code>admin.site.register(models.UserInfo)</code></pre><p>但是这种方式比较简单，如果想进行更多的定制操作，需要利用ModelAdmin进行操作，</p><p>如：</p><pre><code>方式一：    class UserAdmin(admin.ModelAdmin):        list_display = (&apos;user&apos;, &apos;pwd&apos;,)    admin.site.register(models.UserInfo, UserAdmin) # 第一个参数可以是列表方式二：    @admin.register(models.UserInfo)                # 第一个参数可以是列表    class UserAdmin(admin.ModelAdmin):        list_display = (&apos;user&apos;, &apos;pwd&apos;,)</code></pre><p>ModelAdmin中提供了大量的可定制功能，如：</p><p>1 list_display，列表时，定制显示的列。</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    list_display = (&apos;user&apos;, &apos;pwd&apos;, &apos;xxxxx&apos;)    def xxxxx(self, obj):        return &quot;xxxxx&quot;</code></pre><p>2 list_display_links，列表时，定制列可以点击跳转。</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    list_display = (&apos;user&apos;, &apos;pwd&apos;, &apos;xxxxx&apos;)    list_display_links = (&apos;pwd&apos;,)</code></pre><p>3 list_filter，列表时，定制右侧快速筛选。<br>4 list_select_related，列表时，连表查询是否自动select_related<br>5 list_editable，列表时，可以编辑的列 </p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    list_display = (&apos;user&apos;, &apos;pwd&apos;,&apos;ug&apos;,)    list_editable = (&apos;ug&apos;,)</code></pre><p>6 search_fields，列表时，模糊搜索的功能</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    search_fields = (&apos;user&apos;, &apos;pwd&apos;)</code></pre><p>7 date_hierarchy，列表时，对Date和DateTime类型进行搜索</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    date_hierarchy = &apos;ctime&apos;</code></pre><p>8  inlines，详细页面，如果有其他表和当前表做FK，那么详细页面可以进行动态增加和删除</p><pre><code>class UserInfoInline(admin.StackedInline): # TabularInline    extra = 0    model = models.UserInfoclass GroupAdminMode(admin.ModelAdmin):    list_display = (&apos;id&apos;, &apos;title&apos;,)    inlines = [UserInfoInline, ]</code></pre><p>9 action，列表时，定制action中的操作</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    # 定制Action行为具体方法    def func(self, request, queryset):        print(self, request, queryset)        print(request.POST.getlist(&apos;_selected_action&apos;))    func.short_description = &quot;中文显示自定义Actions&quot;    actions = [func, ]    # Action选项都是在页面上方显示    actions_on_top = True    # Action选项都是在页面下方显示    actions_on_bottom = False    # 是否显示选择个数    actions_selection_counter = True</code></pre><p>10 定制HTML模板</p><pre><code>add_form_template = Nonechange_form_template = Nonechange_list_template = Nonedelete_confirmation_template = Nonedelete_selected_confirmation_template = Noneobject_history_template = None</code></pre><p>11 raw_id_fields，详细页面，针对FK和M2M字段变成以Input框形式</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    raw_id_fields = (&apos;FK字段&apos;, &apos;M2M字段&apos;,)</code></pre><p>12  fields，详细页面时，显示字段的字段</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    fields = (&apos;user&apos;,)</code></pre><p>13 exclude，详细页面时，排除的字段</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    exclude = (&apos;user&apos;,)</code></pre><p>14  readonly_fields，详细页面时，只读字段</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    readonly_fields = (&apos;user&apos;,)</code></pre><p>15 fieldsets，详细页面时，使用fieldsets标签对数据进行分割显示</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    fieldsets = (        (&apos;基本数据&apos;, {            &apos;fields&apos;: (&apos;user&apos;, &apos;pwd&apos;, &apos;ctime&apos;,)        }),        (&apos;其他&apos;, {            &apos;classes&apos;: (&apos;collapse&apos;, &apos;wide&apos;, &apos;extrapretty&apos;),  # &apos;collapse&apos;,&apos;wide&apos;, &apos;extrapretty&apos;            &apos;fields&apos;: (&apos;user&apos;, &apos;pwd&apos;),        }),    )</code></pre><p>16 详细页面时，M2M显示时，数据移动选择（方向：上下和左右）</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    filter_vertical = (&quot;m2m字段&quot;,) # 或filter_horizontal = (&quot;m2m字段&quot;,)</code></pre><p>17 ordering，列表时，数据排序规则</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    ordering = (&apos;-id&apos;,)    或    def get_ordering(self, request):        return [&apos;-id&apos;, ]</code></pre><p>18 radio_fields，详细页面时，使用radio显示选项（FK默认使用select）</p><pre><code>radio_fields = {&quot;ug&quot;: admin.VERTICAL} # 或admin.HORIZONTAL</code></pre><p>19 form = ModelForm，用于定制用户请求时候表单验证</p><pre><code>from app01 import modelsfrom django.forms import ModelFormfrom django.forms import fieldsclass MyForm(ModelForm):    others = fields.CharField()    class Meta:        model = models = models.UserInfo        fields = &quot;__all__&quot;@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    form = MyForm</code></pre><p>20 empty_value_display = “列数据为空时，显示默认值”</p><pre><code>@admin.register(models.UserInfo)class UserAdmin(admin.ModelAdmin):    empty_value_display = &quot;列数据为空时，默认显示&quot;    list_display = (&apos;user&apos;,&apos;pwd&apos;,&apos;up&apos;)    def up(self,obj):        return obj.user    up.empty_value_display = &quot;指定列数据为空时，默认显示&quot;</code></pre><p>例子：</p><pre><code>from django.contrib import admin# Register your models here.from .models import *class BookInline(admin.StackedInline): # TabularInline    extra = 0    model = Bookclass BookAdmin(admin.ModelAdmin):    list_display = (&quot;title&quot;,&apos;publishDate&apos;, &apos;price&apos;,&quot;foo&quot;,&quot;publisher&quot;)    list_display_links = (&apos;publishDate&apos;,&quot;price&quot;)    list_filter = (&apos;price&apos;,)    list_editable=(&quot;title&quot;,&quot;publisher&quot;)    search_fields = (&apos;title&apos;,)    date_hierarchy = &apos;publishDate&apos;    preserve_filters=False    def foo(self,obj):        return obj.title+str(obj.price)    # 定制Action行为具体方法    def func(self, request, queryset):        print(self, request, queryset)        print(request.POST.getlist(&apos;_selected_action&apos;))    func.short_description = &quot;中文显示自定义Actions&quot;    actions = [func, ]    # Action选项都是在页面上方显示    actions_on_top = True    # Action选项都是在页面下方显示    actions_on_bottom = False    # 是否显示选择个数    actions_selection_counter = True    change_list_template=&quot;my_change_list_template.html&quot;class PublishAdmin(admin.ModelAdmin):     list_display = (&apos;name&apos;, &apos;email&apos;,)     inlines = [BookInline, ]admin.site.register(Book, BookAdmin) # 第一个参数可以是列表admin.site.register(Publish,PublishAdmin)admin.site.register(Author)</code></pre><h1 id="admin源码解析"><a href="#admin源码解析" class="headerlink" title="admin源码解析"></a>admin源码解析</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><pre><code>单例模式（Singleton Pattern）是一种常用的软件设计模式，该模式主要目的是确保某一个类只有一个实例存在。当我们希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个APPConfig    的类来读取配置文件的信息。如果在程序运行期间，有很多地方需要使用配置文    件的内容，也就是说，很多地方都需要APPConfig的实例对象，而这样会严重浪费    内存资源，尤其是在配置文件内容很多的情况下。事实上，类似AppConfig这样的类，我们希望在程序运行期间只存在一个实例对象。</code></pre><p>在python中，我们可以用很多种方式来实现单例模式：<br>使用模块（模块的导入）<br>使用<strong>new</strong><br>使用装饰器（decorator）<br>使用元类（metaclass）<br>（1）使用<strong>new</strong><br>    为了使类只能出现一个实例，我们可以使用<strong>new</strong>来控制实例的创建过程，代码<br>    如下：</p><pre><code>class Singleton(object):    _instance = None    def __new__(cls, *args, **kw):        if not cls._instance:            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)          return cls._instance  class MyClass(Singleton):      a = 1</code></pre><p>  在上面的代码中，我们将类的实例和一个类变量instance关联起来，如果cls.instance为None则创<br>建实例，否则直接返回cls._instance<br>执行情况：</p><pre><code>&gt;&gt;&gt; one = MyClass()&gt;&gt;&gt; two = MyClass()&gt;&gt;&gt; one == twoTrue&gt;&gt;&gt; one is twoTrue&gt;&gt;&gt; id(one), id(two)(4303862608, 4303862608)</code></pre><p>(2)使用模块<br>    其实，Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当<br>    第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的<br>    函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可<br>    以考虑这样做：</p><pre><code>    # mysingleton.py    class My_Singleton(object):        def foo(self):            pass    my_singleton = My_Singleton()将上面的代码保存在文件 mysingleton.py 中，然后这样使用：    from mysingleton import my_singleton    my_singleton.foo()</code></pre><h2 id="admin执行流程"><a href="#admin执行流程" class="headerlink" title="admin执行流程"></a>admin执行流程</h2><h3 id="循环加载执行所有已经注册的app中的admin-py文件"><a href="#循环加载执行所有已经注册的app中的admin-py文件" class="headerlink" title="循环加载执行所有已经注册的app中的admin.py文件"></a>循环加载执行所有已经注册的app中的admin.py文件</h3><pre><code>def autodiscover():    autodiscover_modules(&apos;admin&apos;, register_to=site)</code></pre><h3 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h3><pre><code>＃admin.pyclass BookAdmin(admin.ModelAdmin):    list_display = (&quot;title&quot;,&apos;publishDate&apos;, &apos;price&apos;)admin.site.register(Book, BookAdmin) admin.site.register(Publish)</code></pre><h3 id="admin-site"><a href="#admin-site" class="headerlink" title="admin.site"></a>admin.site</h3><pre><code>class AdminSite(object):...# This global object represents the default admin site, for the common case.# You can instantiate AdminSite in your own code to create a custom admin site.site = AdminSite()</code></pre><p>这里应用的是一个单例模式，对于AdminSite类的一个单例模式，执行的每一个app中的每一个admin.site</p><p>都是一个对象。</p><h3 id="执行register方法"><a href="#执行register方法" class="headerlink" title="执行register方法"></a>执行register方法</h3><pre><code>admin.site.register(Book, BookAdmin) admin.site.register(Publish)class ModelAdmin(BaseModelAdmin):passdef register(self, model_or_iterable, admin_class=None, **options):    if not admin_class:            admin_class = ModelAdmin    # Instantiate the admin class to save in the registry    self._registry[model] = admin_class(model, self)# 思考：在每一个app的admin .py中加上print(admin.site._registry)   ＃ 执行结果？</code></pre><p> 到这里，注册结束！</p><h3 id="admin的URL配置"><a href="#admin的URL配置" class="headerlink" title="admin的URL配置"></a>admin的URL配置</h3><pre><code>urlpatterns = [    url(r&apos;^admin/&apos;, admin.site.urls),]class AdminSite(object):     def get_urls(self):        from django.conf.urls import url, include        urlpatterns = []        # Add in each model&apos;s views, and create a list of valid URLS for the        # app_index        valid_app_labels = []        for model, model_admin in self._registry.items():            urlpatterns += [                url(r&apos;^%s/%s/&apos; % (model._meta.app_label, model._meta.model_name), include(model_admin.urls)),            ]            if model._meta.app_label not in valid_app_labels:                valid_app_labels.append(model._meta.app_label)        return urlpatterns    @property    def urls(self):        return self.get_urls(), &apos;admin&apos;, self.name</code></pre><h3 id="url方法的扩展应用"><a href="#url方法的扩展应用" class="headerlink" title="url方法的扩展应用"></a>url方法的扩展应用</h3><pre><code>from django.shortcuts import HttpResponsedef test01(request):    return HttpResponse(&quot;test01&quot;)def test02(request):    return HttpResponse(&quot;test02&quot;)urlpatterns = [    url(r&apos;^admin/&apos;, admin.site.urls),    url(r&apos;^ward/&apos;, ([                    url(r&apos;^test01/&apos;, test01),                    url(r&apos;^test02/&apos;, test02),                    ],None,None)),]</code></pre><h1 id="扩展优化"><a href="#扩展优化" class="headerlink" title="扩展优化"></a>扩展优化</h1><pre><code>from django.conf.urls import url,includefrom django.contrib import adminfrom django.shortcuts import HttpResponsedef change_list_view(request):    return HttpResponse(&quot;change_list_view&quot;)def add_view(request):    return HttpResponse(&quot;add_view&quot;)def delete_view(request):    return HttpResponse(&quot;delete_view&quot;)def change_view(request):    return HttpResponse(&quot;change_view&quot;)def get_urls():    temp=[        url(r&quot;^$&quot;.format(app_name,model_name),change_list_view),        url(r&quot;^add/$&quot;.format(app_name,model_name),add_view),        url(r&quot;^\d+/del/$&quot;.format(app_name,model_name),delete_view),        url(r&quot;^\d+/change/$&quot;.format(app_name,model_name),change_view),    ]    return tempurl_list=[]for model_class,obj in admin.site._registry.items():    model_name=model_class._meta.model_name    app_name=model_class._meta.app_label    # temp=url(r&quot;{0}/{1}/&quot;.format(app_name,model_name),(get_urls(),None,None))    temp=url(r&quot;{0}/{1}/&quot;.format(app_name,model_name),include(get_urls()))    url_list.append(temp)urlpatterns = [    url(r&apos;^admin/&apos;, admin.site.urls),    url(r&apos;^ward/&apos;, (url_list,None,None)),]</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;admin组件使用&quot;&gt;&lt;a href=&quot;#admin组件使用&quot; class=&quot;headerlink&quot; title=&quot;admin组件使用&quot;&gt;&lt;/a&gt;admin组件使用&lt;/h1&gt;&lt;p&gt;Django提供了基于web的管理工具&lt;/p&gt;
&lt;p&gt;Django 自动管理工具是 
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-cli目录结构总结的步骤</title>
    <link href="http://yoursite.com/2018/11/14/vue-cli%E8%87%AA%E5%B7%B1%E6%80%BB%E7%BB%93%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2018/11/14/vue-cli自己总结的步骤/</id>
    <published>2018-11-14T12:37:04.000Z</published>
    <updated>2018-11-15T06:33:03.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="main-js这是js的入口文件"><a href="#main-js这是js的入口文件" class="headerlink" title="main.js这是js的入口文件"></a>main.js这是js的入口文件</h1><pre><code>// The Vue build version to load with the `import` command// (runtime-only or standalone) has been set in webpack.base.conf with an alias.import Vue from &apos;vue&apos;import App from &apos;./App&apos;import router from &apos;./router&apos;import store from &quot;./store&quot;import axios from &apos;axios&apos;// 使用element-uiimport ElementUI from &apos;element-ui&apos;import &apos;element-ui/lib/theme-chalk/index.css&apos;Vue.use(ElementUI);// 全局的（一个一个比较麻烦）// axios.request({//   url: XXX,//   method: &quot;get&quot;// });// 通过使用原型链 这样所有的组件都可以通过$axios去访问了Vue.prototype.$axios = axios;Vue.config.productionTip = false;/* eslint-disable no-new */new Vue({el: &apos;#app&apos;,router,store,components: { App },template: &apos;&lt;App/&gt;&apos;});</code></pre><h1 id="App-vue页面级App组件"><a href="#App-vue页面级App组件" class="headerlink" title="App.vue页面级App组件"></a>App.vue页面级App组件</h1><pre><code>&lt;template&gt;&lt;div id=&quot;app&quot;&gt;    &lt;MyHeader&gt;&lt;/MyHeader&gt;    &lt;router-view&gt;&lt;/router-view&gt;    &lt;MyFooter&gt;&lt;/MyFooter&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import MyHeader from &quot;./components/MyHeader&quot;import MyFooter from &quot;./components/MyFooter&quot;export default {name: &apos;App&apos;,components: {    MyHeader,    MyFooter,}}&lt;/script&gt;&lt;style&gt;body {    margin: 0;    padding: 0;}&lt;/style&gt;</code></pre><h1 id="router-index-js"><a href="#router-index-js" class="headerlink" title="router-index.js"></a>router-index.js</h1><pre><code>import Vue from &apos;vue&apos;import Router from &apos;vue-router&apos;import Home from &apos;../components/headers/Home&apos;import Course from &apos;../components/headers/Course&apos;Vue.use(Router);export default new Router({routes: [    {    path: &apos;/&apos;,    name: &apos;home&apos;,    component: Home    },    {    path: &apos;/course&apos;,    name: &apos;course&apos;,    component: Course    }]})</code></pre><h1 id="Vuex-axios的使用"><a href="#Vuex-axios的使用" class="headerlink" title="Vuex+axios的使用"></a>Vuex+axios的使用</h1><h2 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h2><pre><code>import Vue from &quot;vue&quot;import Vuex from &quot;vuex&quot;Vue.use(Vuex);export default new Vuex.Store({// this.$store.state.name    拿数据state: {    name: &apos;1&apos;,},// 对state中的数据进行处理// this.$store.getters.new_name    拿数据getters: {    new_name: function (state) {    return state.name + &apos;xxx&apos;;    },    new_new_name: function (state, getters) {    return getters.new_name + &apos;000&apos;;    },},mutations: {    change_data: function (state, data) {    // 自己处理change_data事件的    state.name = data;    }}})</code></pre><h2 id="Course-vue"><a href="#Course-vue" class="headerlink" title="Course.vue"></a>Course.vue</h2><pre><code>&lt;template&gt;&lt;div&gt;&lt;h1&gt;course&lt;/h1&gt;{{name}}{{new_name}}&lt;hr&gt;{{try_again}}&lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default {        name: &quot;Course&quot;,    data(){        return {            name : this.$store.state.name,            new_name: this.$store.getters.new_new_name,            try_again: &apos;&apos;,        }    },    // 方法执行完会改版数据但是不会刷新    // methods: {    //     my_click: function () {    //       this.$store.commit(&quot;change_data&quot;, &apos;到到&apos;)    //     }    // },    // 能够监听到数据的改变能够实时跟新    // computed: {    //     name: function () {    //       return  this.$store.state.name;    //     }    // }    mounted(){        let that = this;        this.$axios.request({            url: &quot;http://127.0.0.1:8000/tryagain/&quot;,            method: &apos;get&apos;,        }).then(function (data) {            // success do something~~            that.try_again = data.data        }).catch(function (data) {            // fail do something~~        })        // 单纯的发get请求        // this.$axios.get(&quot;url&quot;, {}).then()    }    }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;main-js这是js的入口文件&quot;&gt;&lt;a href=&quot;#main-js这是js的入口文件&quot; class=&quot;headerlink&quot; title=&quot;main.js这是js的入口文件&quot;&gt;&lt;/a&gt;main.js这是js的入口文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;// The
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vuex+axios</title>
    <link href="http://yoursite.com/2018/11/13/Vuex-axios/"/>
    <id>http://yoursite.com/2018/11/13/Vuex-axios/</id>
    <published>2018-11-13T13:54:25.000Z</published>
    <updated>2018-11-15T06:36:23.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuex-简介"><a href="#Vuex-简介" class="headerlink" title="Vuex 简介"></a>Vuex 简介</h1><pre><code>vuex是一个专门为Vue.js设计的集中式状态管理架构。状态？ 我们把它理解为在data中需要共享给其他组件使用的部分。Vuex和单纯的全局对象有以下不同：1、Vuex 的状态存储是响应式的。当vue组件从store中读取状态的时候，若store中的状态发生变化，那么相应的组件也会相应的得到高效更新。2、你不能直接改变store中的状态。改变store中的状态的唯一途径就是显示的提交(commit)mutation。这样使得我们可以方便的跟踪每一个状态的变化，从而让我们能够实现一些工具来帮助我们更好的了解我们的应用。</code></pre><h2 id="安装使用vuex"><a href="#安装使用vuex" class="headerlink" title="安装使用vuex"></a>安装使用vuex</h2><p>–  npm install vuex</p><pre><code>vuex的使用一// main.jsimport Vue from &apos;vue&apos;import App from &apos;./App&apos;import router from &apos;./router&apos;import vuex from &apos;vuex&apos;Vue.use(vuex)Vue.config.productionTip = falseconst store = new vuex.Store({    state: {    show: false,    }});new Vue({el: &apos;#app&apos;,router,store,components: { App },template: &apos;&lt;App/&gt;&apos;});vuex的使用二// 为了方便维护，我们通常把在src下面新建一个store文件夹，// 然后在里面新建一个index.jsimport Vue from &apos;vue&apos;import Vue_x from &quot;vuex&quot;Vue.use(Vue_x);export default  new Vue_x.Store({state: {    show: false,    },});// 那么main.js要改成import Vue from &apos;vue&apos;import App from &apos;./App&apos;import router from &apos;./router&apos;import store from &quot;./store&quot;Vue.config.productionTip = false;new Vue({el: &apos;#app&apos;,router,store,components: { App },template: &apos;&lt;App/&gt;&apos;});</code></pre><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><pre><code>简而言之~~state是保存我们data中需要共享的数据。由于Vuex的存储是响应式的，从store实例中读取状态的最简单的方式就是在计算属性中返回某个状态。this.$store.state.count</code></pre><p>组件中获取vuex中状态</p><pre><code>// 创建一个组件const Counter = {template: `&lt;div&gt;{{ count }}&lt;/div&gt;`,computed: {    count(){    return this.$store.state.count    }}};</code></pre><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>有时候我们需要从store中的state中派生出一些状态，例如对数据进行简单的计算。</p><p>并且很多组件都需要用到此方法，我们要么复制这个函数，要么抽取到一个公共函数，多处导入。</p><p>我们vuex提供了更加方便的方法，getter ，它就像计算属性一样，getter的返回值会根据它的依赖被</p><p>缓存起来，只有它的依赖发生改变时，才会重新计算。</p><p>Getter会接收state作为其第一个参数：</p><pre><code>import Vue from &apos;vue&apos;import Vue_x from &quot;vuex&quot;Vue.use(Vue_x);export default  new Vue_x.Store({state: {    count: 20,},// 通过 this.$store.getters.my_funcgetters: {    my_func: function (state) {    return state.count * 2    }},});</code></pre><p>Getter也可以接收getters为第二个参数：</p><pre><code>import Vue from &apos;vue&apos;import Vue_x from &quot;vuex&quot;Vue.use(Vue_x);export default  new Vue_x.Store({state: {    count: 20,},// 通过 this.$store.getters.my_funcgetters: {    my_func: function (state) {    return state.count * 2    },    // 通过 this.$store.getters.my_func_count    my_func_count: function (state, getters) {    return getters.my_func.length    }},});</code></pre><h2 id="Mutatiion"><a href="#Mutatiion" class="headerlink" title="Mutatiion"></a>Mutatiion</h2><p>更改Vuex中的store中的状态的唯一方法是提交mutation。</p><p>每个mutation都有一个字符串的事件类型(type)，和一个回调函数handler。</p><p>也就是说我们要触发mutation中定义的方法(type)，然后才会执行这个方法(handler)。</p><p>这个方法就是我们更改状态的地方，它会接收state为第一个参数，后面接收其他参数：</p><pre><code>Mutation基本使用import Vue from &apos;vue&apos;import Vue_x from &quot;vuex&quot;Vue.use(Vue_x);export default  new Vue_x.Store({state: {    count: 20,},// 需要通过 this.$store.commit(&apos;increment&apos;, 10)mutations: {    increment (state, n) {    // 变更状态    state.count += n    }}});</code></pre><p>Mutation需要遵守Vue的响应规则</p><p>既然vuex中的store中的状态是响应式的，那么当我们状态变更时，监视状态的vue组件也会更新。</p><p>这就意味着vuex中的mutation也需要与使用vue一样遵守一些注意事项：</p><p>　　– 1，最好提前在你的store中初始化好所有的所需要的属性</p><p>　　– 2，当对象需要添加属性时，你应该使用</p><p>　　　　　　–  Vue.set(obj, ‘newProp’, 123)</p><p>　　　　　　–  以新对象代替老对象  state.obj = { …state.obj, newProp: 123}</p><h1 id="axios的简单使用"><a href="#axios的简单使用" class="headerlink" title="axios的简单使用"></a>axios的简单使用</h1><p>基于Promise的HTTP请求客户端，可以同时在浏览器和node.js使用。</p><p>##　使用npm安装axios</p><p>– npm install axios -D</p><h2 id="基本的配置"><a href="#基本的配置" class="headerlink" title="基本的配置"></a>基本的配置</h2><pre><code>// main.jsimport axios from &quot;axios&quot;Vue.prototype.$axios = axios// 组件中methods: {    init () {        this.$axios({            method: &quot;get&quot;,            url: &quot;/user&quot;        })    },};</code></pre><h2 id="基本的使用"><a href="#基本的使用" class="headerlink" title="基本的使用"></a>基本的使用</h2><p>get请求</p><pre><code>test(){      this.$axios.get(this.$store.state.apiList.course,{        params: {          id: 123,        }      }).then(function (response) {        // 请求成功回调函数      }).catch(function (response) {        // 请求失败的回调函数      })}</code></pre><p>post请求</p><pre><code>test(){      this.$axios.post(this.$store.state.apiList.course,{          course_title: &quot;Python&quot;,          course_price: &quot;19.88&quot;      }).then(function (response) {        // 请求成功回调函数      }).catch(function (response) {        // 请求失败的回调函数      })}</code></pre><p>发送多个并发请求</p><pre><code>function getCourse(){      return this.$axios.get(&apos;/course/12&apos;)    }function getCourse_all() {        return this.$axios.get(&apos;/course&apos;)        }this.$axios.all([getCourse_all(),getCourse()])        .then().catch()</code></pre><p>axios.request</p><pre><code>methods: {      init(){        var that = this        this.$axios.request({          url: that.$store.state.apiList.course,          method: &apos;get&apos;        }).then(function (data) {          if (data.status === 200){              that.courseList = data.data          }        }).catch(function (reason) {          console.log(reason)        })      }},</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vuex-简介&quot;&gt;&lt;a href=&quot;#Vuex-简介&quot; class=&quot;headerlink&quot; title=&quot;Vuex 简介&quot;&gt;&lt;/a&gt;Vuex 简介&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;vuex是一个专门为Vue.js设计的集中式状态管理架构。
状态？ 我们把它理解
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>npm+webpack+vue-cli快速上手</title>
    <link href="http://yoursite.com/2018/11/13/npm-webpack-vue-cli%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://yoursite.com/2018/11/13/npm-webpack-vue-cli快速上手/</id>
    <published>2018-11-13T12:53:56.000Z</published>
    <updated>2018-11-15T06:37:09.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js-npm"><a href="#Node-js-npm" class="headerlink" title="Node.js   npm"></a>Node.js   npm</h1><h2 id="什么是Node-js-以及npm"><a href="#什么是Node-js-以及npm" class="headerlink" title="什么是Node.js  以及npm"></a>什么是Node.js  以及npm</h2><pre><code>简单的来说 Node.js 就是运行在服务端的JavaScript，基于Chrome V8 引擎的。npm 是Node.js 的包管理工具。</code></pre><h2 id="npm的安装和更新"><a href="#npm的安装和更新" class="headerlink" title="npm的安装和更新"></a>npm的安装和更新</h2><pre><code>Node.js下载安装   Node.js 官网下载安装。npm自带的包管理工具。查看安装版本信息：</code></pre><p>　　    –  node -v  查看Node.js 版本信息</p><p>　　    –  npm -v  查看npm版本信息</p><pre><code>更新npm到指定版本：</code></pre><p>　　    –  npm install <a href="mailto:npm@5.3.0" target="_blank" rel="noopener">npm@5.3.0</a> -g</p><p>　　    – npm install npm@latest -g 更新最新的稳定版本</p><h2 id="npm-常用操作"><a href="#npm-常用操作" class="headerlink" title="npm 常用操作"></a>npm 常用操作</h2><pre><code>之前我们用JQuery或者Bootstrap用cdn 或者直接手动下载并放入项目，而且要管理版本。有了npm，我们管理自己的依赖包以及版本更加简单。到自己项目目录下，进行以下命令：</code></pre><p>　　    – npm init -y    输入-y使用默认配置项 生成package.json文件。</p><p>　　    – npm i <a href="mailto:jquery@0.0.0" target="_blank" rel="noopener">jquery@0.0.0</a>   简写install 为 i 下载依赖  不写@ 默认最新版本</p><p>　　    – npm uninstall jquery  卸载依赖包</p><p>　　    – npm update jquery   更新依赖包</p><p>　　    – npm list  列出已安装的依赖</p><p>　　    – npm install webpack –D 保存为开发环境依赖</p><p>　　    – 老版本需要 –save 参数 现在不需要了</p><pre><code>我们的项目目录下会生成一个 node_modules 目录，我们用npm下的包会在这个目录下。我们所有的依赖信息放在package.json文件中，包括我们所有的依赖以及版本。如果我们删掉 node_modules目录，可以使用 npm i  来下载所有依赖。</code></pre><h2 id="npm-常用配置项"><a href="#npm-常用配置项" class="headerlink" title="npm 常用配置项"></a>npm 常用配置项</h2><pre><code>当我们用npm init 的时候用了参数 -y，如果不用-y我们可以进行一些配置。在我们的package.json文件中有很多配置项</code></pre><p>　　    – name  项目名字 中间不能有空格只能用小写</p><p>　　    – version  项目版本</p><p>　　    – description   项目描述信息</p><p>　　    – main  项目的入口文件</p><p>　　    – scripts 指定命令的快捷方式 npm run test     test是scripts里的键名 值为具体命令</p><p>　　    – author 作者</p><p>　　    – license  许可证</p><p>　　    – dependencies  生成环境依赖的包以及版本信息</p><p>　　    – devDependencies  开发环境的依赖</p><h1 id="webpack3"><a href="#webpack3" class="headerlink" title="webpack3"></a>webpack3</h1><h2 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h2><p>webpack是一个模块打包器，它将根据模块的依赖关系进行静态分析，</p><p>然后将这些模块按照指定的规则生成静态资源。</p><p>那么，我们为什么要用这个东西呢~~因为前端的包袱太多，历史遗留问题太重<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##安装和配置</span><br><span class="line">    webpack是跑在Node.js环境下的，所以确定自己有node环境。</span><br><span class="line"></span><br><span class="line">安装方式：</span><br><span class="line"></span><br><span class="line">　　-- npm install webpack -g  全局安装</span><br><span class="line"></span><br><span class="line">　　-- webpack  &lt;要打包文件&gt;  &lt;打包后文件&gt;     全局这种方式进行打包</span><br><span class="line"></span><br><span class="line">　　-- npm install webpack   在自己的项目下 npm init 后在下载webpack 这就是局部安装</span><br><span class="line"></span><br><span class="line">　　-- node_modules/.bin/webpack &lt;要打包文件&gt;  &lt;打包后文件&gt;   项目里要打包文件是入口文件</span><br><span class="line"></span><br><span class="line">　　-- 路径太长 太烦 可以自定义命令  在package.json 文件的 scripts下面自定义</span><br><span class="line"></span><br><span class="line">## entry 和 output</span><br><span class="line">    entry 入口文件  output 出口文件</span><br><span class="line"></span><br><span class="line">    上面我们自定义命令的时候 命令太长了~~而且我们命令太多的时候我们需要每次都自定义多条命令~~</span><br><span class="line"></span><br><span class="line">    我们可以把命令写在webpack.config.js文件中~~</span><br><span class="line">&gt;webpack.config.js</span><br><span class="line">module.export = &#123;</span><br><span class="line">    // 所有的入口文件</span><br><span class="line">    entry: &#123;</span><br><span class="line">         home: &apos;./main.js&apos;, </span><br><span class="line">         login: &apos;./login.js&apos;,</span><br><span class="line">    &#125;, </span><br><span class="line">    // 出口文件  </span><br><span class="line">    output: &#123;</span><br><span class="line">         filename: &apos;[name].bundle.js&apos;,</span><br><span class="line">         path: __dirname + &apos;/dist&apos;,</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br><span class="line">// backage.json  下的scripts</span><br><span class="line">scripts: &#123;</span><br><span class="line">     &quot;pack&quot;: &quot;node_moudles/.bin/webpack --watch&quot;</span><br><span class="line">&#125;</span><br><span class="line">//  运行命令</span><br><span class="line">npm  run pack</span><br><span class="line"></span><br><span class="line"># webpack4</span><br><span class="line">## webpack的新特性</span><br><span class="line">1, webpack不在单独使用，需要webpack-cli</span><br><span class="line"></span><br><span class="line">　　-- 全局安装  npm install webpack webpack-cli -g -D</span><br><span class="line"></span><br><span class="line">　　-- 局部安装  npm install webpack webpack-cli -D</span><br><span class="line"></span><br><span class="line">2, 增加了模式区分 （development, production）</span><br><span class="line"></span><br><span class="line">　　--webpack --mode development/production 进行模式切换</span><br><span class="line"></span><br><span class="line">　　-- development 开发者模式 打包默认不压缩代码</span><br><span class="line"></span><br><span class="line">　　-- production  生产者模式 上线时使用，压缩代码。 默认是这个模式</span><br><span class="line"></span><br><span class="line">3，固定入口目录为src，与入口默认文件index.js，打包后文件在新增的dist目录下</span><br><span class="line"></span><br><span class="line">　　-- 当只有一个入口文件也就是src/index.js时，无需增加webpack.config.js</span><br><span class="line"></span><br><span class="line">4，多入口以及多出口</span><br><span class="line">&gt;webpack.config.js　</span><br><span class="line">entry: &#123;</span><br><span class="line">    // 多入口</span><br><span class="line">    a: &quot;./src/js/index.js&quot;,</span><br><span class="line">    b: &quot;./src/js/index2.js&quot;,</span><br><span class="line">&#125;</span><br><span class="line">output: &#123;</span><br><span class="line">    // 多出口</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;./js/[name].bundle.js&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># vue-cli</span><br><span class="line">vue-cli是官方提供的快速构建这个单页面应用的脚手架。</span><br><span class="line"></span><br><span class="line">## 根据官方文档中的构件流程：</span><br><span class="line"></span><br><span class="line">　　-- 前提是已经安装了node.js 否则npm都用不了</span><br><span class="line"></span><br><span class="line">　　-- 1，使用npm全局安装vue-cli </span><br><span class="line"></span><br><span class="line">　　　　　　npm install -g vue-cli</span><br><span class="line"></span><br><span class="line">　　-- 2, 安装完成后在自己的工作空间里</span><br><span class="line"></span><br><span class="line">　　　　　　vue init webpack vue-demo  </span><br><span class="line"></span><br><span class="line">　　　　输入命令后进入安装阶段，需要用户输入一些信息 这里省略了.....</span><br><span class="line"></span><br><span class="line">　　-- 3，切换到我们的项目目录下 </span><br><span class="line"></span><br><span class="line">　　　　　　cd vue-demo</span><br><span class="line"></span><br><span class="line">　　　　　　npm run dev</span><br><span class="line"></span><br><span class="line">## 目录结构：</span><br><span class="line"></span><br><span class="line">　　-- build 里面是一些操作文件，使用npm run * 时其实执行的就是这里的文件</span><br><span class="line"></span><br><span class="line">　　-- config 配置文件，执行文件需要的配置信息</span><br><span class="line"></span><br><span class="line">　　-- src 资源文件 所有的组件以及所有的图片 都在这个文件夹下</span><br><span class="line"></span><br><span class="line">　　-- node_modules  项目依赖包</span><br><span class="line"></span><br><span class="line">　　-- static 静态资源</span><br><span class="line"></span><br><span class="line">　　-- package.json   依赖包的json文件</span><br><span class="line"></span><br><span class="line">其实这里面命令很多~我们在后续项目中应用到再说</span><br></pre></td></tr></table></figure></p><h1 id="vue-cli配置JQuery、bootstrap"><a href="#vue-cli配置JQuery、bootstrap" class="headerlink" title="vue-cli配置JQuery、bootstrap"></a>vue-cli配置JQuery、bootstrap</h1><h2 id="第一步-下载安装"><a href="#第一步-下载安装" class="headerlink" title="第一步  下载安装"></a>第一步  下载安装</h2><p>　　– npm install jquery </p><p>　　– npm install bootstrap </p><h2 id="第二步-修改build-webpack-base-conf-js"><a href="#第二步-修改build-webpack-base-conf-js" class="headerlink" title="第二步 修改build/webpack.base.conf.js"></a>第二步 修改build/webpack.base.conf.js</h2><blockquote><p>const webpack = require(‘webpack’)<br>// 在module.exports里添加插件<br>plugins: [<br>    new webpack.ProvidePlugin({<br>      $: “jquery”,<br>      jQuery: “jquery”,<br>      “windows.jQuery”: “jquery”,<br>      // Popper: [‘popper.js’, ‘default’]<br>    })<br>],<br>//  <strong>***</strong>下面是如果手动下载bootstrap用的<strong>***</strong><br>resolve: {<br>    extensions: [‘.js’, ‘.vue’, ‘.json’],<br>    alias: {<br>      ‘vue$’: ‘vue/dist/vue.esm.js’,<br>      ‘@’: resolve(‘src’),<br>      // 如果是手动下载的bootstrap需要添加这个配置<br>      // ‘assets’: path.resolve(__dirname, ‘../src/assets’),<br>      // ‘jquery’: ‘jquery/src/jquery’<br>    }<br>  },</p></blockquote><p>修改配置文件</p><h2 id="第三步-修改主程序的js文件-main-js"><a href="#第三步-修改主程序的js文件-main-js" class="headerlink" title="第三步 修改主程序的js文件 main.js"></a>第三步 修改主程序的js文件 main.js</h2><blockquote><p>import $ from ‘jquery’<br>import ‘bootstrap/dist/css/bootstrap.min.css’<br>import ‘bootstrap/dist/js/bootstrap.min.js’</p></blockquote><h1 id="vue-cli-3-0"><a href="#vue-cli-3-0" class="headerlink" title="vue-cli 3.0"></a>vue-cli 3.0</h1><h2 id="第一步-下载vue-cli-3-0"><a href="#第一步-下载vue-cli-3-0" class="headerlink" title="第一步 下载vue-cli 3.0"></a>第一步 下载vue-cli 3.0</h2><p>　　– npm install -g @vue/cli</p><p>　　– 报错 npm error  可以运行下面命令</p><p>　　　　– npm cache clean –force &amp;&amp; npm cache verify</p><h2 id="第二步-创建项目"><a href="#第二步-创建项目" class="headerlink" title="第二步 创建项目"></a>第二步 创建项目</h2><p>　　– vue create xxxx</p><p>　　之后会出现很多选项，我们可以根据自己的习惯去选择~~</p><h2 id="第三步-目录结构以及配置文件"><a href="#第三步-目录结构以及配置文件" class="headerlink" title="第三步 目录结构以及配置文件"></a>第三步 目录结构以及配置文件</h2><p>　　– vue-cli3 目录更加简单</p><p>　　– 我们手动在项目根目录下创建  vue.config.js 里面写vue的配置信息</p><h1 id="vue-cli3-配置jQuery、bootstrap"><a href="#vue-cli3-配置jQuery、bootstrap" class="headerlink" title="vue-cli3 配置jQuery、bootstrap"></a>vue-cli3 配置jQuery、bootstrap</h1><p>　　– 跟vue-cli2一样的配置，手动创建一个webpack.base.conf.js </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Node-js-npm&quot;&gt;&lt;a href=&quot;#Node-js-npm&quot; class=&quot;headerlink&quot; title=&quot;Node.js   npm&quot;&gt;&lt;/a&gt;Node.js   npm&lt;/h1&gt;&lt;h2 id=&quot;什么是Node-js-以及npm&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue总结</title>
    <link href="http://yoursite.com/2018/11/13/Vue%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/11/13/Vue总结/</id>
    <published>2018-11-13T00:30:00.000Z</published>
    <updated>2018-11-15T06:36:05.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue总结"><a href="#vue总结" class="headerlink" title="vue总结"></a>vue总结</h1><blockquote><p>MVC  Model View Controller</p></blockquote><blockquote><p>MVVM Model View ViweMode</p></blockquote><h2 id="ES6常用语法"><a href="#ES6常用语法" class="headerlink" title="ES6常用语法"></a>ES6常用语法</h2><pre><code>1.1 变量的提升1.2 模板字符串 ``${}1.3 数据的解构1.4 类 class extends constructor  super1.5 函数    1.5.1 注意this和普通函数的区别1.6 箭头函数1.7 单体模式1.8 import export   export default</code></pre><h2 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a>Vue常用指令</h2><pre><code>2.1 v-text  innerText2.2 v-html  innerHtml2.3 v-for  :key2.4 v-if v-else-if v-else  appendChild2.5 v-show  display2.6 v-on  @xxxx=&quot;自己处理的方法&quot;2.7 v-bind  :属性名称=“属性的值”2.8 v-model    2.8.1 input    2.8.2 textarea    2.8.3 select2.9 指令修饰符    2.9.1 .lazy    2.9.2 .number    2.9.3 .trim2.10 计算属性    2.10.1 放入缓存    2.10.2 只有数据改变的时候才会重新计算2.11 数据监听    2.11.1 注意可变类型和不可变    2.11.2 深监听  deep=true2.12 获取DOM    2.12.1 给便签绑定ref属性  ref=“属性值”    2.12.2 this.$refs.属性值2.13 自定义指令    2.13.1 vue.directive(“指令名称”, function(el, binding){        el 绑定指令的便签元素        binding 指令的所有信息    })</code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><pre><code>3.1 数据监听    3.1.1 改变数据        直接赋值    3.1.2 改变数组长度        能够被监听到，新值和旧值一样    3.1.3 改变数组内的值        app = new vue({})        app.$set(this.hobby, 0, &apos;抽烟&apos;)        $set()修改数组中的值可以监听        $delete()</code></pre><h2 id="Vue的组件"><a href="#Vue的组件" class="headerlink" title="Vue的组件"></a>Vue的组件</h2><h3 id="组件的注册"><a href="#组件的注册" class="headerlink" title="组件的注册"></a>组件的注册</h3><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><pre><code>Vue.compontent(“组件名称”, {})</code></pre><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><pre><code>const = app = new Vue({    el: &apos;#app&apos;,    components: {        组件的名称: 组件的配置信息    }})</code></pre><h4 id="子组件的注册"><a href="#子组件的注册" class="headerlink" title="子组件的注册"></a>子组件的注册</h4><pre><code>在父组件中注册components## 注意写组件标签## 每个组件的template只识别一个作用域块</code></pre><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><h4 id="父子的通信"><a href="#父子的通信" class="headerlink" title="父子的通信"></a>父子的通信</h4><pre><code>在父组件中给子组件绑定属性子组件通过props=[&quot;属性名称&quot;]</code></pre><h4 id="子父的通信"><a href="#子父的通信" class="headerlink" title="子父的通信"></a>子父的通信</h4><pre><code>子组件先提交事件    this.$emit(&quot;事件名称&quot;, 值)在父组件中给子组件绑定事件    &lt;child @事件名称=&quot;父亲处理的方法&quot;&gt;&lt;/child&gt;</code></pre><h4 id="非父子的通信"><a href="#非父子的通信" class="headerlink" title="非父子的通信"></a>非父子的通信</h4><pre><code>其中一个组件向中间调度器提交事件另一个组件监听中间调度器的事件注意this的问题中间调度器  let temp = new Vue();temp.$emit(&quot;say&quot;, value) // 事件名称和值mounted(){    that = this    // 监听中间调度器中的方法    temp.$on(&quot;say&quot;, function(data){        // 这里的this是temp的this        that.xxx = data // 这样改值    })}</code></pre><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><pre><code>&lt;slot&gt;&lt;/slot&gt;命名的插槽</code></pre><h3 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h3><pre><code>代码重用的mixins = [base] </code></pre><h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><h3 id="vue生命周期之beforeCreate"><a href="#vue生命周期之beforeCreate" class="headerlink" title="vue生命周期之beforeCreate"></a>vue生命周期之beforeCreate</h3><pre><code>实例创建之前除标签外，所有的vue需要的数据，事件都不存在</code></pre><h3 id="vue生命周期之created"><a href="#vue生命周期之created" class="headerlink" title="vue生命周期之created"></a>vue生命周期之created</h3><pre><code>实例创建之后，data和事件已经被解析到，el还没有找到</code></pre><h3 id="vue生命周期之beforeMount"><a href="#vue生命周期之beforeMount" class="headerlink" title="vue生命周期之beforeMount"></a>vue生命周期之beforeMount</h3><pre><code>开始找标签，数据还没有被渲染，事件也没有被监听</code></pre><h3 id="vue生命周期之mounted"><a href="#vue生命周期之mounted" class="headerlink" title="vue生命周期之mounted"></a>vue生命周期之mounted</h3><pre><code>开始渲染数据，开始监听事件</code></pre><h3 id="vue生命周期之beforeUpdata"><a href="#vue生命周期之beforeUpdata" class="headerlink" title="vue生命周期之beforeUpdata"></a>vue生命周期之beforeUpdata</h3><pre><code>数据已经被修改在虚拟DOM，但没有被渲染到页面上</code></pre><h3 id="vue生命周期之updata"><a href="#vue生命周期之updata" class="headerlink" title="vue生命周期之updata"></a>vue生命周期之updata</h3><pre><code>开始使用Diff算法，将虚拟DOM中的修改应用大页面上，此时真实DOM中数据被修改</code></pre><h3 id="vue生命周期之beforeDestory"><a href="#vue生命周期之beforeDestory" class="headerlink" title="vue生命周期之beforeDestory"></a>vue生命周期之beforeDestory</h3><pre><code>所有的数据都存在</code></pre><h3 id="vue生命周期之destoryed"><a href="#vue生命周期之destoryed" class="headerlink" title="vue生命周期之destoryed"></a>vue生命周期之destoryed</h3><pre><code>所有的数据都有(虚拟DOM中找数据)展示的真实DOM已经是静态页面了&lt;keep-alive&gt;&lt;/keep-alive&gt;vue提供的用来缓存被消除的标签用activated和deactivated取代了beforeUpdate和destory的执行</code></pre><h3 id="最常用的钩子"><a href="#最常用的钩子" class="headerlink" title="最常用的钩子"></a>最常用的钩子</h3><pre><code>beforeMountmounted</code></pre><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><pre><code>let url = [    {        path: &apos;/&apos;,        name: &quot;home&quot;,        component: {            template: ``,        }    }]let router = nwe VueRouter({    routes: url})const app = new Vue({    el: &apos;app&apos;,    router: router,})&lt;router-link to=&apos;/&apos;&gt;首页&lt;/router-link&gt;&lt;router-link :to=&apos;{name: &quot;home&quot;}&apos;&gt;首页&lt;/router-link&gt;&lt;router-view&gt;&lt;/router-view&gt;</code></pre><h3 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h3><pre><code>children: [    {}]append在父路由对应的组件的template里面写router-link router-view</code></pre><h3 id="路由的命名"><a href="#路由的命名" class="headerlink" title="路由的命名"></a>路由的命名</h3><pre><code>name注意to加冒号动态绑定</code></pre><h3 id="路由的参数"><a href="#路由的参数" class="headerlink" title="路由的参数"></a>路由的参数</h3><pre><code>{    path: &quot;/course/:id&quot;,}this.$route.params.idthis.$route.query.xxx$route 是一个对象 存放当前路由的所有信息$router VueRouter实例化对象</code></pre><h3 id="手动路由"><a href="#手动路由" class="headerlink" title="手动路由"></a>手动路由</h3><pre><code>this.$router.push(&apos;/&apos;)this.$router.push({name:&quot;home&quot;})</code></pre><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><pre><code>redirect: {name: &apos;xxx&apos;, params: {key: value}}</code></pre><h3 id="路由的钩子"><a href="#路由的钩子" class="headerlink" title="路由的钩子"></a>路由的钩子</h3><pre><code>router.beforeEach(function(to, from next){    // to 你要去哪    // from 你要从哪里来    // next() 你要去做什么 参数可以给路径  必须有，没有就不走})router.afterEach(function(to, from){    // to 你要去哪    // from 你从哪里来})to和from都是$route对象   路由的所有信息</code></pre><p></p><h2 id="node-js-npm-webpack-vue-cli-自带webpack"><a href="#node-js-npm-webpack-vue-cli-自带webpack" class="headerlink" title="node.js + npm + webpack + vue-cli(自带webpack)"></a>node.js + npm + webpack + vue-cli(自带webpack)</h2><pre><code>node.js / npm    - npm 管理工作目录        npm init -y    - 下载包        npm i xxx@0.0.0    - 卸载        npm uninstall xxx    - 更新        npm updata xxxwebpack  4    - 下载        npm i webpack webpack-cli    - 打包        webpack --mode development/production    - 打包默认的入口文件        src目录下的index.js    - 出口文件        dist目录的main.jswue-cli  2    - 帮助我们快速搭建项目的脚手架工具    - 下载        npm i vue-cli    - 用vue-cli帮助我们创建项目        vue init webpack xxxx(项目名称)    - 启动项目        cd xxxx(项目名称)        npm run dev    - 打吧包        npm run build</code></pre><h2 id="Vuex和axios"><a href="#Vuex和axios" class="headerlink" title="Vuex和axios"></a>Vuex和axios</h2><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><pre><code>存放一些公共的东西,是一个仓库安装    npm i vuex配置    导入        import vuex from &quot;vuex&quot;    vue使用vuex        vue.use(vuex)    实例化仓库        new vuex.Store({            state: {},            getters: {},            mutations: {}        })    new Vue({        el: &apos;#app&apos;,        store,    })获取残仓库数据    this.$store.state.xxx    this.$store.getters.xxx改变仓库中的数据    组件向仓库提交修改事件        this.$store.commit(&quot;事件名称&quot;, data)    在仓库中的mutations中        mutations: {            &quot;事件名称&quot;: function(state, data){                修改state中的数据            }        }注意计算属性    仓库中的数据建议都放在计算属性中</code></pre><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><pre><code>向后端服务器发送请求实现ajax技术的工具配置    下载        npm i axios    导入        import axios from “axios”    在vue的原型链中加入方法        Vue.prototype.#axios = axios发送请求    this.$axios.request({        url: &apos;&apos;,        method: &apos;&apos;,    }).then(function(){    }).catch(function(){    })</code></pre><h2 id="前后端的接通"><a href="#前后端的接通" class="headerlink" title="前后端的接通"></a>前后端的接通</h2><pre><code>后端设计一个接口前端通过axios发送请求拿到数据跨域问题</code></pre><h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h2><pre><code>按照文档安装，并研究如何使用</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue总结&quot;&gt;&lt;a href=&quot;#vue总结&quot; class=&quot;headerlink&quot; title=&quot;vue总结&quot;&gt;&lt;/a&gt;vue总结&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MVC  Model View Controller&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue组件系统</title>
    <link href="http://yoursite.com/2018/10/14/vue%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/10/14/vue组件系统/</id>
    <published>2018-10-14T12:37:04.000Z</published>
    <updated>2018-11-15T06:36:47.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue组件系统之全局组件的注册"><a href="#Vue组件系统之全局组件的注册" class="headerlink" title="Vue组件系统之全局组件的注册"></a>Vue组件系统之全局组件的注册</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 注册</span></span><br><span class="line"><span class="undefined">&gt;    Vue.component(</span></span><br><span class="line"><span class="undefined">&gt;        // 第一个是组件名称  第二个object</span></span><br><span class="line"><span class="undefined">&gt;        "global-component", &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // 组件内容  抱一个div-单个根元素</span></span><br><span class="line"><span class="xml">&gt;            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;            // data必须是函数</span></span><br><span class="line"><span class="undefined">&gt;            data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;                // return中写数据</span></span><br><span class="line"><span class="undefined">&gt;                return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;            &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    );</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="xml">&gt;        // template: `<span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 注册组件</span></span><br><span class="line"><span class="undefined">&gt;    Vue.component(</span></span><br><span class="line"><span class="undefined">&gt;        // 第一个是组件名称  第二个object</span></span><br><span class="line"><span class="undefined">&gt;        "global-component", &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // 组件内容  抱一个div-单个根元素，包在app这个div中</span></span><br><span class="line"><span class="xml">&gt;            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;            // data必须是函数</span></span><br><span class="line"><span class="undefined">&gt;            data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;                // return中写数据</span></span><br><span class="line"><span class="undefined">&gt;                return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;            &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    );</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        // 根元素会替换div</span></span><br><span class="line"><span class="xml">&gt;        template: `<span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>全局组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;// 总结</span><br><span class="line">&gt;Vue.component(</span><br><span class="line">&gt;        // 第一个是组件名称  第二个object</span><br><span class="line">&gt;        "global-component", &#123;</span><br><span class="line">&gt;            // 组件内容  抱一个div-单个根元素，包在app这个div中</span><br><span class="line">&gt;            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span><br><span class="line">&gt;            // data必须是函数</span><br><span class="line">&gt;            data()&#123;</span><br><span class="line">&gt;                // return中写数据</span><br><span class="line">&gt;                return &#123;</span><br><span class="line">&gt;                    db: 'hello',</span><br><span class="line">&gt;                &#125;,</span><br><span class="line">&gt;computed: &#123;&#125;,</span><br><span class="line">&gt;watch: &#123;&#125;,</span><br><span class="line">&gt;methods: &#123;&#125;,</span><br><span class="line">&gt;            &#125;</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    );</span><br><span class="line">&gt;</span><br><span class="line">&gt;new Vue(&#123;</span><br><span class="line">&gt;        el: '#app',</span><br><span class="line">&gt;        // 根元素会替换div</span><br><span class="line">&gt;        template: `<span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span>`</span><br><span class="line">&gt;    &#125;)</span><br><span class="line">&gt;</span><br><span class="line">&gt;// data 必须是函数</span><br><span class="line">&gt;// 没有属性</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="组件系统之组件的复用"><a href="#组件系统之组件的复用" class="headerlink" title="组件系统之组件的复用"></a>组件系统之组件的复用</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 注册</span></span><br><span class="line"><span class="undefined">&gt;    Vue.component(</span></span><br><span class="line"><span class="undefined">&gt;        // 第一个是组件名称  第二个object</span></span><br><span class="line"><span class="undefined">&gt;        "global-component", &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // 组件内容  抱一个div-单个根元素</span></span><br><span class="line"><span class="xml">&gt;            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;            // data必须是函数</span></span><br><span class="line"><span class="undefined">&gt;            data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;                // return中写数据</span></span><br><span class="line"><span class="undefined">&gt;                return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;            &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    );</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        </span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="组价系统之局部组件的注册"><a href="#组价系统之局部组件的注册" class="headerlink" title="组价系统之局部组件的注册"></a>组价系统之局部组件的注册</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line">&gt;   </span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="xml">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;            return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        computed: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="xml">&gt;        template: `<span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            'app-header': Header</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;    <span class="comment">&lt;!--&lt;App&gt;&lt;/App&gt;--&gt;</span>   </span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="xml">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;            return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        computed: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // ...</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 在入口组件中注册写的局部组件</span></span><br><span class="line"><span class="undefined">&gt;    let App = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        template: `</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            'app-header': Header</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // 组件的私有数据</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;&#125;,</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 根实例</span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        // 作为根被渲染</span></span><br><span class="line"><span class="xml">&gt;        template: `<span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // App:App,</span></span><br><span class="line"><span class="undefined">&gt;            App,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>局部组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;- 总结</span><br><span class="line">&gt;</span><br><span class="line">&gt;创建组件</span><br><span class="line">&gt;创建局部组件，起始就是创建一个JavaScript object</span><br><span class="line">&gt;    let Header = &#123;</span><br><span class="line">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span><br><span class="line">&gt;        data()&#123;</span><br><span class="line">&gt;            return &#123;</span><br><span class="line">&gt;                    db: 'hello',</span><br><span class="line">&gt;                &#125;</span><br><span class="line">&gt;        &#125;,</span><br><span class="line">&gt;        computed: &#123;&#125;,</span><br><span class="line">&gt;    &#125;;</span><br><span class="line">&gt;注册组件</span><br><span class="line">&gt;</span><br><span class="line">&gt;    new Vue(&#123;</span><br><span class="line">&gt;        el: '#app',</span><br><span class="line">&gt;        template: `<span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span>`,</span><br><span class="line">&gt;        components: &#123;</span><br><span class="line">&gt;            'app-header': Header</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    &#125;)</span><br><span class="line">&gt;</span><br><span class="line">&gt;组件可以嵌套使用</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h1 id="Vue组件系统之父子组件的通信"><a href="#Vue组件系统之父子组件的通信" class="headerlink" title="Vue组件系统之父子组件的通信"></a>Vue组件系统之父子组件的通信</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;   </span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 子</span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="undefined">&gt;      template: `&lt;div&gt;&lt;h3&gt;&#123;&#123; db &#125;&#125;&lt;/h3&gt;&lt;h3&gt;&#123;&#123; fData &#125;&#125;&lt;/h3&gt;&lt;&lt;/div&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;            return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // 接收父亲传来的数据</span></span><br><span class="line"><span class="undefined">&gt;        props:['fData'],</span></span><br><span class="line"><span class="undefined">&gt;        computed: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // ...</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 在入口组件中注册写的局部组件</span></span><br><span class="line"><span class="undefined">&gt;    // 父</span></span><br><span class="line"><span class="undefined">&gt;    let App = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        template: `</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">app-header</span> <span class="attr">v-bind:fData</span>=<span class="string">"fatherData"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            'app-header': Header</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // 组件的私有数据</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;            return &#123;fatherData: 0,&#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 根实例</span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        // 作为根被渲染</span></span><br><span class="line"><span class="xml">&gt;        template: `<span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // App:App,</span></span><br><span class="line"><span class="undefined">&gt;            App,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="Vue组件系统之子父组件的通信"><a href="#Vue组件系统之子父组件的通信" class="headerlink" title="Vue组件系统之子父组件的通信"></a>Vue组件系统之子父组件的通信</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">dic</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 子</span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="xml">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'sonClick'</span>&gt;</span>点击改变字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        methods: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            sonClick: function()&#123;</span></span><br><span class="line"><span class="undefined">&gt;                // 儿子的的行为传给父亲</span></span><br><span class="line"><span class="undefined">&gt;                this.$emit("change-size", 0.1)</span></span><br><span class="line"><span class="undefined">&gt;            &#125;  </span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        computed: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // ...</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 父</span></span><br><span class="line"><span class="undefined">&gt;    let App = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        template: `</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123; fontSize: postFontSize + 'em' &#125;"</span>&gt;</span>我是字体<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">app-header</span> <span class="attr">v-on:change-size</span>=<span class="string">"fatherClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            'app-header': Header</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // 组件的私有数据</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;            return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                postFontSize: 1,</span></span><br><span class="line"><span class="undefined">&gt;            &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        methods: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // 自己定义的change-size事件，一直在监听，等着儿子传来的信息</span></span><br><span class="line"><span class="undefined">&gt;            fatherClick: function(value)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                this.postFontSize += value;</span></span><br><span class="line"><span class="undefined">&gt;            &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 根实例</span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        // 作为根被渲染</span></span><br><span class="line"><span class="xml">&gt;        template: `<span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // App:App,</span></span><br><span class="line"><span class="undefined">&gt;            App,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="Vue组件系统之混入（mixin）"><a href="#Vue组件系统之混入（mixin）" class="headerlink" title="Vue组件系统之混入（mixin）"></a>Vue组件系统之混入（mixin）</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">dic</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">my-header</span>&gt;</span><span class="tag">&lt;/<span class="name">my-header</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">my-app</span>&gt;</span><span class="tag">&lt;/<span class="name">my-app</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="xml">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'show('</span><span class="attr">xxx</span>')'&gt;</span>点击显示xxx来了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'hide('</span><span class="attr">xxx</span>')'&gt;</span>点击显示xxx去了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        methods: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            show: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;            &#125;,</span></span><br><span class="line"><span class="undefined">&gt;            hide: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;            &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    let App = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        template: `</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">mouseenter</span>=<span class="string">'show('</span><span class="attr">000</span>')'&gt;</span>点击显示000来了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">mouseleve</span>=<span class="string">'hide('</span><span class="attr">000</span>')'&gt;</span>点击显示000去了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        methods: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            show: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;            &#125;,</span></span><br><span class="line"><span class="undefined">&gt;            hide: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;            &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 根实例</span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            "my-header": Header,</span></span><br><span class="line"><span class="undefined">&gt;            "my-app": App,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">my-header</span>&gt;</span><span class="tag">&lt;/<span class="name">my-header</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">my-app</span>&gt;</span><span class="tag">&lt;/<span class="name">my-app</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">dic</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    let mixs = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        methods:&#123;</span></span><br><span class="line"><span class="undefined">&gt;            show: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                    console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;                &#125;,</span></span><br><span class="line"><span class="undefined">&gt;            hide: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                    console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;                &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;</span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="xml">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'show('</span><span class="attr">xxx</span>')'&gt;</span>点击显示xxx来了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'hide('</span><span class="attr">xxx</span>')'&gt;</span>点击显示xxx去了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        mixins: [mixs],</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    let App = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        template: `</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">mouseenter</span>=<span class="string">'show("000")'</span>&gt;</span>点击显示000来了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">mouseleve</span>=<span class="string">'hide("000")'</span>&gt;</span>点击显示000去了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        mixins: [mixs],</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 根实例</span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            "my-header": Header,</span></span><br><span class="line"><span class="undefined">&gt;            "my-app": App,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h1 id="Vue组件系统之插槽"><a href="#Vue组件系统之插槽" class="headerlink" title="Vue组件系统之插槽"></a>Vue组件系统之插槽<slot></slot></h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;- 内容分发</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    .box &#123;</span></span><br><span class="line"><span class="undefined">&gt;        width: 50px;</span></span><br><span class="line"><span class="undefined">&gt;        height: 50px;</span></span><br><span class="line"><span class="undefined">&gt;        float: left;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">global-component</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">global-component</span>&gt;</span>免费<span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">global-component</span>&gt;</span>收费<span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 注册全局组件</span></span><br><span class="line"><span class="undefined">&gt;    Vue.component(</span></span><br><span class="line"><span class="undefined">&gt;        "global-component", &#123;</span></span><br><span class="line"><span class="xml">&gt;            template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    );</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="Vue组件系统之具名插槽"><a href="#Vue组件系统之具名插槽" class="headerlink" title="Vue组件系统之具名插槽"></a>Vue组件系统之具名插槽</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    .box &#123;</span></span><br><span class="line"><span class="undefined">&gt;        width: 50px;</span></span><br><span class="line"><span class="undefined">&gt;        height: 50px;</span></span><br><span class="line"><span class="undefined">&gt;        float: left;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">'home'</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">'free'</span>&gt;</span>免费<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">'toll'</span>&gt;</span>收费<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 注册全局组件</span></span><br><span class="line"><span class="undefined">&gt;    Vue.component(</span></span><br><span class="line"><span class="undefined">&gt;        "global-component", &#123;</span></span><br><span class="line"><span class="xml">&gt;            template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"home"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"free"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"toll"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    );</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue组件系统之全局组件的注册&quot;&gt;&lt;a href=&quot;#Vue组件系统之全局组件的注册&quot; class=&quot;headerlink&quot; title=&quot;Vue组件系统之全局组件的注册&quot;&gt;&lt;/a&gt;Vue组件系统之全局组件的注册&lt;/h1&gt;&lt;blockquote&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>权限管理的三级菜单的流程</title>
    <link href="http://yoursite.com/2018/08/14/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%BB%84%E4%BB%B6%E6%B5%81%E7%A8%8B%E5%A4%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/08/14/权限管理组件流程大总结/</id>
    <published>2018-08-14T08:34:44.000Z</published>
    <updated>2018-11-15T06:39:17.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="权限管理的三级菜单的流程"><a href="#权限管理的三级菜单的流程" class="headerlink" title="权限管理的三级菜单的流程"></a>权限管理的三级菜单的流程</h1><blockquote><p>权限控制</p><ul><li><p>url代表了权限</p></li><li><p>表结构（6张表，ORM创建4个类，两个many2many会自动再生成两张表）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;  用户表</span><br><span class="line">&gt;  用户名</span><br><span class="line">&gt;  密码</span><br><span class="line">&gt;  多对多 roles(角色)</span><br><span class="line">&gt;  角色表</span><br><span class="line">&gt;  标题 title</span><br><span class="line">&gt;  多对多 permission(权限)</span><br><span class="line">&gt;  权限表</span><br><span class="line">&gt;  标题 title</span><br><span class="line">&gt;  权限 url</span><br><span class="line">&gt;  URL别名 name    - 设置唯一(方便为了将权限粒度控制到按钮级别)</span><br><span class="line">&gt;  外键 menu(菜单)</span><br><span class="line">&gt;  外键 permission(self自己)</span><br><span class="line">&gt;  菜单表</span><br><span class="line">&gt;  标题 title</span><br><span class="line">&gt;  图标 icon</span><br><span class="line">&gt;  权重 weight</span><br><span class="line">&gt;  用户和角色关系表</span><br><span class="line">&gt;  角色和权限的关系表</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;from django.db import models</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;class Menu(models.Model):</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    一级菜单</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    title = models.CharField(max_length=32, verbose_name=&apos;标题&apos;, unique=True)  # 一级菜单的名字</span><br><span class="line">&gt;  &gt;    icon = models.CharField(max_length=32, verbose_name=&apos;图标&apos;, null=True, blank=True)</span><br><span class="line">&gt;  &gt;    weight = models.IntegerField(verbose_name=&apos;权重&apos;, default=1)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    class Meta:</span><br><span class="line">&gt;  &gt;        verbose_name_plural = &apos;菜单表&apos;</span><br><span class="line">&gt;  &gt;        verbose_name = &apos;菜单表&apos;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    def __str__(self):</span><br><span class="line">&gt;  &gt;        return self.title</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;class Permission(models.Model):</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    权限表</span><br><span class="line">&gt;  &gt;    有关联Menu的二级菜单</span><br><span class="line">&gt;  &gt;    没有关联Menu的不是二级菜单，是不可以做菜单的权限</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    title = models.CharField(max_length=32, verbose_name=&apos;标题&apos;)</span><br><span class="line">&gt;  &gt;    url = models.CharField(max_length=32, verbose_name=&apos;权限&apos;)</span><br><span class="line">&gt;  &gt;    menu = models.ForeignKey(&apos;Menu&apos;, null=True, blank=True, verbose_name=&apos;菜单&apos;)</span><br><span class="line">&gt;  &gt;    # 该权限关联的其他权限是否也是在当前url上展示</span><br><span class="line">&gt;  &gt;    parent = models.ForeignKey(to=&apos;Permission&apos;, null=True, blank=True, verbose_name=&apos;父权限&apos;)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    name = models.CharField(max_length=32, null=True, blank=True, unique=True, verbose_name=&apos;权限的别名&apos;)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    class Meta:</span><br><span class="line">&gt;  &gt;        verbose_name_plural = &apos;权限表&apos;</span><br><span class="line">&gt;  &gt;        verbose_name = &apos;权限表&apos;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    def __str__(self):</span><br><span class="line">&gt;  &gt;        return self.title</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;class Role(models.Model):</span><br><span class="line">&gt;  &gt;    name = models.CharField(max_length=32, verbose_name=&apos;角色名称&apos;)</span><br><span class="line">&gt;  &gt;    permissions = models.ManyToManyField(to=&apos;Permission&apos;, verbose_name=&apos;角色所拥有的权限&apos;, blank=True)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    def __str__(self):</span><br><span class="line">&gt;  &gt;        return self.name</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;class User(models.Model):</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    用户表</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    name = models.CharField(max_length=32, verbose_name=&apos;用户名&apos;)</span><br><span class="line">&gt;  &gt;    password = models.CharField(max_length=32, verbose_name=&apos;密码&apos;)</span><br><span class="line">&gt;  &gt;    roles = models.ManyToManyField(to=&apos;Role&apos;, verbose_name=&apos;用户所拥有的角色&apos;, blank=True)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    def __str__(self):</span><br><span class="line">&gt;  &gt;        return self.name</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><ul><li><p>流程梳理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;  - 当一个url回车发出这个请求后，给到server端先判断这个请求url是不是有访问的权限</span><br><span class="line">&gt;    这个时候我们设置了白名单(在中间件这里(因为一开始就要判断身份))，如果是白名单</span><br><span class="line">&gt;    谁都可以访问</span><br><span class="line">&gt;    eg：</span><br><span class="line">&gt;      PERMISSION_SESSION_KEY = &apos;permissions&apos;</span><br><span class="line">&gt;      MENU_SESSION_KEY = &apos;menus&apos;</span><br><span class="line">&gt;      WHITE_URL_LIST = [</span><br><span class="line">&gt;          r&apos;^/login/$&apos;,</span><br><span class="line">&gt;          r&apos;^/logout/$&apos;,</span><br><span class="line">&gt;          r&apos;^/reg/$&apos;,</span><br><span class="line">&gt;          r&apos;^/admin/.*&apos;,</span><br><span class="line">&gt;      ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;  - 这时用户登录，如果登录成功</span><br><span class="line">&gt;    不同的用户对应不同的权限，也就是可以访问不同的url</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&gt;  - 登录成功，(权限信息的初始化)</span><br><span class="line">&gt;    我们该做的就是拿到这个用户对应的权限信息 - ORM(用户信息-角色-权限-菜单)</span><br><span class="line">&gt;    # user = models.User.objects.filter(name=username, password=pwd).first()</span><br><span class="line">&gt;    permission_query = user.roles.filter(permissions__url__isnull=False).values(</span><br><span class="line">&gt;          &apos;permissions__url&apos;,  # 权限url</span><br><span class="line">&gt;          &apos;permissions__title&apos;,  # 权限的标题</span><br><span class="line">&gt;          &apos;permissions__id&apos;,  # 权限的id</span><br><span class="line">&gt;          &apos;permissions__name&apos;,  # 权限的别名</span><br><span class="line">&gt;          &apos;permissions__parent_id&apos;,  # 此权限对应的父权限的id</span><br><span class="line">&gt;          &apos;permissions__parent__name&apos;,  # 次权限对应的父权限的别名</span><br><span class="line">&gt;          &apos;permissions__menu_id&apos;,  # 此权限对应的菜单id</span><br><span class="line">&gt;          &apos;permissions__menu__title&apos;,  # 此权限对应的菜单标题</span><br><span class="line">&gt;          &apos;permissions__menu__icon&apos;,  # 此权限对应的菜单的图标</span><br><span class="line">&gt;          &apos;permissions__menu__weight&apos;,  # 表单排序用的</span><br><span class="line">&gt;      ).distinct()</span><br><span class="line">&gt;    数据结构(字典)</span><br><span class="line">&gt;    permission_dict来存储此权限信息</span><br><span class="line">&gt;    menu_dict来存储菜单信息</span><br><span class="line">&gt;    permission_dict = &#123;</span><br><span class="line">&gt;        &apos;URL的别名&apos;：&#123;&apos;url&apos;,&apos;title&apos;,&apos;id&apos;,&apos;pid&apos;,&apos;pname&apos; &#125;</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;    menu_list = &#123;</span><br><span class="line">&gt;        &apos;菜单ID&apos;：&#123;</span><br><span class="line">&gt;  &apos;title&apos;: 一级菜单的标题，</span><br><span class="line">&gt;  &apos;icon&apos;: 一级菜单的图标，</span><br><span class="line">&gt;  &apos;weight&apos;: 权重，</span><br><span class="line">&gt;  &apos;children&apos;: [</span><br><span class="line">&gt;  &#123;&apos;url&apos;,&apos;title&apos;,&apos;id&apos;,&#125;</span><br><span class="line">&gt;  ]</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  权限信息存的就是：</span><br><span class="line">&gt;  当前这个权限的是谁，他的id多少，他的标题是什么，他的父权限是谁(id)，他的父权限的别名是什么</span><br><span class="line">&gt;  菜单信息存的就是：</span><br><span class="line">&gt;  这个权限(url)对应的菜单的标题是什么，菜单的图标是什么，权重是多少，他对应的二级菜单是哪些</span><br><span class="line">&gt;  二级菜单(children)也就是，对应的权限信息</span><br><span class="line">&gt;  这里面存的也就是他的权限信息(他的title，url，id，parent_id)</span><br><span class="line">&gt;  将所有的权限遍历一遍后，将这些信息存入session中</span><br><span class="line">&gt;  为什么存入session，是因为session可以配置(放入缓存，访问次数比较多，所有存到缓存比较好)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;  # 遍历此用户对应的权限信息</span><br><span class="line">&gt;  for item in permission_query:</span><br><span class="line">&gt;  # 首先是权限信息，以权限的别名为键</span><br><span class="line">&gt;          permission_dict[item[&apos;permissions__name&apos;]] = (&#123;</span><br><span class="line">&gt;              &apos;url&apos;: item[&apos;permissions__url&apos;],</span><br><span class="line">&gt;              &apos;id&apos;: item[&apos;permissions__id&apos;],</span><br><span class="line">&gt;              &apos;parent_id&apos;: item[&apos;permissions__parent_id&apos;],</span><br><span class="line">&gt;              &apos;parent_name&apos;: item[&apos;permissions__parent__name&apos;],</span><br><span class="line">&gt;              &apos;title&apos;: item[&apos;permissions__title&apos;],</span><br><span class="line">&gt;          &#125;)</span><br><span class="line">&gt;          menu_id = item.get(&apos;permissions__menu_id&apos;)</span><br><span class="line">&gt;          if not menu_id:</span><br><span class="line">&gt;              continue</span><br><span class="line">&gt;          if menu_id not in menu_dict:</span><br><span class="line">&gt;              menu_dict[menu_id] = &#123;</span><br><span class="line">&gt;                  &apos;title&apos;: item[&apos;permissions__menu__title&apos;],</span><br><span class="line">&gt;                  &apos;icon&apos;: item[&apos;permissions__menu__icon&apos;],</span><br><span class="line">&gt;                  &apos;weight&apos;: item[&apos;permissions__menu__weight&apos;],</span><br><span class="line">&gt;                  &apos;children&apos;: [</span><br><span class="line">&gt;                      &#123;</span><br><span class="line">&gt;                          &apos;title&apos;: item[&apos;permissions__title&apos;],</span><br><span class="line">&gt;                          &apos;url&apos;: item[&apos;permissions__url&apos;],</span><br><span class="line">&gt;                          &apos;id&apos;: item[&apos;permissions__id&apos;],</span><br><span class="line">&gt;                          &apos;parent_id&apos;: item[&apos;permissions__parent_id&apos;],</span><br><span class="line">&gt;                      &#125;</span><br><span class="line">&gt;                  ]</span><br><span class="line">&gt;              &#125;</span><br><span class="line">&gt;          else:</span><br><span class="line">&gt;              menu_dict[menu_id][&apos;children&apos;].append(</span><br><span class="line">&gt;                  &#123;</span><br><span class="line">&gt;                      &apos;title&apos;: item[&apos;permissions__title&apos;],</span><br><span class="line">&gt;                      &apos;url&apos;: item[&apos;permissions__url&apos;],</span><br><span class="line">&gt;                      &apos;id&apos;: item[&apos;permissions__id&apos;],</span><br><span class="line">&gt;                      &apos;parent_id&apos;: item[&apos;permissions__parent_id&apos;],</span><br><span class="line">&gt;                  &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&gt;  - 登录成功后，信息存入session后，这时给服务器发送一个请求，这时就会走中间件进行权限的校验</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  - 走中间件process_request(self, request):</span><br><span class="line">&gt;  - 先获取这个请求的url   request.path_info</span><br><span class="line">&gt;  刚开始也先判断白名单， 白名单不符合从session中获取这个用户存的权限信息</span><br><span class="line">&gt;  permission_dict = request.session.get(settings.PERMISSION_SESSION_KEY)</span><br><span class="line">&gt;  - 导航栏可以存这里  - 写了一个inclution_tag来处理</span><br><span class="line">&gt;  request.breadcrumd_list = [</span><br><span class="line">&gt;              &#123;&quot;title&quot;: &apos;首页&apos;, &apos;url&apos;: &apos;#&apos;&#125;,</span><br><span class="line">&gt;          ]</span><br><span class="line">&gt;          @register.inclusion_tag(&apos;rbac/breadcrumbs.html&apos;)</span><br><span class="line">&gt;  def breadcrumb(request):</span><br><span class="line">&gt;      return &#123;&quot;breadcrumd_list&quot;: request.breadcrumd_list&#125;</span><br><span class="line">&gt;  - 遍历这个权限信息</span><br><span class="line">&gt;  可以通过正则匹配，匹配他是不是该用户的权限</span><br><span class="line">&gt;  如果匹配成功看他是否由parent_id有是子权限没有是父权限</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  if parent_id:</span><br><span class="line">&gt;          # 表示当前权限是子权限，让父权限是展开</span><br><span class="line">&gt;              request.current_menu_id = parent_id</span><br><span class="line">&gt;              request.breadcrumd_list.extend([</span><br><span class="line">&gt;              &#123;</span><br><span class="line">&gt;                &quot;title&quot;: permission_dict[parent_name][&apos;title&apos;],</span><br><span class="line">&gt;                    &apos;url&apos;: permission_dict[parent_name][&apos;url&apos;]</span><br><span class="line">&gt;                   &#125;,</span><br><span class="line">&gt;                     &#123;&quot;title&quot;: item[&apos;title&apos;], &apos;url&apos;: item[&apos;url&apos;]&#125;,</span><br><span class="line">&gt;                   ])</span><br><span class="line">&gt;           else:</span><br><span class="line">&gt;           # 表示当前权限是父权限，要展开的二级菜单</span><br><span class="line">&gt;              request.current_menu_id = id</span><br><span class="line">&gt;              # 添加面包屑导航</span><br><span class="line">&gt;              request.breadcrumd_list.append(&#123;</span><br><span class="line">&gt;              &quot;title&quot;: item[&apos;title&apos;], </span><br><span class="line">&gt;              &apos;url&apos;: item[&apos;url&apos;]</span><br><span class="line">&gt;              &#125;)</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   - request.current_menu_id</span><br><span class="line">&gt;  这个就是用来展示菜单和展示该权限的子权限为了选中同一个二级菜单的时候用的</span><br><span class="line">&gt;  -写一个includtion_tag</span><br><span class="line">&gt;  - </span><br><span class="line">&gt;     @register.inclusion_tag(&apos;rbac/menu.html&apos;)</span><br><span class="line">&gt;                  def menu(request):</span><br><span class="line">&gt;                      menu_list = request.session.get(settings.MENU_SESSION_KEY)</span><br><span class="line">&gt;                      order_dict = OrderedDict()</span><br><span class="line">&gt;                      for key in sorted(menu_list, key=lambda x: menu_list[x][&apos;weight&apos;], reverse=True):</span><br><span class="line">&gt;                          order_dict[key] = menu_list[key]</span><br><span class="line">&gt;                          item = order_dict[key]</span><br><span class="line">&gt;                          item[&apos;class&apos;] = &apos;hide&apos;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;                          for i in item[&apos;children&apos;]:</span><br><span class="line">&gt;  </span><br><span class="line">&gt;                              if i[&apos;id&apos;] == request.current_menu_id:</span><br><span class="line">&gt;                                  i[&apos;class&apos;] = &apos;active&apos;</span><br><span class="line">&gt;                                  item[&apos;class&apos;] = &apos;&apos;</span><br><span class="line">&gt;                      return &#123;&quot;menu_list&quot;: order_dict&#125;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&gt;  from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">&gt;  from django.conf import settings</span><br><span class="line">&gt;  from django.shortcuts import HttpResponse</span><br><span class="line">&gt;  import re</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  </span><br><span class="line">&gt;  class PermissionMiddleware(MiddlewareMixin):</span><br><span class="line">&gt;      def process_request(self, request):</span><br><span class="line">&gt;          # 对权限进行校验</span><br><span class="line">&gt;          # 1. 当前访问的URL</span><br><span class="line">&gt;          current_url = request.path_info</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          # 白名单的判断</span><br><span class="line">&gt;          for i in settings.WHITE_URL_LIST:</span><br><span class="line">&gt;              if re.match(i, current_url):</span><br><span class="line">&gt;                  return</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          # 2. 获取当前用户的所有权限信息</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          permission_dict = request.session.get(settings.PERMISSION_SESSION_KEY)</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          request.breadcrumd_list = [</span><br><span class="line">&gt;              &#123;&quot;title&quot;: &apos;首页&apos;, &apos;url&apos;: &apos;#&apos;&#125;,</span><br><span class="line">&gt;          ]</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          # 3. 权限的校验</span><br><span class="line">&gt;          print(current_url)</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          for item in permission_dict.values():</span><br><span class="line">&gt;              print(permission_dict)</span><br><span class="line">&gt;              url = item[&apos;url&apos;]</span><br><span class="line">&gt;              if re.match(&quot;^&#123;&#125;$&quot;.format(url), current_url):</span><br><span class="line">&gt;                  parent_id = item[&apos;parent_id&apos;]</span><br><span class="line">&gt;                  id = item[&apos;id&apos;]</span><br><span class="line">&gt;                  parent_name = item[&apos;parent_name&apos;]</span><br><span class="line">&gt;                  if parent_id:</span><br><span class="line">&gt;                      # 表示当前权限是子权限，让父权限是展开</span><br><span class="line">&gt;                      request.current_menu_id = parent_id</span><br><span class="line">&gt;                      request.breadcrumd_list.extend([</span><br><span class="line">&gt;                          &#123;&quot;title&quot;: permission_dict[parent_name][&apos;title&apos;],</span><br><span class="line">&gt;                           &apos;url&apos;: permission_dict[parent_name][&apos;url&apos;]&#125;,</span><br><span class="line">&gt;                          &#123;&quot;title&quot;: item[&apos;title&apos;], &apos;url&apos;: item[&apos;url&apos;]&#125;,</span><br><span class="line">&gt;                      ])</span><br><span class="line">&gt;                  else:</span><br><span class="line">&gt;                      # 表示当前权限是父权限，要展开的二级菜单</span><br><span class="line">&gt;                      request.current_menu_id = id</span><br><span class="line">&gt;                      # 添加面包屑导航</span><br><span class="line">&gt;                      request.breadcrumd_list.append(&#123;&quot;title&quot;: item[&apos;title&apos;], &apos;url&apos;: item[&apos;url&apos;]&#125;)</span><br><span class="line">&gt;                  return</span><br><span class="line">&gt;          else:</span><br><span class="line">&gt;              return HttpResponse(&apos;没有权限&apos;)</span><br><span class="line">&gt;  </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  - 权限力度控制到按钮级别</span><br><span class="line">&gt;  一个filter</span><br><span class="line">&gt;  一个url的反向解析</span><br><span class="line">&gt;  @register.filter</span><br><span class="line">&gt;  def has_permission(request, permission):</span><br><span class="line">&gt;  # session中存的就是权限的别名，别名就是反向解析的那个字符串</span><br><span class="line">&gt;      if permission in request.session.get(settings.PERMISSION_SESSION_KEY):</span><br><span class="line">&gt;          return True</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &#123;% if request|has_permission:&apos;web:customer_edit&apos; or request|has_permission:&apos;web:customer_del&apos; %&#125;</span><br><span class="line">&gt;  &lt;td&gt;</span><br><span class="line">&gt;  &#123;% if request|has_permission:&apos;web:customer_edit&apos; %&#125;</span><br><span class="line">&gt;  &lt;a style=&quot;color: #333333;&quot; href=&quot;&#123;% url &apos;web:customer_edit&apos; row.id %&#125;&quot;&gt;</span><br><span class="line">&gt;  &lt;i class=&quot;fa fa-edit&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">&gt;  &#123;% endif %&#125;</span><br><span class="line">&gt;  &#123;% if request|has_permission:&apos;web:customer_del&apos; %&#125;</span><br><span class="line">&gt;  &lt;a style=&quot;color: #d9534f;&quot; href=&quot;&#123;% url &apos;web:customer_del&apos; row.id  %&#125;&quot;&gt;&lt;i class=&quot;fa fa-trash-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">&gt;  &#123;% endif %&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h1 id="菜单和权限的展示在一个页面"><a href="#菜单和权限的展示在一个页面" class="headerlink" title="菜单和权限的展示在一个页面"></a>菜单和权限的展示在一个页面</h1><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment"># 菜单和权限的展示</span></span><br><span class="line">&gt;<span class="comment"># 点击每一个菜单出现对应的权限信息</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">def</span> <span class="title">menu_list</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;    all_menu = models.Menu.objects.all()</span><br><span class="line">&gt;    <span class="comment"># 拿到菜单对应的菜单id</span></span><br><span class="line">&gt;    mid = request.GET.get(<span class="string">'mid'</span>)</span><br><span class="line">&gt;    <span class="comment"># 如果拿到菜单id代表着有子权限</span></span><br><span class="line">&gt;    <span class="keyword">if</span> mid:</span><br><span class="line">&gt;        <span class="comment"># 从子权限出发 拿到 父权限对应的菜单id对应的权限  或者  菜单对应的权限（也就是二级菜单） 因为自己关联自己（从父亲和儿子两方面出发）</span></span><br><span class="line">&gt;        permission_query = models.Permission.objects.filter(Q(menu_id=mid) | Q(parent__menu_id=mid))</span><br><span class="line">&gt;    <span class="comment"># 如果没有菜单id则输出所有的权限信息</span></span><br><span class="line">&gt;    <span class="keyword">else</span>:</span><br><span class="line">&gt;        permission_query = models.Permission.objects.all()</span><br><span class="line">&gt;    <span class="comment"># 拿到查询出的权限对应的信息</span></span><br><span class="line">&gt;    all_permission = permission_query.values(<span class="string">'id'</span>, <span class="string">'url'</span>, <span class="string">'title'</span>, <span class="string">'name'</span>, <span class="string">'menu_id'</span>, <span class="string">'parent_id'</span>, <span class="string">'menu__title'</span>)</span><br><span class="line">&gt;    all_permission_dict = &#123;&#125;</span><br><span class="line">&gt;    <span class="keyword">for</span> item <span class="keyword">in</span> all_permission:</span><br><span class="line">&gt;        menu_id = item.get(<span class="string">'menu_id'</span>)</span><br><span class="line">&gt;        <span class="comment"># 找到有菜单id的权限，将其存入字典，键为权限的id</span></span><br><span class="line">&gt;        <span class="keyword">if</span> menu_id:</span><br><span class="line">&gt;            all_permission_dict[item[<span class="string">'id'</span>]] = item</span><br><span class="line">&gt;            <span class="comment"># 可以改都是引用</span></span><br><span class="line">&gt;            <span class="comment"># 得到所有有菜单的权限后，将每一个权限都设置一个children键值对，用来存储子权限信息</span></span><br><span class="line">&gt;            item[<span class="string">'children'</span>] = []</span><br><span class="line">&gt;    <span class="keyword">for</span> item <span class="keyword">in</span> all_permission:</span><br><span class="line">&gt;        pid = item.get(<span class="string">'parent_id'</span>)</span><br><span class="line">&gt;        <span class="comment"># 如果有父id代表的是子权限</span></span><br><span class="line">&gt;        <span class="keyword">if</span> pid:</span><br><span class="line">&gt;            <span class="comment"># 如果是子权限，就将子权限的信息存入多上一步做的处理（有菜单的父权限）children中</span></span><br><span class="line">&gt;            all_permission_dict[pid][<span class="string">'children'</span>].append(item)</span><br><span class="line">&gt;    <span class="keyword">return</span> render(request, <span class="string">'rbac/menu_list.html'</span>, &#123;</span><br><span class="line">&gt;        <span class="string">"mid"</span>: mid,</span><br><span class="line">&gt;        <span class="string">"all_menu"</span>: all_menu,</span><br><span class="line">&gt;        <span class="string">"all_permission_dict"</span>: all_permission_dict,</span><br><span class="line">&gt;    &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="权限系统的应用"><a href="#权限系统的应用" class="headerlink" title="权限系统的应用"></a>权限系统的应用</h1><blockquote><ul><li><p>拷贝rbac  App到新项目中</p></li><li><p>注册APP 以及配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;  #  ###### 权限相关的配置 ######</span><br><span class="line">&gt;  PERMISSION_SESSION_KEY = &apos;permissions&apos;</span><br><span class="line">&gt;  MENU_SESSION_KEY = &apos;menus&apos;</span><br><span class="line">&gt;  WHITE_URL_LIST = [</span><br><span class="line">&gt;      r&apos;^/login/$&apos;,</span><br><span class="line">&gt;      r&apos;^/logout/$&apos;,</span><br><span class="line">&gt;      r&apos;^/reg/$&apos;,</span><br><span class="line">&gt;      r&apos;^/admin/.*&apos;,</span><br><span class="line">&gt;  ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>数据库迁移命令</p><ul><li>删除rbac所有的迁移文件</li><li>执行两条命令</li></ul></li><li><p>路由相关</p><ul><li>url(r’rbac/‘,include(‘rbac.urls’,namespace=’rbac’))</li><li>给所有的URL起名字</li></ul></li><li><p>layout  模板注意</p><ul><li>block   css  js   content</li></ul></li><li><p>权限的管理</p><ul><li>添加角色</li><li>添加菜单</li><li>添加权限</li></ul></li><li><p>分配权限</p><ul><li><p>用户关联—修改原系统的用户表</p><ul><li>跟rbac的UserInfo<br>user = models.OneToOneField(UserInfo,null=True,blank=True)</li><li>给用户分角色</li><li>给角色分权限</li></ul></li><li><p>登录应用权限</p><ul><li><p>登录成功后</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;      auth.login(request, obj)</span><br><span class="line">&gt;      ret = init_permission(request, obj)</span><br><span class="line">&gt;      if ret:</span><br><span class="line">&gt;          return ret</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></blockquote><blockquote><ul><li><p>初始化权限信息init_permission函数中修改</p><p>user -&gt; user.user</p><p>permission_query = user.user.roles.filter</p></li><li><p>应用权限校验中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;      &apos;rbac.middleware.rbac.PermissionMiddleware&apos;,</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>应用左侧菜单和面包屑导航</p><ul><li><p>在layout模板中，引用CSS和JS</p></li><li><p>二级菜单</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;    &#123;% load rbac %&#125;</span><br><span class="line">&gt;    &#123;% menu request %&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><ul><li><p>应用路径导航</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    &#123;% breadcrumb request %&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>权限控制到按钮级别</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;    &#123;% load rbac %&#125;</span><br><span class="line">&gt;    判断 filter  判断里面只能用filter 只能一个一个判断</span><br><span class="line">&gt;    &#123;% load rbac %&#125;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;    &#123;% if request|has_permission:&apos;add_customer&apos; %&#125;</span><br><span class="line">&gt;    &lt;a href=&quot;&#123;% url &apos;add_customer&apos; %&#125;?&#123;&#123; query_params &#125;&#125;&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;添加&lt;/a&gt;</span><br><span class="line">&gt;    &#123;% endif %&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><ul><li><p>使用注意事项</p><ul><li>用户注册后  对应在rbac中的UserInfo创建用户 和 原系统的用户做一对一关联</li><li>菜单   父权限  子权限  的层级关系</li></ul></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;权限管理的三级菜单的流程&quot;&gt;&lt;a href=&quot;#权限管理的三级菜单的流程&quot; class=&quot;headerlink&quot; title=&quot;权限管理的三级菜单的流程&quot;&gt;&lt;/a&gt;权限管理的三级菜单的流程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;权限控制&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="RBAC" scheme="http://yoursite.com/categories/RBAC/"/>
    
    
  </entry>
  
  <entry>
    <title>Django之中间件</title>
    <link href="http://yoursite.com/2018/07/15/Django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/07/15/Django之中间件/</id>
    <published>2018-07-15T07:38:48.000Z</published>
    <updated>2018-11-15T09:46:31.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><blockquote><h3 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h3><ul><li><p>中间件顾名思义，是介于request与response处理之间的一道处理过程，相对比较轻量级，并且在全局</p><p>上改变django的输入与输出。因为改变的是全局，所以需要谨慎实用，用不好会影响到性能。</p></li><li><p>Django的中间件的定义：</p><blockquote><p>Middleware <code>is` `a framework of hooks into Django’s request</code>/<code>response processing.</code></p><p><code>&lt;br&gt;It’s a light, low</code>-<code>level “plugin” system</code>forglobally altering Django’s <code>input</code> <code>or</code></p><p><code>output</code>.</p></blockquote><p>应用：</p><ul><li><p>如果想修改请求，例如被传送到view中的<strong>HttpRequest</strong>对象。 或者想修改view返回的HttpResponse对象，这些都可以通过中间件来实现。</p></li><li><p>可能还想在view执行之前做一些操作，这种情况就可以用 middleware来实现。</p></li><li><p>我们可能频繁在view使用<code>request.user</code>吧。 Django想在每个view执行之前把user设置request</p><p>的属性，于是就用了一个中间件来实现这个目标。所以Django提供了可以修改request 对象的中间</p><p>件 <code>AuthenticationMiddleware</code>。</p><p>Django默认的Middleware：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;    MIDDLEWARE = [</span><br><span class="line">&gt;        <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">&gt;    ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><p>   每一个中间件都有具体的功能</p></blockquote><blockquote><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><ul><li><p>中间件一共有四种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="comment"># process_request</span></span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="comment"># process_view</span></span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="comment">#　process_exception</span></span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="comment">#　process_response</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><h6 id="process-request-process-response"><a href="#process-request-process-response" class="headerlink" title="process_request,process_response"></a>process_request,process_response</h6><blockquote><ul><li><p>当用户发起请求的时候会依次经过所有的的中间件，这个时候的请求时process_request,最后到达views的函数中，views函数处理后，在依次穿过中间件，这个时候是process_response,最后返回给请求者。</p></li><li><p>我们也可以自己定义一个中间件，我们可以自己写一个类，但是必须继承MiddlewareMixin</p><p>需要导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  <span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></blockquote><blockquote><blockquote><p> <img src="/Users/busensei/Desktop/MiddlewareMixin.png" alt=""></p><blockquote><p><strong>in views:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  &gt;<span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;</span><br><span class="line">&gt;  &gt;  &gt;    print(<span class="string">"view函数..."</span>)</span><br><span class="line">&gt;  &gt;  &gt;    <span class="keyword">return</span> HttpResponse(<span class="string">"OK"</span>)</span><br><span class="line">&gt;  &gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p><strong>in Mymiddlewares.py：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  &gt;<span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line">&gt;  &gt;  &gt;<span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line">&gt;  &gt;  &gt;</span><br><span class="line">&gt;  &gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;</span><br><span class="line">&gt;  &gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;        print(<span class="string">"Md1请求"</span>)</span><br><span class="line">&gt;  &gt;  &gt; </span><br><span class="line">&gt;  &gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;        print(<span class="string">"Md1返回"</span>)</span><br><span class="line">&gt;  &gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;  &gt;</span><br><span class="line">&gt;  &gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;</span><br><span class="line">&gt;  &gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;        print(<span class="string">"Md2请求"</span>)</span><br><span class="line">&gt;  &gt;  &gt;        <span class="comment">#return HttpResponse("Md2中断")</span></span><br><span class="line">&gt;  &gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;        print(<span class="string">"Md2返回"</span>)</span><br><span class="line">&gt;  &gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p><strong>结果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;  &gt;view函数...</span><br><span class="line">&gt;  &gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p><strong>注意：</strong>如果当请求到达请求2的时候直接不符合条件返回，即return HttpResponse(“Md2中断”)，程序将把请求直接发给中间件2返回，然后依次返回到请求者，结果如下：</p><p>返回Md2中断的页面，后台打印如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>流程图如下：</p><p><img src="/Users/busensei/Desktop/process_request，process_response.png" alt=""></p></blockquote></blockquote><h5 id="process-view"><a href="#process-view" class="headerlink" title="process_view"></a>process_view</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;process_view(self, request, callback, callback_args, callback_kwargs)</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p><strong>Mymiddlewares.py</strong>修改如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;<span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line">&gt;  &gt;<span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1请求"</span>)</span><br><span class="line">&gt;  &gt;        <span class="comment">#return HttpResponse("Md1中断")</span></span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1返回"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1view"</span>)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md2请求"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> HttpResponse(<span class="string">"Md2中断"</span>)</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md2返回"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md2view"</span>)</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;Md1view</span><br><span class="line">&gt;  &gt;Md2view</span><br><span class="line">&gt;  &gt;view函数...</span><br><span class="line">&gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>下图进行分析上面的过程：</p><p><img src="/Users/busensei/Desktop/process_view.png" alt="img"></p><p>当最后一个中间的process_request到达路由关系映射之后，返回到中间件1的process_view，然后</p><p>依次往下，到达views函数，最后通过process_response依次返回到达用户。</p><p>process_view可以用来调用视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1请求"</span>)</span><br><span class="line">&gt;  &gt;        <span class="comment">#return HttpResponse("Md1中断")</span></span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1返回"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;        <span class="comment"># return HttpResponse("hello")</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;        response=callback(request,*callback_args,**callback_kwargs)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;view函数...</span><br><span class="line">&gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>注意：process_view如果有返回值，会越过其他的process_view以及视图函数，但是所有的</p><p>process_response都还会执行。</p></blockquote><h5 id="process-exception"><a href="#process-exception" class="headerlink" title="process_exception"></a>process_exception</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;process_exception(self, request, exception)</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>示例修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1请求"</span>)</span><br><span class="line">&gt;  &gt;        <span class="comment">#return HttpResponse("Md1中断")</span></span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1返回"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;        <span class="comment"># return HttpResponse("hello")</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;        <span class="comment"># response=callback(request,*callback_args,**callback_kwargs)</span></span><br><span class="line">&gt;  &gt;        <span class="comment"># return response</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"md1 process_view..."</span>)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"md1 process_exception..."</span>)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md2请求"</span>)</span><br><span class="line">&gt;  &gt;        <span class="comment"># return HttpResponse("Md2中断")</span></span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md2返回"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"md2 process_view..."</span>)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"md1 process_exception..."</span>)</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;md1 process_view...</span><br><span class="line">&gt;  &gt;md2 process_view...</span><br><span class="line">&gt;  &gt;view函数...</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>流程图如下：</p><p>当views出现错误时：</p><p><img src="/Users/busensei/Desktop/process_exception.png" alt="img"></p><p>将md2的process_exception修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self,request,exception)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;        print(<span class="string">"md2 process_exception..."</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> HttpResponse(<span class="string">"error"</span>)</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;md1 process_view...</span><br><span class="line">&gt;  &gt;md2 process_view...</span><br><span class="line">&gt;  &gt;view函数...</span><br><span class="line">&gt;  &gt;md2 process_exception...</span><br><span class="line">&gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;中间件&quot;&gt;&lt;a href=&quot;#中间件&quot; class=&quot;headerlink&quot; title=&quot;中间件&quot;&gt;&lt;/a&gt;中间件&lt;/h1&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;中间件的概念&quot;&gt;&lt;a href=&quot;#中间件的概念&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>redis之使用</title>
    <link href="http://yoursite.com/2018/02/27/redis%E4%B9%8B%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/02/27/redis之使用/</id>
    <published>2018-02-27T03:47:09.000Z</published>
    <updated>2018-11-22T10:23:02.533Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>redis之进阶</title>
    <link href="http://yoursite.com/2018/02/25/redis%E4%B9%8B%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2018/02/25/redis之进阶/</id>
    <published>2018-02-25T02:47:36.000Z</published>
    <updated>2018-11-22T12:14:15.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a>redis介绍</h1><h2 id="redis的功能特性"><a href="#redis的功能特性" class="headerlink" title="redis的功能特性"></a>redis的功能特性</h2><pre><code>1，高速读写2，数据类型丰富3，支持持久化4，多种内存分配及回收策略5，支持事务6，消息队列、redis用的多的还是发布-订阅模式7，支持高可用8，支持分布式分片集群</code></pre><p>linux操作系统是怎么分配内存的？</p><pre><code>把内存分为三大块    PSS    page cache    anno page：程序之间进行交互的时候。。。。#匿名页linux操作系统以page进行分配内存，page大小默认4kbslab allocator 内存页的划分</code></pre><p>怎么保证使用连续的内存</p><pre><code>slab allocator</code></pre><h2 id="redis的优势"><a href="#redis的优势" class="headerlink" title="redis的优势"></a>redis的优势</h2><pre><code>1、redis在单用户(单线程)多并发读写的性能高2、在多用户(多线程)少读写时memache更优3、redis是一个单核的管理机制，生产中一般是，单机多实例的框架</code></pre><h1 id="redis的使用"><a href="#redis的使用" class="headerlink" title="redis的使用"></a>redis的使用</h1><pre><code>下载安装解压 tar -zxvf redis-3.2.6.tar.gz cd redis-2.6.0make #编译安装yum install gcc*cd /application/redis-3.2.6/src./redis-server &amp; #启动redis服务端 ,&amp;后台运行，不然一直占用端口ps -ef |grep redis #查看是否启动./redis-cli  #连接服务器</code></pre><h1 id="使用redis"><a href="#使用redis" class="headerlink" title="使用redis"></a>使用redis</h1><p>　<br>    set foo bar<br>    get foo </p><pre><code>基本的配置文件vim /etc/redis.conf  #去编辑redis.conf文件#添加配置daemonize  yesport 6379dbfilename dump.rdbdir &quot;/application/data/6379&quot; logfile /var/log/redis.log######mkdir -p /application/data/6379ps -ef |grep redis./redis-server /etc/redis.conf /application/redis-3.2.6/src/redis-server /etc/redis.conf#为了不用每次都切进去，在环境变量里面设置一下cd /root vim .bash_profile PATh 添加 :/application/redis-3.2.6/src:wq保存配置生效source .bash_profileredis-cli 配置完成之后，可以直接在命令行调用redis命令例如：redis-cli shutdown或者redis-server /etc/redis.conf#安全控制（也在配置文件里面设置）bind 10.0.0.200   #绑定ip10字段requirepass root  #没有用户只有密码，密码为rootredis-cli shutdownredis-server /etc/redis.conf设置完成之后需要换种方式打开：redis-cli -h 10.0.0.200 -a root #改完配置文件每次都需要重启，不用每次都重启，在线变更配置：获取当前配置CONFIG GET *变更运行配置CONFIG  SET loglevel &apos;notice&apos;修改密码CONFIG SET requirepass  &quot;123&quot;CONFIG GET requirepass在线修改的配置，下次登录生效，但是重启之后配置会丢失#Python链接redis import redis ....</code></pre><h1 id="redis的数据持久化"><a href="#redis的数据持久化" class="headerlink" title="redis的数据持久化"></a>redis的数据持久化</h1><pre><code>RDB持久化：快照，只记录一个时刻内存数据状态（快照记录某一时刻的数据）AOF持久化：只追加日志文件的方式，记录了redis里面所有的修改命令RDB记录某一时刻的，还可以用做备份AOF比较安全，但是比较啰嗦，每次都把所有的搜保存下来了#如果配置持久化功能方式一：RDB 持久化配置：还是修改配置文件dbfilename dump.rbd dir &apos;/application/data/6379&apos;save 900 1  900秒内有一个更改save 300 10  300秒内有10个更改save 60 10000  60秒内有10000个更改#也可以设置配置做持久化方式二：set foo bar save 或者 bgsave  #手工触发持久化#配置扩展    stop-writes-on-bgsave-error yes    rdbcompression yes    rdbchecksum yes#AOF 配置appendonly yes applendfsync every</code></pre><h1 id="redis数据类型"><a href="#redis数据类型" class="headerlink" title="redis数据类型"></a>redis数据类型</h1><pre><code>计数器incr fensi ##你点击一下增加一下，刷点击量   incrby fensi 10000   DECR fensi #递减   DECRBY fensi 20  set foo bar set foo ex 10hset stu(表) id(列) 100hmset stu id 100 name  zhangsna lpush pengyouquan &apos;today is nice day&apos;lpush pengyouquan &apos;today is bad day&apos;lpush pengyouquan &apos;today is a day&apos;lpop pengyouquan  #删除最后一条lrange pengyouquan 0 -1 #查看所有有序集合：像是排行榜</code></pre><h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><pre><code>发布订阅模式（中间桥梁：频道）:朋友圈是很好的证明。先关注你就能看到开两个端口 PUBLISH weibo hello 先订阅某个频道SUBSCRIBE weibo  订阅weibo一个频道,subscribe PSUBSCRIBE * 一次性订阅多个频道（广告类）PSUBSCRIBE it.* 一次性订阅多个和it相关的频道退出就取消订阅了</code></pre><h1 id="redis的事物管理"><a href="#redis的事物管理" class="headerlink" title="redis的事物管理"></a>redis的事物管理</h1><pre><code>redis使用multi开启事物    discard  撤销    exec 退出    redis 中的锁机制        mysql的悲观锁：我在做操作的时候，你别和我抢，        redis的乐观锁：查看一下，</code></pre><h1 id="redis的一些管理命令"><a href="#redis的一些管理命令" class="headerlink" title="redis的一些管理命令"></a>redis的一些管理命令</h1><pre><code>InfoClinet list 客户端连接的状况以及对系统的使用情况Client kill ip:portconfig get *CONFIG RESETSTAT 重置统计CONFIG GET/SET 动态修改DbsizeFLUSHALL 清空所有数据select 1FLUSHDB 清空当前库MONITOR 监控实时指令</code></pre><h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">假如说你访问redis呢，访问不了呢，数据查看不了了，怎么办？    </span><br><span class="line">        我们要做到一个恢复的功能，所以就有了主从复制的功能</span><br><span class="line">        假如说一个机器废了，还有另一个机器能提供数据</span><br><span class="line">        至少要有两台服务器</span><br><span class="line">    主从复制的两种功能</span><br><span class="line">        <span class="number">1</span>、可以实现故障的转移 failover </span><br><span class="line">        <span class="number">2</span>、可以分担多节点的压力 blance</span><br><span class="line">    底层原理依赖于</span><br><span class="line">        同步传输rbd存储的机制</span><br><span class="line">    怎么搭建主从？</span><br><span class="line">        准备<span class="number">2</span>台或以上的redis实例</span><br><span class="line">            <span class="number">1</span>、多配置文件（端口、数据路径、日志路径、pid）</span><br><span class="line">               端口、：<span class="number">6380</span>(主),<span class="number">6381</span>(从)</span><br><span class="line">               数据路径：</span><br><span class="line">                    /application/data/<span class="number">6380</span></span><br><span class="line">                    /application/data/<span class="number">6381</span></span><br><span class="line">               日志路径</span><br><span class="line">                    /var/log/redis6380.log</span><br><span class="line">                    /var/log/redis6381.log</span><br><span class="line">               pid :记录一个程序进程号的id    </span><br><span class="line">                    /application/data/<span class="number">6380</span>/redis.pid</span><br><span class="line">                    /application/data/<span class="number">6381</span>/redis.pid</span><br><span class="line">            <span class="number">2</span>、主从复制的配置过程</span><br><span class="line">                <span class="number">1</span>、创建目录</span><br><span class="line">                    mkdir -p /application/data/<span class="number">6380</span></span><br><span class="line">                    mkdir -p /application/data/<span class="number">6381</span></span><br><span class="line">                <span class="number">2</span>、配置文件准备</span><br><span class="line">                    vim  /application/data/<span class="number">6380</span>/redis.conf</span><br><span class="line">                    port <span class="number">6380</span></span><br><span class="line">                    daemonize yes</span><br><span class="line">                    pidfile /application/data/<span class="number">6380</span>/redis.pid</span><br><span class="line">                    logfile <span class="string">"/var/log/redis6380.log"</span></span><br><span class="line">                    dbfilename dump.rdb</span><br><span class="line">                    dir /application/data/<span class="number">6380</span></span><br><span class="line"></span><br><span class="line">                    vim /application/data/<span class="number">6381</span>/redis.conf</span><br><span class="line">                    port <span class="number">6381</span></span><br><span class="line">                    daemonize yes</span><br><span class="line">                    pidfile /application/data/<span class="number">6381</span>/redis.pid</span><br><span class="line">                    logfile <span class="string">"/var/log/redis6381.log"</span></span><br><span class="line">                    dbfilename dump.rdb</span><br><span class="line">                    dir /application/data/<span class="number">6381</span></span><br><span class="line">            <span class="number">3</span>、启动两个实例</span><br><span class="line">                redis-server /application/data/<span class="number">6380</span>/redis.conf</span><br><span class="line">                redis-server /application/data/<span class="number">6381</span>/redis.conf</span><br><span class="line"></span><br><span class="line">            <span class="number">4</span>、构建主从</span><br><span class="line">                redis-cli -p <span class="number">6381</span></span><br><span class="line">                slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6380</span></span><br><span class="line">            <span class="number">5</span>、验证主从</span><br><span class="line">                登录主库：</span><br><span class="line">                redis-cli -p <span class="number">6380</span></span><br><span class="line"></span><br><span class="line">                set foo bar</span><br><span class="line">                登录主库：</span><br><span class="line">                redis-cli -p <span class="number">6381</span></span><br><span class="line">                get</span><br><span class="line"></span><br><span class="line">            <span class="number">6</span>、主从复制状态查看。</span><br><span class="line">                role</span><br><span class="line">                info replication</span><br><span class="line"></span><br><span class="line">            <span class="number">7</span>、主从复制，手工切换</span><br><span class="line">                slaveof no one</span><br><span class="line">        </span><br><span class="line">传统主从的缺陷</span><br><span class="line"><span class="number">1</span>、没有自动监控机制</span><br><span class="line"><span class="number">2</span>、没有自动切换的功能</span><br><span class="line"><span class="number">3</span>、对于应用不透明</span><br><span class="line"></span><br><span class="line">sentinel 功能</span><br><span class="line"><span class="number">1</span>、自动监控redis所有节点状态</span><br><span class="line"><span class="number">2</span>、发现主库故障，自动选主切换</span><br><span class="line"><span class="number">3</span>、自动通知应用端</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">准备，<span class="number">1</span>主<span class="number">2</span>从结构比较合适。</span><br><span class="line">添加<span class="number">6382</span>节点：</span><br><span class="line">mkdir -p /application/data/<span class="number">6382</span></span><br><span class="line"></span><br><span class="line">vim  /application/data/<span class="number">6382</span>/redis.conf</span><br><span class="line"></span><br><span class="line">port <span class="number">6382</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /application/data/<span class="number">6382</span>/redis.pid</span><br><span class="line">logfile <span class="string">"/var/log/redis6382.log"</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /application/data/<span class="number">6382</span></span><br><span class="line"></span><br><span class="line">redis-server /application/data/<span class="number">6382</span>/redis.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis-cli -p <span class="number">6382</span></span><br><span class="line"></span><br><span class="line">slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6380</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sentinel配置</span><br><span class="line"></span><br><span class="line">mkdir -p /application/data/<span class="number">26380</span></span><br><span class="line"></span><br><span class="line">vim /application/data/<span class="number">26380</span>/sentinel.conf</span><br><span class="line">port <span class="number">26380</span></span><br><span class="line">dir <span class="string">"/application/data/26380"</span></span><br><span class="line">sentinel monitor mymaster <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6380</span> <span class="number">1</span></span><br><span class="line">sentinel down-after-milliseconds mymaster <span class="number">60000</span></span><br><span class="line">sentinel config-epoch mymaster <span class="number">0</span></span><br><span class="line">启动</span><br><span class="line">redis-sentinel /application/data/<span class="number">26380</span>/sentinel.conf</span><br></pre></td></tr></table></figure><h1 id="Python-sentinel"><a href="#Python-sentinel" class="headerlink" title="Python sentinel"></a>Python sentinel</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> redis.sentinel <span class="keyword">import</span> Sentinel  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sentinel = Sentinel([(<span class="string">'127.0.0.1'</span>, <span class="number">26380</span>)], socket_timeout=<span class="number">0.1</span>)  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sentinel.discover_master(<span class="string">'mymaster'</span>)  </span><br><span class="line">(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>)  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sentinel.discover_slaves(<span class="string">'mymaster'</span>)  </span><br><span class="line">[(<span class="string">'127.0.0.1'</span>, <span class="number">6380</span>)]  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>master = sentinel.master_for(<span class="string">'mymaster'</span>, socket_timeout=<span class="number">0.1</span>)  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>slave = sentinel.slave_for(<span class="string">'mymaster'</span>, socket_timeout=<span class="number">0.1</span>)  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>master.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>)  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>slave.get(<span class="string">'foo'</span>)  </span><br><span class="line"><span class="string">'bar'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redis介绍&quot;&gt;&lt;a href=&quot;#redis介绍&quot; class=&quot;headerlink&quot; title=&quot;redis介绍&quot;&gt;&lt;/a&gt;redis介绍&lt;/h1&gt;&lt;h2 id=&quot;redis的功能特性&quot;&gt;&lt;a href=&quot;#redis的功能特性&quot; class=&quot;head
      
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>redis之五大数据类型</title>
    <link href="http://yoursite.com/2018/02/23/redis%E4%B9%8B%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/02/23/redis之五大数据类型/</id>
    <published>2018-02-23T10:47:23.000Z</published>
    <updated>2018-11-22T12:30:59.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis的两种链接方式"><a href="#redis的两种链接方式" class="headerlink" title="redis的两种链接方式"></a>redis的两种链接方式</h1><h2 id="简单链接"><a href="#简单链接" class="headerlink" title="简单链接"></a>简单链接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">conn = redis.Redis(host=<span class="string">'10.0.0.200'</span>,port=<span class="number">6379</span>)</span><br><span class="line">conn.set(<span class="string">'k1'</span>,<span class="string">'value'</span>)</span><br><span class="line">print(conn.get(<span class="string">'k1'</span>))</span><br></pre></td></tr></table></figure><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>如果要链接redis的时候推荐用连接池的方式；如果每次操作都用同一个链接，可以使用连接池</p><p>redis使用connection_poll来管理对一个redis服务的所有链接，避免每次建立，释放链接的开销<br>默认每个redis实例都会维护一个自己的链接池。可以直接建立一个连接池，然后作为参数redis，这样<br>就可以实现多个redis实例共享一个连接池</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接池</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'10.0.0.200'</span>,port=<span class="number">6379</span>)</span><br><span class="line">conn = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line">conn.set(<span class="string">'a'</span>,<span class="string">'python'</span>)</span><br><span class="line">print(conn.get(<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="pool-py"><a href="#pool-py" class="headerlink" title="pool.py"></a>pool.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">POOL = redis.ConnectionPool(host=<span class="string">'10.0.0.200'</span>,port=<span class="number">6379</span>)</span><br></pre></td></tr></table></figure><h3 id="view-py"><a href="#view-py" class="headerlink" title="view.py"></a>view.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> app01.pool <span class="keyword">import</span> POOL</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    pool = redis.Redis(connection_pool=POOL)  <span class="comment">#连接redis</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    pool = redis.Redis(connection_pool=POOL)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><h3 id="Django-redis组件"><a href="#Django-redis组件" class="headerlink" title="Django-redis组件"></a>Django-redis组件</h3><p>安装： pip install django-redis</p><p>配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://10.0.0.200:6379"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">            <span class="comment">#"PASSWORD": "123456",</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用django-redis组件进行连接</span></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> caches</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> django_redis</span><br><span class="line">os.environ[<span class="string">'DJANGO_SETTINGS_MODULE'</span>] = <span class="string">'redis_use.settings'</span></span><br><span class="line"></span><br><span class="line">conn = django_redis.get_redis_connection()</span><br><span class="line">conn.set(<span class="string">'b'</span>,<span class="string">'666'</span>)</span><br></pre></td></tr></table></figure><h1 id="redis的字符串操作-string"><a href="#redis的字符串操作-string" class="headerlink" title="redis的字符串操作(string)"></a>redis的字符串操作(string)</h1><p>Sting操作，redis中的String在内存中按照一个name对应一个value来存储</p><img src="/2018/02/23/redis之五大数据类型/1.png"><p>1、set(name, value, ex=None, px=None, nx=False, xx=False) # 设置值<br>    在Redis中设置值，默认，不存在则创建，存在则修改<br>    参数：<br>        ex，过期时间（秒）<br>        px，过期时间（毫秒）<br>        nx，如果设置为True，则只有name不存在时，当前set操作才执行<br>        xx，如果设置为True，则只有name存在时，岗前set操作才执行<br>2、setnx(name, value)</p><pre><code>设置值，只有name不存在时，执行设置操作（添加）  #相当于只是添加，不能进行修改操作</code></pre><p>3、setex(name, value, time)</p><pre><code># 设置值# 参数：    # time，过期时间（数字秒 或 timedelta对象）</code></pre><p>4、psetex(name, time_ms, value)</p><pre><code># 设置值# 参数：    # time_ms，过期时间（数字毫秒 或 timedelta对象）</code></pre><p>5、mset(*args, **kwargs)</p><pre><code>批量设置值如：    mset(k1=&apos;v1&apos;, k2=&apos;v2&apos;)    或    mset({&apos;k1&apos;: &apos;v1&apos;, &apos;k2&apos;: &apos;v2&apos;})</code></pre><p>6、get(name)  获取值</p><p>7、mget(keys, *args)</p><pre><code>批量获取如：    mget(&apos;ylr&apos;, &apos;zzz&apos;)    或    r.mget([&apos;ylr&apos;, &apos;zzz&apos;])</code></pre><p>8、getset(name, value) 设置新值并获取原来的值</p><p>9、getrange(key, start, end)</p><pre><code># 获取子序列（根据字节获取，非字符）# 参数：    # name，Redis 的 name    # start，起始位置（字节）    # end，结束位置（字节）# 如： &quot;拉销量&quot; ，0-3表示 &quot;拉&quot;</code></pre><p>待续。。</p><h1 id="redis的列表操作-list"><a href="#redis的列表操作-list" class="headerlink" title="redis的列表操作(list)"></a>redis的列表操作(list)</h1><h1 id="redis的散列表操作-类似于字典里面嵌套字典"><a href="#redis的散列表操作-类似于字典里面嵌套字典" class="headerlink" title="redis的散列表操作(类似于字典里面嵌套字典)"></a>redis的散列表操作(类似于字典里面嵌套字典)</h1><p>Hash操作，也叫做散列表操作。redis中Hash在内存中的存储格式如下</p><img src="/2018/02/23/redis之五大数据类型/2.png"><p>1、hset(name, key, value)</p><pre><code># name对应的hash中设置一个键值对（不存在，则创建；否则，修改）# 参数：    # name，redis的name    # key，name对应的hash中的key    # value，name对应的hash中的value# 注：    # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</code></pre><p>2、hmset(name, mapping)</p><pre><code># 在name对应的hash中批量设置键值对# 参数：    # name，redis的name    # mapping，字典，如：{&apos;k1&apos;:&apos;v1&apos;, &apos;k2&apos;: &apos;v2&apos;}# 如：    # r.hmset(&apos;xx&apos;, {&apos;k1&apos;:&apos;v1&apos;, &apos;k2&apos;: &apos;v2&apos;})</code></pre><p>3、hget(name,key)</p><pre><code># 在name对应的hash中获取根据key获取value</code></pre><p>4、hmget(name, keys, *args)</p><pre><code># 在name对应的hash中获取多个key的值# 参数：    # name，reids对应的name    # keys，要获取key集合，如：[&apos;k1&apos;, &apos;k2&apos;, &apos;k3&apos;]    # *args，要获取的key，如：k1,k2,k3# 如：    # r.mget(&apos;xx&apos;, [&apos;k1&apos;, &apos;k2&apos;])    # 或    # print r.hmget(&apos;xx&apos;, &apos;k1&apos;, &apos;k2&apos;)</code></pre><p>5、hgetall(name)  获取name对应的hash中的所有键值</p><p>6、hlen(name)  获取name对应的hash中键值对的个数</p><p>7、hkeys(name) 获取name对应的hash中所有的key的值</p><p>8、hvals(name) 获取name对应的hash中所有的value的值</p><p>9、hexists(name, key) 检查name对应的hash是否存在当前传入的key</p><p>10、hdel(name,*keys)  将name对应的hash中指定key的键值对删除</p><p>11、hincrby(name, key, amount=1)   吧原来的值自加1</p><pre><code>hincrby (&apos;xxx&apos;,&apos;slex&apos;,amount=-1) #吧原来的值自减1# 自增name对应的hash中的指定key的值，不存在则创建key=amount# 参数：    # name，redis中的name    # key， hash对应的key    # amount，自增数（整数）</code></pre><p>12、hincrbyfloat(name, key, amount=1.0) 支持浮点型的</p><p>13、hscan(name, cursor=0, match=None, count=None)</p><pre><code># 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆# 参数：    # name，redis的name    # cursor，游标（基于游标分批取获取数据）    # match，匹配指定key，默认None 表示所有的key    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数# 如：    # 第一次：cursor1, data1 = r.hscan(&apos;xx&apos;, cursor=0, match=None, count=None)    # 第二次：cursor2, data1 = r.hscan(&apos;xx&apos;, cursor=cursor1, match=None, count=None)    # ...    # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</code></pre><p>14、hscan_iter(name, match=None, count=None)</p><pre><code># 利用yield封装hscan创建生成器，实现分批去redis中获取数据# 参数：    # match，匹配指定key，默认None 表示所有的key    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数# 如：    # for item in r.hscan_iter(&apos;xx&apos;):    #     print item　　# for item in r.hscan_iter(&apos;xx&apos;,match=&apos;*lx&apos;):  #匹配以lx结尾的    #     print item</code></pre><h1 id="redis的集合操作-set"><a href="#redis的集合操作-set" class="headerlink" title="redis的集合操作(set)"></a>redis的集合操作(set)</h1><h1 id="redis的有序集合操作-zset"><a href="#redis的有序集合操作-zset" class="headerlink" title="redis的有序集合操作(zset)"></a>redis的有序集合操作(zset)</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redis的两种链接方式&quot;&gt;&lt;a href=&quot;#redis的两种链接方式&quot; class=&quot;headerlink&quot; title=&quot;redis的两种链接方式&quot;&gt;&lt;/a&gt;redis的两种链接方式&lt;/h1&gt;&lt;h2 id=&quot;简单链接&quot;&gt;&lt;a href=&quot;#简单链接&quot; cla
      
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>redis之安装</title>
    <link href="http://yoursite.com/2018/02/22/redis%E4%B9%8B%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/02/22/redis之安装/</id>
    <published>2018-02-22T09:45:52.000Z</published>
    <updated>2018-11-22T10:20:54.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a>redis介绍</h1><p>redis是一个key-value存储系统，菲关系型数据库。和Memcached类似，<br>他支持存储的value类型相对更多，包括字符串、列表、哈希散列表、集合、有序集合。</p><pre><code>这些数据都支持push/pop、add/remove及取交集并集和差集及丰富的操作而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都在缓存的内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现master-slave(主从)同步</code></pre><p>本质：将数据保存在内存中</p><p>用提：redis可以做缓存；redis可以做消息队列</p><p>特性：</p><pre><code>1，可以做持久化：在配置文件设置，如果你要保存到文件，可以添加设置，就算电脑不小心关键了，数据还是存在的。这个要不要保存都要自己来定。2.支持存放数据的格式多（5中）</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">'k1'</span>:<span class="string">'hiayan'</span>,  <span class="comment">#第一种字符串格式</span></span><br><span class="line">    <span class="string">'k2'</span>:[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>], <span class="comment">#第二种列表格式</span></span><br><span class="line">    <span class="string">'k3'</span>:&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>&#125;, <span class="comment">#第三种集合格式</span></span><br><span class="line">    <span class="string">'k4'</span>:&#123;                 <span class="comment">#第四种,字典，也可以叫做哈希散列表,</span></span><br><span class="line">            <span class="string">'n1'</span>:<span class="string">'xxx'</span>,</span><br><span class="line">            <span class="string">'n2'</span>:<span class="string">'fff'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="string">'k5'</span>:&#123;(<span class="number">11</span>,<span class="number">1</span>),(<span class="string">'xxx'</span>:<span class="number">5</span>)&#125; <span class="comment">#有序集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><p>1、为什么使用redis？使用redis有哪些好处？</p><pre><code>1，速度快，因为数据在内存中，类似HashMap的优势就是查找和操作的时间复杂度都是o(1)2，支持丰富的数据类型，支持string，list，set，sorted set，hash3，支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行4，丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除。</code></pre><p>2、redis的速度memcached有哪些优势？</p><pre><code>1、memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型。2、redis的速度比memcached快很多3、redis可以持久化其数据</code></pre><h1 id="redis的安装"><a href="#redis的安装" class="headerlink" title="redis的安装"></a>redis的安装</h1><h2 id="方式一：硬盘免安装"><a href="#方式一：硬盘免安装" class="headerlink" title="方式一：硬盘免安装"></a>方式一：硬盘免安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis<span class="number">-3.0</span><span class="number">.6</span>.tar.gz  <span class="comment">#下载</span></span><br><span class="line">tar xzf redis<span class="number">-3.0</span><span class="number">.6</span>.tar.gz  <span class="comment">#解压</span></span><br><span class="line">cd redis<span class="number">-3.0</span><span class="number">.6</span>  <span class="comment">#切换到redis</span></span><br><span class="line">make  <span class="comment">#安装</span></span><br></pre></td></tr></table></figure><pre><code>启动服务端src/redis-server启动客户端src/redis-cliredis&gt; set foo barOKredis&gt; get foo&quot;bar&quot;</code></pre><h2 id="方式二：安装包"><a href="#方式二：安装包" class="headerlink" title="方式二：安装包"></a>方式二：安装包</h2><pre><code>yum install redis /etc/init.d/redis start  #开启 /etc/init.d/redis restart  #重启配置：/etc/redis/redis.conf #默认会读取这个文件去运行</code></pre><h2 id="方式三：rpm安装"><a href="#方式三：rpm安装" class="headerlink" title="方式三：rpm安装"></a>方式三：rpm安装</h2><pre><code>公司说你安装以下redis　　有两种情况：　　　　1、直接给你rpm包　　　　2、或者说你直接yum install redis 　　　　　　- 安装公司自定制　　　　　　- 安装官方ls #查看ctrl+c #停止结束进程（找服务器并杀掉）：ps -e|grep redis #杀掉kill -9 12343 #重新运行远程操作rdis的模块（模块的本质是通过socket进行通信的）mysql的端口：3306redis的端口：6379</code></pre><h1 id="Python操作Redis"><a href="#Python操作Redis" class="headerlink" title="Python操作Redis"></a>Python操作Redis</h1><p>sudo pip install redis<br>or<br>sudo easy_install redis<br>or<br>源码安装<br>详见：<a href="https://github.com/WoLpH/redis-py" target="_blank" rel="noopener">https://github.com/WoLpH/redis-py</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redis介绍&quot;&gt;&lt;a href=&quot;#redis介绍&quot; class=&quot;headerlink&quot; title=&quot;redis介绍&quot;&gt;&lt;/a&gt;redis介绍&lt;/h1&gt;&lt;p&gt;redis是一个key-value存储系统，菲关系型数据库。和Memcached类似，&lt;br&gt;他支
      
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>git下</title>
    <link href="http://yoursite.com/2018/01/14/git%E4%B8%8B/"/>
    <id>http://yoursite.com/2018/01/14/git下/</id>
    <published>2018-01-14T11:08:25.000Z</published>
    <updated>2018-11-19T09:59:28.548Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h1><pre><code>1）master分支非常稳定的，只用来发布新版本，平时不在上面干活2）dev分支不稳定的，主要在上面干活，每个人都有自己的分支，时不时的往dev分支上合并通常，合并分支时，如果可能，Git会用`Fast forward`模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。&gt; git log --graph --pretty=oneline --abbrev-commit</code></pre><h1 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h1><pre><code>你目前在dev分支上工作，工作到一半，但突然有一个紧急的bug需要修复，可以先保存你的工作现场，修复完bug后，在切回来。步骤：当前在dev分支上：    git stash  # 把当前工作现场“储藏”起来切换到要修复bug的分支（假定master）：    git checkout master    git checkout -b issue-101    .... 修复问题    git add filename    git commit filename把修改合并到修复的分支：    git checkout master    git merge --no-ff -m &quot;merge fix 101 modification&quot; issue-101    git branch -D issue-101切换回工作现场：    git checkout dev    git stash list  # 查看之前保存了哪些工作现场    git stash drop    两种恢复方式：    1）git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除        git stash apply stash@{0}        git stash drop stash@{0}    2）git stash pop，恢复的同时把stash内容也删了</code></pre><h1 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h1><pre><code>与bug分支类似两条命令：1）git branch -d dev_name  # 已经合并完的分支可以使用此命令删除2）git branch -d dev_name  # 强制删除分支（未合并的也可以）</code></pre><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><pre><code>多个人在同一分支上工作，如何正确的合并文件？两种情况：**1）你和他人同时修改同一个文件，他人修改完成，提前推送到远程，如何提交你的修改**详细步骤：    1）试图用git push origin &lt;branch-name&gt;推送自己的修改；    2）如果推送失败，则因为远程分支比你的本地更新，需要先用git pull拉取远程最新的版本；    3）如果合并有冲突，则解决冲突，并在本地提交；    4）没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送**2）你和他人操作的不是同一个文件详细步骤：    1）试图用git push origin &lt;branch-name&gt;推送自己的修改；    2）如果推送失败，先用git pull拉取远程最新的版本；    3）git add .  # 添加本地的全部修改到暂存区    4）git commit -m &quot;说明信息&quot;  # 提交更改至本地    5）git push origin &lt;branch-name&gt;推送本地分支至远程提交更改前，都要先git pull拉取远程最新版本  当从远程克隆时，Git自动把本地的master分支与远程的master分支对应起来，远程仓库的默认名称是origin。查看远程库信息：    git remote -v推送分支：    git push origin master  把本地的mater分支推送到远程对应的master分支上    git push origin dev     把本地的dev分支推送到远程对应的dev分支（远程没有dev分支会自动创建一个dev分支）创建远程origin的dev分支到本地    git checkout -b dev origin/dev指定本地dev分支与远程origin/dev分支的链接    git branch --set-upstream-to origin/dev dev    或    git branch --track origin/dev dev</code></pre><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><pre><code>tag是一个容易记住的有意义的名字，它跟某个commit绑定在一起。打标签：    git tag tag_name  # 默认打在最新提交的commit上,当前HEAD的指向    git tag  # 查看标签    git show tag_name  # 查看标签详细信息在指定的commit上打标签：    git log --pretty=oneline  # 查看commit id    git log -a tag_name -m &quot;explain content&quot; commit_id推送标签：    git push origin tag_name    # 推送一个指定的标签    git push origin --tags      # 推送全部尚未推送到远程的本地标签删除标签：    1) 标签尚未推送到远程    git tag -d tag_name    2）标签已推送到远程    git tag -d tag_name    git push origin :refs/tags/tag_name</code></pre><h1 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h1><pre><code>解决查看log分支多，混乱的问题；遗留</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;分支管理策略&quot;&gt;&lt;a href=&quot;#分支管理策略&quot; class=&quot;headerlink&quot; title=&quot;分支管理策略&quot;&gt;&lt;/a&gt;分支管理策略&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1）master分支
非常稳定的，只用来发布新版本，平时不在上面干活
2）dev分
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>conda常用命令</title>
    <link href="http://yoursite.com/2018/01/14/conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/01/14/conda常用命令/</id>
    <published>2018-01-14T08:03:33.000Z</published>
    <updated>2018-11-19T09:58:27.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看-conda-版本号"><a href="#查看-conda-版本号" class="headerlink" title="查看 conda 版本号"></a>查看 conda 版本号</h1><p>conda -V<br>conda –version</p><h1 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h1><ol><li>查看当前有哪些环境<blockquote><p>conda env list 或<br>conda info -e</p><p>实际执行命令示例:<br>➜  ~ conda env list</p><h1 id="conda-environments"><a href="#conda-environments" class="headerlink" title="conda environments:"></a>conda environments:</h1><p>#<br>base                  *  /anaconda3<br>flaskdev                 /anaconda3/envs/flaskdev<br>pythonRoad               /anaconda3/envs/pythonRoad<br>test_py2                 /anaconda3/envs/test_py2</p></blockquote></li></ol><blockquote><p>➜  ~ conda info -e</p><h1 id="conda-environments-1"><a href="#conda-environments-1" class="headerlink" title="conda environments:"></a>conda environments:</h1><p>#<br>base                  *  /anaconda3<br>flaskdev                 /anaconda3/envs/flaskdev<br>pythonRoad               /anaconda3/envs/pythonRoad<br>test_py2                 /anaconda3/envs/test_py2</p></blockquote><ol start="2"><li><p>查看环境管理的命令帮助</p><blockquote><p>conda env -h</p></blockquote></li><li><p>创建环境</p><blockquote><p>conda create –name your_env_name</p></blockquote></li><li><p>创建指定 python 版本的环境</p><blockquote><p>conda create –name your_env_name python=2.7<br>conda create –name your_env_name python=3.6</p></blockquote></li><li><p>创建包含某些包的环境</p><blockquote><p>conda create –name your_env_name numpy scrapy</p></blockquote></li><li><p>创建指定版本下包含某些包的环境</p><blockquote><p>conda create –name your_env_name python=3.6 numpy scrapy</p></blockquote></li><li><p>激活某个环境</p><blockquote><p>source activate target_env_name</p></blockquote></li><li><p>关闭激活的环境</p><blockquote><p>source deactivate target_env_name</p></blockquote></li><li><p>复制某个环境</p><blockquote><p>conda create –name new_env_name –clone old_env_name</p></blockquote></li><li><p>删除某个环境</p><blockquote><p>conda remove –name target_env_name –all</p></blockquote></li></ol><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><ol><li><p>列举当前活跃环境下的所有包</p><blockquote><p>conda list</p></blockquote></li><li><p>列举一个指定环境下的所有包</p><blockquote><p>conda list -n your_env_name</p></blockquote></li><li><p>为激活环境安装某个包</p><blockquote><p>conda install package_name</p></blockquote></li><li><p>为指定环境安装某个包</p><blockquote><p>conda install –name target_env_name package_name</p></blockquote></li><li><p>更新当前环境某个包</p><blockquote><p>conda update package_name</p></blockquote></li><li><p>更新指定环境某个包</p><blockquote><p>conda update -n target_env_name package_name</p></blockquote></li><li><p>删除当前环境某个包</p><blockquote><p>conda remove package_name<br>注意: 如果是通过pip安装的包,移除时也请使用 pip uninstall package_name 命令移除,如果使用 conda remove 可能会发生异常,导致conda不可用</p></blockquote></li><li><p>删除指定环境某个包</p><blockquote><p>conda remove -n target_env_name package_name</p></blockquote></li><li><p>搜索某个包信息</p><blockquote><p>conda search package_name</p></blockquote></li><li><p>更新anaconda</p><blockquote><p>conda update anaconda</p></blockquote></li><li><p>更新python至最新版本</p><blockquote><p>conda update python</p></blockquote></li><li><p>更新所有包</p><blockquote><p>conda update –all</p></blockquote></li></ol><h1 id="分享环境"><a href="#分享环境" class="headerlink" title="分享环境"></a>分享环境</h1><p>把自己的环境分享给别人,方便他人快速建立与你一模一样的环境(同一个版本的python及各种包). 一个分享环境快速的方法就是给他人一个你要分享环境的.yml文件<br>步骤:<br>1) 生成欲分享环境的yml文件</p><blockquote><p>conda env export &gt; environment.yml</p></blockquote><p>2) 他人在自己本地使用yml文件创建文件</p><blockquote><p>conda env create -f environment.yml</p></blockquote><hr><p>参考博客: <a href="https://blog.csdn.net/menc15/article/details/71477949/" target="_blank" rel="noopener">https://blog.csdn.net/menc15/article/details/71477949/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查看-conda-版本号&quot;&gt;&lt;a href=&quot;#查看-conda-版本号&quot; class=&quot;headerlink&quot; title=&quot;查看 conda 版本号&quot;&gt;&lt;/a&gt;查看 conda 版本号&lt;/h1&gt;&lt;p&gt;conda -V&lt;br&gt;conda –version&lt;/p&gt;
      
    
    </summary>
    
      <category term="conda" scheme="http://yoursite.com/categories/conda/"/>
    
    
  </entry>
  
  <entry>
    <title>git上</title>
    <link href="http://yoursite.com/2018/01/03/git%E4%B8%8A/"/>
    <id>http://yoursite.com/2018/01/03/git上/</id>
    <published>2018-01-03T06:52:40.000Z</published>
    <updated>2018-11-19T09:59:09.367Z</updated>
    
    <content type="html"><![CDATA[<p>目录：<br>    建立本地版本库<br>    本地版本库与远程关联<br>    修改文件并提交<br>    创建分支,修改文件合并至master</p><h1 id="git的由来"><a href="#git的由来" class="headerlink" title="git的由来"></a>git的由来</h1><pre><code>linux系统是很多开发者贡献代码不断完善的,linux的创始人linus起初管理贡献者的代码,是通过手工的方式,但随着代码的增多,很难通过手工方式去管理,于是找了一个商业的版本控制系统BitKeeper管理代码.开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！</code></pre><h1 id="集中式与分布式区别"><a href="#集中式与分布式区别" class="headerlink" title="集中式与分布式区别"></a>集中式与分布式区别</h1><pre><code>- 集中式： cvs, svn版本库集中放在中央服务器上,所有人干活时,都要先从中央服务器获取最新版本到本地,然后在本地修改,干完活后,将修改推送到中央服务器.**必须联网**才能工作.- 分布式每个人的电脑都是一个版本库,工作的时候 **不需要联网**,直接在本地修改,提交就可以.你和同事同时修改一个文件A,修改完成后互相将自己修改的文件推送给对方即可.**安全性高**, 每个人的本地都有一个完整的版本库,某个人的电脑突然崩溃,从其他人那直接copy一份就可以了.但集中式版本控制系统,一旦中央服务器垮掉,版本库信息就都丢失了.</code></pre><h1 id="创建版本库-添加文件"><a href="#创建版本库-添加文件" class="headerlink" title="创建版本库,添加文件"></a>创建版本库,添加文件</h1><pre><code>命令:    - 创建版本库        mkdir studyGit        git init    - 添加文件        vim readme.txt        git add readme.txt        git commit -m &quot;注释说明,方便自己或他人查看&quot;</code></pre><h1 id="修改文件并提交"><a href="#修改文件并提交" class="headerlink" title="修改文件并提交"></a>修改文件并提交</h1><pre><code>命令:    - vim  编辑修改文件内容    - git status  查看当前仓库状态    - git diff filename  查看文件具体改动内容    - 提交:        git add filename        git commit -m &quot;本次提交注释说明&quot;</code></pre><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><pre><code>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD指向至你切换的版本.命令:    - 回退到上一个版本        git reset --hard HEAD^    - 回退到上上版本        git reset --hard HEAD^^    - 回退到指定版本        git log  查看你要切换版本的commit id        或 git log --pretty=oneline        git reset --hard target_commit_id    - 回退之后后悔了,想切换到回退前的版本        1) 通过git log是找不到回退前那次提交的日志的,没办法指定commit id回退切换        2) 通过git reflog查看, git reflog是记录我们的历史命令的,找到你那次提交历史命令前的commit id,即可切换回去</code></pre><h1 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h1><pre><code>工作区: 电脑上直接看到的,你管理的文件夹(使用git init创建的),就是工作区暂存区: 在工作区下,隐藏的.git文件夹,其中有很多文件,有几个重要的要理解:        - 暂存区: stage        - 版本信息(master分支)        - HEAD指针,指向具体分支提交工作区的文件修改或新增文件:    1) git add files  -&gt; 实际将这些修改先推送到本地暂存区(暂存区中存放了所有待提交的文件)    2) git commit -m &quot;说明&quot;  -&gt; 提交暂存区中的所有文件至master或分支版本</code></pre><h1 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h1><pre><code>工作区中readme.txt文件1) 第一次修改, 增加一行内容, git add readme.txt2) 第二次修改, 又增加了一行内容, 但未执行 git add readme.txt3) git commit -m &quot;注释&quot;; 那么此次提交的只是第一次修改的内容git diff HEAD -- readme.txt  查看工作区中与版本库中的不同之处</code></pre><h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><pre><code>1) 工作区修改,改乱了,还没有提交至暂存区; 可以通过 git checkout -- filename 恢复至与版本库一致的状态2) 工作区修改,改乱了,但之前已提交至暂存区,撤销修改:    git reset HEAD filename  把暂存区的修改撤销掉(unstage)    git checkout -- filename  恢复工作区与版本库一致</code></pre><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><pre><code>git rm filenamegit commit -m &quot;delete file filename&quot;</code></pre><h1 id="远程仓库关联"><a href="#远程仓库关联" class="headerlink" title="远程仓库关联"></a>远程仓库关联</h1><pre><code>1) 创建ssh key:ssh-keygen -t rsa -C &quot;youremail@example.com&quot;  # 一路回车即可在用户主目录里会生成一个.ssh文件夹,里面有id_rsa和id_rsa.pub, id_rsa是私钥, id_rsa.pub是公钥;登录github,进入个人账户settings页面,选择ssh key -&gt; add new; 添加, 将id_rsa.pub复制到页面中,完成.2) 添加远程仓库    - 在github网站新增仓库,与本地要关联的仓库同名    - 进入本地仓库所在的目录, git remote add origin &lt;新增的远程仓库地址&gt;    - git push -u origin master  # 将本地仓库的master分支推送到远程服务器上,后续提交可以省略参数-u(远程初始仓库为空,所以加-u)    - 本地修改文件,提交; 推送至远程</code></pre><h1 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h1><pre><code>进入你想保存仓库的路径,然后执行:git clone &lt;远程仓库地址&gt;</code></pre><h1 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h1><pre><code>查看分支：git branch创建分支：git branch &lt;name&gt;切换分支：git checkout &lt;name&gt;创建+切换分支：git checkout -b &lt;name&gt;合并某分支到当前分支：git merge &lt;name&gt;删除分支：git branch -d &lt;name&gt;</code></pre><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><pre><code>1) 在分支上修改了文件,并commit2) 在mster上修改了文件,并commit3) git merge &lt;ranchname&gt;; 报错, 无法实现快速合并, 需先解决冲突, 把冲突文件改成自己想要的内容,然后 git add filename, git commit -m &quot;注释&quot;.        </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目录：&lt;br&gt;    建立本地版本库&lt;br&gt;    本地版本库与远程关联&lt;br&gt;    修改文件并提交&lt;br&gt;    创建分支,修改文件合并至master&lt;/p&gt;
&lt;h1 id=&quot;git的由来&quot;&gt;&lt;a href=&quot;#git的由来&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Django的ContentType组件</title>
    <link href="http://yoursite.com/2017/11/30/Django%E7%9A%84ContentType%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/11/30/Django的ContentType组件/</id>
    <published>2017-11-30T08:47:45.000Z</published>
    <updated>2018-11-19T09:46:32.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>我们商城里有很多的商品，节日要来了，我们要搞活动</p><p>那么我们就要设计优惠券，优惠卷都有什么类型嗯，满减的，折扣的，立减的等</p><p>我们对应着我们活动类型，对我们的某类商品设计优惠券，</p><p>比如：</p><pre><code>家电是一类商品食物是一类商品那么我们可以设计家电折扣优惠卷，以及食物满减优惠卷等</code></pre><p>那么表结构怎么设计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Appliance</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    家用电器表</span></span><br><span class="line"><span class="string">    id name</span></span><br><span class="line"><span class="string">    1   冰箱</span></span><br><span class="line"><span class="string">    2   电视</span></span><br><span class="line"><span class="string">    3   洗衣机</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    食物表</span></span><br><span class="line"><span class="string">    id name</span></span><br><span class="line"><span class="string">    1  面包</span></span><br><span class="line"><span class="string">    2  牛奶</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    水果表</span></span><br><span class="line"><span class="string">    id  name</span></span><br><span class="line"><span class="string">    1   苹果</span></span><br><span class="line"><span class="string">    2   香蕉</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coupon</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    优惠券表</span></span><br><span class="line"><span class="string">    id  name    appliance_id    food_id     fruit_id</span></span><br><span class="line"><span class="string">    1   通用优惠券   null            null        null</span></span><br><span class="line"><span class="string">    2   冰箱折扣券   1               null        null</span></span><br><span class="line"><span class="string">    3   电视折扣券   2               null        null</span></span><br><span class="line"><span class="string">    4   苹果满减卷   null            null        1</span></span><br><span class="line"><span class="string">    我每增加一张表就要多增加一个字段</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    appliance = models.ForeignKey(to=<span class="string">"Appliance"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    food = models.ForeignKey(to=<span class="string">"Food"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)</span><br><span class="line">    fruit = models.ForeignKey(to=<span class="string">"Fruit"</span>, null=<span class="keyword">True</span>, blank=<span class="keyword">True</span>)&lt;br&gt;<span class="comment"># 实际上我们商品的种类会特别的多，导致我们这张表外键越来越多</span></span><br></pre></td></tr></table></figure><p>遇到这种一张表要跟多张表进行外键关联的时候，我们的Django提供了ContentType组件</p><h1 id="ContentType组件"><a href="#ContentType组件" class="headerlink" title="ContentType组件"></a>ContentType组件</h1><p>ContentType是Django内置的一个应用，可以追踪项目中所有的APP和model的对应关系，<br>并且记录在ContentType表中。</p><p>当我们的项目做数据库迁移后，会有很多DJango自带的表，其中就有dJango_content_type表</p><h2 id="ContentType组件应用"><a href="#ContentType组件应用" class="headerlink" title="ContentType组件应用"></a>ContentType组件应用</h2><pre><code>1，在model中定义ForeignKey字段，并关联到ContentType表，通常这个字段命名为content-type2，在model中定义PositiveIntergerField字段, 用来存储关联表中的主键，通常我们用object_id3，在model中定义GenericForeignKey字段，传入上面两个字段的名字4，方便反向查询可以定义GenericRelation字段</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericForeignKey, GenericRelation</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Appliance</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    家用电器表</span></span><br><span class="line"><span class="string">    id name</span></span><br><span class="line"><span class="string">    1   冰箱</span></span><br><span class="line"><span class="string">    2   电视</span></span><br><span class="line"><span class="string">    3   洗衣机</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    coupons = GenericRelation(to=<span class="string">"Coupon"</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    食物表</span></span><br><span class="line"><span class="string">    id name</span></span><br><span class="line"><span class="string">    1  面包</span></span><br><span class="line"><span class="string">    2  牛奶</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    水果表</span></span><br><span class="line"><span class="string">    id  name</span></span><br><span class="line"><span class="string">    1   苹果</span></span><br><span class="line"><span class="string">    2   香蕉</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coupon</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    优惠券表</span></span><br><span class="line"><span class="string">    id  name    appliance_id    food_id     fruit_id</span></span><br><span class="line"><span class="string">    1   通用优惠券   null            null        null</span></span><br><span class="line"><span class="string">    2   冰箱折扣券   1               null        null</span></span><br><span class="line"><span class="string">    3   电视折扣券   2               null        null</span></span><br><span class="line"><span class="string">    4   苹果满减卷   null            null        1</span></span><br><span class="line"><span class="string">    我每增加一张表就要多增加一个字段</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># appliance = models.ForeignKey(to="Appliance", null=True, blank=True)</span></span><br><span class="line">    <span class="comment"># food = models.ForeignKey(to="Food", null=True, blank=True)</span></span><br><span class="line">    <span class="comment"># fruit = models.ForeignKey(to="Fruit", null=True, blank=True)</span></span><br><span class="line">    <span class="comment"># 第一步</span></span><br><span class="line">    content_type = models.ForeignKey(to=ContentType)</span><br><span class="line">    <span class="comment"># 第二步</span></span><br><span class="line">    object_id = models.PositiveIntegerField()</span><br><span class="line">    <span class="comment"># 第三步</span></span><br><span class="line">    content_object = GenericForeignKey(<span class="string">'content_type'</span>, <span class="string">'object_id'</span>)</span><br></pre></td></tr></table></figure><p>数据库迁移后，添加数据，再进行增删改操作</p><h2 id="基本的使用"><a href="#基本的使用" class="headerlink" title="基本的使用"></a>基本的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Appliance, Coupon</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 通过ContentType获得表名</span></span><br><span class="line">        content = ContentType.objects.filter(app_label=<span class="string">"app01"</span>, model=<span class="string">"appliance"</span>).first()</span><br><span class="line">        <span class="comment"># 获得表model对象 相当于models.Applicance</span></span><br><span class="line">        model_class = content.model_class()</span><br><span class="line">        ret = model_class.objects.all()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 为海尔冰箱创建一条优惠记录</span></span><br><span class="line">        ice_box = Appliance.objects.filter(id=<span class="number">1</span>).first()</span><br><span class="line">        Coupon.objects.create(name=<span class="string">"海尔冰箱折扣券"</span>, content_object=ice_box)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 查询优惠券id=1绑定了哪个商品</span></span><br><span class="line">        coupon_obj = Coupon.objects.filter(id=<span class="number">1</span>).first()</span><br><span class="line">        goods_obj = coupon_obj.content_object</span><br><span class="line">        print(goods_obj.name)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 查询海尔冰箱的所有优惠券 id=1</span></span><br><span class="line">        <span class="comment"># 我们定义了反向查询</span></span><br><span class="line">        results = ice_box.coupons.all()</span><br><span class="line">        print(results[<span class="number">0</span>].name)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 如果没定义反向查询</span></span><br><span class="line">        content = ContentType.objects.filter(app_label=<span class="string">"app01"</span>, model=<span class="string">"appliance"</span>).first()</span><br><span class="line">        result = Coupon.objects.filter(content_type=content, object_id=<span class="number">1</span>).all()</span><br><span class="line">        print(result[<span class="number">0</span>].name)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(ret)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;我们商城里有很多的商品，节日要来了，我们要搞活动&lt;/p&gt;
&lt;p&gt;那么我们就要设计优惠券，优惠卷都有什么类型嗯，满减的，折扣的，立减的等&lt;/p
      
    
    </summary>
    
      <category term="restful framework" scheme="http://yoursite.com/categories/restful-framework/"/>
    
    
  </entry>
  
  <entry>
    <title>CORS跨域请求</title>
    <link href="http://yoursite.com/2017/11/29/CORS%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2017/11/29/CORS跨域请求/</id>
    <published>2017-11-29T07:57:13.000Z</published>
    <updated>2018-11-21T01:28:44.425Z</updated>
    
    <content type="html"><![CDATA[<center>跨域</center><h1 id="CORS跨域请求"><a href="#CORS跨域请求" class="headerlink" title="CORS跨域请求"></a>CORS跨域请求</h1><p>CORS即Cross Origin Resource Sharing 跨域资源共享</p><p>跨域请求分为两种，一种叫简单请求，一种是复杂请求</p><h2 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h2><p>HTTP方法是下列方法之一</p><pre><code>HEAD，GET，POST</code></pre><p>HTTP头信息不超出以下几种字段</p><pre><code>　　Accept， Accept-Language， Content-Language， Last-Event-ID　　Content-Type只能是下列类型中的一个　　　　application/x-www-from-urlencoded　　　　multipart/form-data　　　　text/plain</code></pre><p>任何一个不满足上述要求的请求，即会被认为是复杂请求</p><p>复杂请求会先发出一个预请求，我们也叫预检，OPTIONS请求</p><h2 id="浏览器的同源策略"><a href="#浏览器的同源策略" class="headerlink" title="浏览器的同源策略"></a>浏览器的同源策略</h2><p>跨域是因为浏览器的同源策略导致的，也就是说浏览器会阻止非同源的请求</p><p>那么什么是非同源的呢？<br>    即域名不同，端口不同都属于非同源</p><p>浏览器只阻止表单以及ajax请求，并不会阻止src请求，所以我们的cnd，图片等src请求都可以发</p><h2 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>jsonp的实现原理是根据浏览器不组织src请求入手来实现的</p><h4 id="JsonP实现的后端代码"><a href="#JsonP实现的后端代码" class="headerlink" title="JsonP实现的后端代码"></a>JsonP实现的后端代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        callback = request.query_params.get(<span class="string">"callback"</span>, <span class="string">""</span>)</span><br><span class="line">        ret = callback + <span class="string">"("</span> + <span class="string">"'success'"</span> + <span class="string">")"</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(ret)</span><br></pre></td></tr></table></figure><h4 id="JsonP测试前端代码"><a href="#JsonP测试前端代码" class="headerlink" title="JsonP测试前端代码"></a>JsonP测试前端代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn_one"</span>&gt;</span>点击我向JsonP1发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    // 测试发送请求失败 跨域不能得到数据</span></span><br><span class="line"><span class="undefined">    $('#btn_one').click(function () &#123;</span></span><br><span class="line"><span class="undefined">        $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">            url: "http://127.0.0.1:8000/jsonp1",</span></span><br><span class="line"><span class="undefined">            type: "get",</span></span><br><span class="line"><span class="undefined">            success: function (response) &#123;</span></span><br><span class="line"><span class="undefined">                console.log(response)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    function handlerResponse(response) &#123;</span></span><br><span class="line"><span class="undefined">        alert(response)</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    window.onload = function () &#123;</span></span><br><span class="line"><span class="undefined">        $("#btn_one").click(function () &#123;</span></span><br><span class="line"><span class="undefined">            let script_ele = document.createElement("script");</span></span><br><span class="line"><span class="undefined">            script_ele.src = "http://127.0.0.1:8000/jsonp1?callback=handlerResponse";</span></span><br><span class="line"><span class="undefined">            document.body.insertBefore(script_ele, document.body.firstChild);</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JsonP解决跨域问题只能发送get请求，并且实现起来需要前后端交互比较多</p><h4 id="添加响应头"><a href="#添加响应头" class="headerlink" title="添加响应头"></a>添加响应头</h4><h5 id="中间件响应头"><a href="#中间件响应头" class="headerlink" title="中间件响应头"></a>中间件响应头</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCors</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        response[<span class="string">"Access-Control-Allow-Origin"</span>] = <span class="string">"*"</span></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">"OPTIONS"</span>:</span><br><span class="line">            response[<span class="string">"Access-Control-Allow-Headers"</span>] = <span class="string">"Content-Type"</span></span><br><span class="line">            response[<span class="string">"Access-Control-Allow-Methods"</span>] = <span class="string">"DELETE, PUT, PATCH"</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;跨域&lt;/center&gt;

&lt;h1 id=&quot;CORS跨域请求&quot;&gt;&lt;a href=&quot;#CORS跨域请求&quot; class=&quot;headerlink&quot; title=&quot;CORS跨域请求&quot;&gt;&lt;/a&gt;CORS跨域请求&lt;/h1&gt;&lt;p&gt;CORS即Cross Origin Resourc
      
    
    </summary>
    
      <category term="restful framework" scheme="http://yoursite.com/categories/restful-framework/"/>
    
    
  </entry>
  
  <entry>
    <title>RESTful_API</title>
    <link href="http://yoursite.com/2017/11/27/RESTful-API/"/>
    <id>http://yoursite.com/2017/11/27/RESTful-API/</id>
    <published>2017-11-27T10:25:55.000Z</published>
    <updated>2018-11-19T09:43:56.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是RESTful"><a href="#什么是RESTful" class="headerlink" title="什么是RESTful"></a>什么是RESTful</h1><ul><li><p>REST与技术无关，代表的是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”</p></li><li><p>REST从资源的角度类审视整个网络，它将分布在网络中某个节点的资源通过URL进行标识，客户端应用通过URL来获取资源的表征，获得这些表征致使这些应用转变状态</p></li><li><p>所有的数据，不管是通过网络获取的还是操作数据库获得（增删改查）的数据，都是资源，将一切数据视为资源是REST区别与其他架构风格的最本质属性</p></li><li><p>对于REST这种面向资源的架构风格，有人提出一种全新的结构理念，即：面向资源架构（ROA：Resource Oriented Architecture）</p><ul><li>对互联网上的任意东西都视为资源，他认为一个url就是一个资源 比如：<a href="http://www.xxx.com/get_user/" target="_blank" rel="noopener">http://www.xxx.com/get_user/</a></li></ul></li></ul><h1 id="什么是API"><a href="#什么是API" class="headerlink" title="什么是API"></a>什么是API</h1><p>API就是接口，提供的url。接口有两个用途：</p><ul><li>为别人提供服务</li><li>前后端分离，一个写vue，一个写后端，他们之间都是通过ajax请求</li></ul><h1 id="基于Django实现的API"><a href="#基于Django实现的API" class="headerlink" title="基于Django实现的API"></a>基于Django实现的API</h1><pre><code>网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备......）。因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现&quot;API First&quot;的设计思想。RESTful API是目前比较成熟的一套互联网应用程序的API设计理论。</code></pre><p>那么先来简单了解一下</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><pre><code>API与用户的通信协议，总是使用HTTPs协议</code></pre><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>有两种方式</p><p>方式一： 尽量将API部署在专用域名（会存在跨域问题）</p><pre><code>https://api.example.com</code></pre><p>方式二：如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><pre><code>https://example.org/api/</code></pre><h2 id="版本-Versioning"><a href="#版本-Versioning" class="headerlink" title="版本(Versioning)"></a>版本(Versioning)</h2><p>应该将API的版本号放入URL。</p><pre><code>https://api.example.com/v1/</code></pre><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。</p><h2 id="路径-Endpoint"><a href="#路径-Endpoint" class="headerlink" title="路径(Endpoint)"></a>路径(Endpoint)</h2><p>路径又称”终点”（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），<br>所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。<br>一般来说，数据库中的表都是同种记录的”集合”（collection），<br>所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><pre><code>https://api.example.com/v1/zooshttps://api.example.com/v1/animalshttps://api.example.com/v1/employees</code></pre><h2 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h2><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><pre><code>GET（SELECT）：从服务器取出资源（一项或多项）。即获取数据POST（CREATE）：在服务器新建一个资源。 即添加数据PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。即更新数据PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。即更新数据DELETE（DELETE）：从服务器删除资源  。即删除数据</code></pre><p>还有两个不常用的HTTP动词。</p><pre><code>HEAD：获取资源的元数据。OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</code></pre><p>下面是一些例子：</p><pre><code>GET /zoos：列出所有动物园POST /zoos：新建一个动物园GET /zoos/ID：获取某个指定动物园的信息PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）DELETE /zoos/ID：删除某个动物园GET /zoos/ID/animals：列出某个指定动物园的所有动物DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</code></pre><h2 id="过滤信息-Filtering"><a href="#过滤信息-Filtering" class="headerlink" title="过滤信息(Filtering)"></a>过滤信息(Filtering)</h2><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><pre><code>?limit=10：指定返回记录的数量?offset=10：指定返回记录的开始位置。?page=2&amp;per_page=100：指定第几页，以及每页的记录数。?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。?animal_type_id=1：指定筛选条件</code></pre><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。<br>比如，<br>    GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h2 id="状态码-status-codes"><a href="#状态码-status-codes" class="headerlink" title="状态码(status codes)"></a>状态码(status codes)</h2><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><pre><code>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）204 NO CONTENT - [DELETE]：用户删除数据成功。400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</code></pre><h2 id="错误处理-Error-handing"><a href="#错误处理-Error-handing" class="headerlink" title="错误处理(Error handing)"></a>错误处理(Error handing)</h2><p>如果状态码是4xx，就应该向用户返回出错信息。<br>一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><pre><code>{    error: &quot;Invalid API key&quot;}</code></pre><h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><p>针对不同操作，服务器向用户返回的结果应该符合以下规范</p><pre><code>GET /collection：返回资源对象的列表（数组）GET /collection/resource：返回单个资源对象POST /collection：返回新生成的资源对象PUT /collection/resource：返回完整的资源对象PATCH /collection/resource：返回完整的资源对象DELETE /collection/resource：返回一个空文档</code></pre><h2 id="Hypermedia-API-超媒体API"><a href="#Hypermedia-API-超媒体API" class="headerlink" title="Hypermedia API 超媒体API"></a>Hypermedia API 超媒体API</h2><p>RESTful API最好做到Hypermedia，<br>即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><pre><code>{&quot;link&quot;: {&quot;rel&quot;:   &quot;collection https://www.example.com/zoos&quot;,  #表示这个API与当前网址的关系（collection关系，并给出该collection的网址）&quot;href&quot;:  &quot;https://api.example.com/zoos&quot;,  #API路径&quot;title&quot;: &quot;List of zoos&quot;,  #API的标题&quot;type&quot;:  &quot;application/vnd.yourformat+json&quot;  #返回类型}}</code></pre><p>Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。</p><pre><code>{&quot;current_user_url&quot;: &quot;https://api.github.com/user&quot;,&quot;authorizations_url&quot;: &quot;https://api.github.com/authorizations&quot;,// ...}</code></pre><p>从上面可以看到，如果想获取当前用户的信息，应该去访问api.github.com/user，然后就得到了下面结果。</p><pre><code>{&quot;message&quot;: &quot;Requires authentication&quot;,&quot;documentation_url&quot;: &quot;https://developer.github.com/v3&quot;}</code></pre><h1 id="基于Django实现API"><a href="#基于Django实现API" class="headerlink" title="基于Django实现API"></a>基于Django实现API</h1><h2 id="方式一：FBV模式"><a href="#方式一：FBV模式" class="headerlink" title="方式一：FBV模式"></a>方式一：FBV模式</h2><h3 id="全局url"><a href="#全局url" class="headerlink" title="全局url"></a>全局url</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># path('hosts/',views.HostView.as_view()),</span></span><br><span class="line">    url(<span class="string">'app02/'</span>, include(<span class="string">'app02.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="app02-url"><a href="#app02-url" class="headerlink" title="app02/url"></a>app02/url</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">'^users/'</span>, views.users),</span><br><span class="line">    url(<span class="string">'^user/(\d+)'</span>, views.user),</span><br><span class="line"></span><br><span class="line">    url(<span class="string">'^users/'</span>, views.UsersView.as_view()),</span><br><span class="line">    url(<span class="string">'^user/'</span>, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="views"><a href="#views" class="headerlink" title="views"></a>views</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span><span class="params">(request)</span>:</span></span><br><span class="line">    response = &#123;<span class="string">'code'</span>:<span class="number">1000</span>,<span class="string">'data'</span>:<span class="keyword">None</span>&#125;  <span class="comment">#code用来表示状态，比如1000代表成功，1001代表</span></span><br><span class="line">    response[<span class="string">'data'</span>] = [</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'haiyan'</span>,<span class="string">'age'</span>:<span class="number">22</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'haidong'</span>,<span class="string">'age'</span>:<span class="number">10</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'name'</span>:<span class="string">'haixiyu'</span>,<span class="string">'age'</span>:<span class="number">11</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(response))  <span class="comment">#返回多条数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(request,pk)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method ==<span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(&#123;<span class="string">'name'</span>:<span class="string">'haiyan'</span>,<span class="string">'age'</span>:<span class="number">11</span>&#125;))  <span class="comment">#返回一条数据</span></span><br><span class="line">    <span class="keyword">elif</span> request.method ==<span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(json.dumps(&#123;<span class="string">'code'</span>:<span class="number">1111</span>&#125;))  <span class="comment">#返回一条数据</span></span><br><span class="line">    <span class="keyword">elif</span> request.method ==<span class="string">'PUT'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> request.method ==<span class="string">'DELETE'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="方式二：CBV模式"><a href="#方式二：CBV模式" class="headerlink" title="方式二：CBV模式"></a>方式二：CBV模式</h2><h3 id="app02-url-1"><a href="#app02-url-1" class="headerlink" title="app02/url"></a>app02/url</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">    urlpatterns = [</span><br><span class="line">        url(<span class="string">'^users/'</span>, views.UsersView.as_view()),</span><br><span class="line">        url(<span class="string">'^user/'</span>, views.UserView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><pre><code>基于django实现的API许多功能都需要我们自己开发，这时候djangorestframework就给我们提供了方便，直接基于它来返回数据，总之原理都是一样的，就是给一个接口也就是url，让前端的人去请求这个url去获取数据，在页面上显示出来。这样也就达到了前后端分离的效果。</code></pre><p>下面我们来看看基于Django Rest Framework框架实现</p><h3 id="views-1"><a href="#views-1" class="headerlink" title="views"></a>views</h3><h1 id="基于Django-Rest-Framework框架的实现"><a href="#基于Django-Rest-Framework框架的实现" class="headerlink" title="基于Django Rest Framework框架的实现"></a>基于Django Rest Framework框架的实现</h1><h2 id="自定义认证"><a href="#自定义认证" class="headerlink" title="自定义认证"></a>自定义认证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAuthtication</span><span class="params">(BasicAuthentication)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        token = request.query_params.get(<span class="string">'token'</span>)  <span class="comment">#注意是没有GET的，用query_params表示</span></span><br><span class="line">        <span class="keyword">if</span> token == <span class="string">'zxxzzxzc'</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">'uuuuuu'</span>,<span class="string">'afsdsgdf'</span>) <span class="comment">#返回user，auth</span></span><br><span class="line">        <span class="keyword">raise</span> APIException(<span class="string">'认证错误'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    authentication_classes = [MyAuthtication,]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        print(request.user)</span><br><span class="line">        print(request.auth)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">'用户列表'</span>)</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>主要是做Token验证  url中as_view里面调用了dispatch方法。</p><p>可以有两种方式</p><h3 id="局部使用"><a href="#局部使用" class="headerlink" title="局部使用"></a>局部使用</h3><h4 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># django rest framework</span></span><br><span class="line">    url(<span class="string">'^hosts/'</span>, views.HostView.as_view()),</span><br><span class="line">    url(<span class="string">r'^auth/'</span>, views.AuthView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span>  APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication, BasicAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.negotiation <span class="keyword">import</span>  DefaultContentNegotiation</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> APIException</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response  <span class="comment">#友好的显示返回结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment">#auth登录页面不需要验证，可设置</span></span><br><span class="line">    authentication_classes = []  <span class="comment">#登录页面不需要认证</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        接收用户名和密码</span></span><br><span class="line"><span class="string">        :param request:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        ret = &#123;<span class="string">'code'</span>:<span class="number">1000</span>,<span class="string">'msg'</span>:<span class="keyword">None</span>&#125;</span><br><span class="line">        user = request.query_params.get(<span class="string">'username'</span>)</span><br><span class="line"></span><br><span class="line">        pwd = request.query_params.get(<span class="string">'password'</span>)</span><br><span class="line">        print(user,pwd)</span><br><span class="line">        obj = models.UserInfo.objects.filter(username=user,password=pwd).first()</span><br><span class="line">        print(obj)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj :</span><br><span class="line">            ret[<span class="string">'code'</span>] = <span class="number">1001</span></span><br><span class="line">            ret[<span class="string">'msg'</span>] = <span class="string">'用户名或者密码错误'</span></span><br><span class="line">            <span class="keyword">return</span> Response(ret)</span><br><span class="line">        <span class="comment">#创建随机字符串</span></span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        <span class="keyword">import</span> hashlib</span><br><span class="line">        ctime = time.time()</span><br><span class="line">        key = <span class="string">'%s|%s'</span>%(user,ctime)</span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        m.update(key.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        token = m.hexdigest()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#保存数据</span></span><br><span class="line">        obj.token = token</span><br><span class="line">        obj.save()</span><br><span class="line"></span><br><span class="line">        ret[<span class="string">'token'</span>] = token</span><br><span class="line">        <span class="keyword">return</span> Response(ret)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HostView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># authentication_classes = [MyAuthtication]</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        print(request.user,<span class="string">'dddddddddddffffff'</span>)</span><br><span class="line">        print(request.auth,<span class="string">'dddddddddd'</span>)</span><br><span class="line">        <span class="comment">#原来的request，django.core.handlers.wsgi.WSGIRequest</span></span><br><span class="line">        <span class="comment">#现在的request ,rest_framework.request.Request</span></span><br><span class="line">        <span class="comment"># print(request)</span></span><br><span class="line">        authentication_classes = [SessionAuthentication,BaseAuthentication]</span><br><span class="line">        <span class="comment"># print(self.authentication_classes)  # [&lt;class 'rest_framework.authentication.SessionAuthentication'&gt;,</span></span><br><span class="line">                                            <span class="comment">#  &lt;class 'rest_framework.authentication.BasicAuthentication'&gt;]</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'GET请求的响应内容'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># try:</span></span><br><span class="line">        <span class="comment">#     try :</span></span><br><span class="line">        <span class="comment">#         current_page = request.POST.get("page")</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#         current_page = int(current_page)</span></span><br><span class="line">        <span class="comment">#         int("asd")</span></span><br><span class="line">        <span class="comment">#     except ValueError as e:</span></span><br><span class="line">        <span class="comment">#         print(e)</span></span><br><span class="line">        <span class="comment">#         raise #如果有raise说明自己处理不了了，就交给下面的一个去捕捉了</span></span><br><span class="line">        <span class="comment"># except Exception as e:</span></span><br><span class="line">        <span class="comment">#     print("OK")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  HttpResponse(<span class="string">'post请求的响应内容'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'put请求的响应内容'</span>)</span><br></pre></td></tr></table></figure><h3 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h3><h4 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注册认证类</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'UNAUTHENTICATED_USER'</span>: <span class="keyword">None</span>,</span><br><span class="line">    <span class="string">'UNAUTHENTICATED_TOKEN'</span>: <span class="keyword">None</span>,  <span class="comment">#将匿名用户设置为None</span></span><br><span class="line">    <span class="string">"DEFAULT_AUTHENTICATION_CLASSES"</span>: [</span><br><span class="line">        <span class="string">"app01.utils.MyAuthentication"</span>,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局验证"><a href="#全局验证" class="headerlink" title="全局验证"></a>全局验证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> APIException</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAuthentication</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        token=request.query_params.get(<span class="string">'token'</span>)</span><br><span class="line">        print(token)</span><br><span class="line">        obj=models.UserInfo.objects.filter(token=token).first()</span><br><span class="line">        print(obj)</span><br><span class="line">        <span class="keyword">if</span> obj:</span><br><span class="line">            <span class="keyword">return</span> (obj.username,obj)</span><br><span class="line">        <span class="keyword">raise</span>  APIException(<span class="string">'没有通过验证'</span>)</span><br></pre></td></tr></table></figure><p>注：rest_framewor是一个app需要settings里面设置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是RESTful&quot;&gt;&lt;a href=&quot;#什么是RESTful&quot; class=&quot;headerlink&quot; title=&quot;什么是RESTful&quot;&gt;&lt;/a&gt;什么是RESTful&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;REST与技术无关，代表的是一种软件架构风格，REST是R
      
    
    </summary>
    
      <category term="restful framework" scheme="http://yoursite.com/categories/restful-framework/"/>
    
    
  </entry>
  
  <entry>
    <title>Django-Rest-Framework源码流程</title>
    <link href="http://yoursite.com/2017/11/25/Django-Rest-Framework%E6%BA%90%E7%A0%81%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/11/25/Django-Rest-Framework源码流程/</id>
    <published>2017-11-25T09:39:13.000Z</published>
    <updated>2018-11-19T09:43:28.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>请求到来之后，都要先执行dispatch方法，dispatch方法方法根据请求方式的不同触发get/post/put/delete等方法</p><pre><code>注意：APIView中的dispatch方法有很多功能</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        `.dispatch()` is pretty much the same as Django's regular dispatch,</span></span><br><span class="line"><span class="string">        but with extra hooks for startup, finalize, and exception handling.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        第一步：对request进行加工（添加数据）</span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#第二步：</span></span><br><span class="line">                <span class="comment">#处理版权信息</span></span><br><span class="line">                <span class="comment">#认证</span></span><br><span class="line">                <span class="comment">#权限</span></span><br><span class="line">                <span class="comment">#请求用户进行访问频率的限制</span></span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">                handler = getattr(self, request.method.lower(),</span><br><span class="line">                                  self.http_method_not_allowed)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 第三步、执行：get/post/put/delete函数</span></span><br><span class="line">            response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#第四步、 对返回结果再次进行加工</span></span><br><span class="line">        self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.response</span><br></pre></td></tr></table></figure><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>上面是大致步骤，下面我们来具体分析一下，看每个步骤中都具体干了什么事</p><h2 id="对request进行加工（添加数据）"><a href="#对request进行加工（添加数据）" class="headerlink" title="对request进行加工（添加数据）"></a>对request进行加工（添加数据）</h2><p>我们看看request里面都添加了那些数据</p><h3 id="a"><a href="#a" class="headerlink" title="a"></a>a</h3><pre><code>首先  request = self.initialize_request(request, *args, **kwargs)点进去，会发现：在Request里面多加了四个，如下</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_request</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns the initial request object.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#吧请求弄成一个字典返回了</span></span><br><span class="line">    parser_context = self.get_parser_context(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Request(</span><br><span class="line">        request,</span><br><span class="line">        parsers=self.get_parsers(),  <span class="comment">#解析数据，默认的有三种方式，可点进去看</span></span><br><span class="line">        <span class="comment">#self.get_authenticator优先找自己的，没有就找父类的</span></span><br><span class="line">        authenticators=self.get_authenticators(), <span class="comment">#获取认证相关的所有类并实例化，传入request对象供Request使用</span></span><br><span class="line">        negotiator=self.get_content_negotiator(),</span><br><span class="line">        parser_context=parser_context</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="b"><a href="#b" class="headerlink" title="b"></a>b</h3><pre><code>获取认证相关的类的具体   authenticators=self.get_authenticators()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_authenticators</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Instantiates and returns the list of authenticators that this view can use.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#返回的是对象列表</span></span><br><span class="line">        <span class="keyword">return</span> [auth() <span class="keyword">for</span> auth <span class="keyword">in</span> self.authentication_classes]  <span class="comment">#[SessionAuthentication,BaseAuthentication]</span></span><br></pre></td></tr></table></figure><h3 id="c"><a href="#c" class="headerlink" title="c"></a>c</h3><pre><code>查看认证的类：self.authentication_classes</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES  <span class="comment">#默认的，如果自己有会优先执行自己的</span></span><br></pre></td></tr></table></figure><h3 id="d"><a href="#d" class="headerlink" title="d"></a>d</h3><pre><code>接着走进api_settings</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api_settings = APISettings(<span class="keyword">None</span>, DEFAULTS, IMPORT_STRINGS)  <span class="comment">#点击继承的DEFAULTS类</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEFAULTS = &#123;</span><br><span class="line">    <span class="comment"># Base API policies</span></span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,   <span class="comment">#这时候就找到了他默认认证的类了，可以导入看看</span></span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span></span><br><span class="line">    ),</span><br></pre></td></tr></table></figure><h3 id="e"><a href="#e" class="headerlink" title="e"></a>e</h3><pre><code>导入了类看看类里面具体干了什么</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br></pre></td></tr></table></figure><h3 id="f"><a href="#f" class="headerlink" title="f"></a>f</h3><pre><code>看到里面有个authenticate方法和authenticate_header方法</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseAuthentication</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    All authentication classes should extend BaseAuthentication.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Authenticate the request and return a two-tuple of (user, token).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">".authenticate() must be overridden."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate_header</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return a string to be used as the value of the `WWW-Authenticate`</span></span><br><span class="line"><span class="string">        header in a `401 Unauthenticated` response, or `None` if the</span></span><br><span class="line"><span class="string">        authentication scheme should return `403 Permission Denied` responses.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>具体处理认证，从headers里面能获取用户名和密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicAuthentication</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    HTTP Basic authentication against username/password.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    www_authenticate_realm = <span class="string">'api'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns a `User` if a correct username and password have been supplied</span></span><br><span class="line"><span class="string">        using HTTP Basic authentication.  Otherwise returns `None`.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        auth = get_authorization_header(request).split()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> auth <span class="keyword">or</span> auth[<span class="number">0</span>].lower() != <span class="string">b'basic'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span>   <span class="comment">#返回none不处理。让下一个处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(auth) == <span class="number">1</span>:</span><br><span class="line">            msg = _(<span class="string">'Invalid basic header. No credentials provided.'</span>)</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line">        <span class="keyword">elif</span> len(auth) &gt; <span class="number">2</span>:</span><br><span class="line">            msg = _(<span class="string">'Invalid basic header. Credentials string should not contain spaces.'</span>)</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            auth_parts = base64.b64decode(auth[<span class="number">1</span>]).decode(HTTP_HEADER_ENCODING).partition(<span class="string">':'</span>)   <span class="comment">#用partition切割冒号也包括</span></span><br><span class="line">        <span class="keyword">except</span> (TypeError, UnicodeDecodeError, binascii.Error):</span><br><span class="line">            msg = _(<span class="string">'Invalid basic header. Credentials not correctly base64 encoded.'</span>)</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line"></span><br><span class="line">        userid, password = auth_parts[<span class="number">0</span>], auth_parts[<span class="number">2</span>]  <span class="comment"># 返回用户和密码</span></span><br><span class="line">        <span class="keyword">return</span> self.authenticate_credentials(userid, password, request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate_credentials</span><span class="params">(self, userid, password, request=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Authenticate the userid and password against username and password</span></span><br><span class="line"><span class="string">        with optional request for context.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        credentials = &#123;</span><br><span class="line">            get_user_model().USERNAME_FIELD: userid,</span><br><span class="line">            <span class="string">'password'</span>: password</span><br><span class="line">        &#125;</span><br><span class="line">        user = authenticate(request=request, **credentials)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(_(<span class="string">'Invalid username/password.'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user.is_active:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(_(<span class="string">'User inactive or deleted.'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (user, <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate_header</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Basic realm="%s"'</span> % self.www_authenticate_realm</span><br></pre></td></tr></table></figure><h3 id="g"><a href="#g" class="headerlink" title="g"></a>g</h3><pre><code>当然restfulframework默认定义了两个类。我们也可以自定制类，自己有就用自己的了，自己没有就去找父类的了，但是里面必须实现authenticate方法，不然会报错。</code></pre><h2 id="进行以下操作"><a href="#进行以下操作" class="headerlink" title="进行以下操作"></a>进行以下操作</h2><ul><li>处理版权信息</li><li>认证</li><li>权限</li><li>请求用户进行访问频率的限制</li></ul><p>我们主要来看一下认证流程：</p><h3 id="a-1"><a href="#a-1" class="headerlink" title="a"></a>a</h3><pre><code>首先 self.initial(request, *args, **kwargs)可以看到做了以下操作</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform content negotiation and store the accepted info on the request</span></span><br><span class="line">        neg = self.perform_content_negotiation(request)</span><br><span class="line">        request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Determine the API version, if versioning is in use.</span></span><br><span class="line">        <span class="comment">#2.1 处理版本信息</span></span><br><span class="line">        version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">        request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Ensure that the incoming request is permitted</span></span><br><span class="line">        <span class="comment">#2.2 认证</span></span><br><span class="line">        self.perform_authentication(request)</span><br><span class="line">        <span class="comment"># 2.3 权限</span></span><br><span class="line">        self.check_permissions(request)</span><br><span class="line">        <span class="comment"># 2.4 请求用户进行访问频率的限制</span></span><br><span class="line">        self.check_throttles(request)</span><br></pre></td></tr></table></figure><h3 id="b-1"><a href="#b-1" class="headerlink" title="b"></a>b</h3><pre><code>我们先来看认证，self.perform_authentication(request) 具体干了什么，按住ctrl点击进去</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perform_authentication</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Perform authentication on the incoming request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Note that if you override this and simply 'pass', then authentication</span></span><br><span class="line"><span class="string">        will instead be performed lazily, the first time either</span></span><br><span class="line"><span class="string">        `request.user` or `request.auth` is accessed.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        request.user   <span class="comment">#执行request的user，这是的request已经是加工后的request了</span></span><br></pre></td></tr></table></figure><h3 id="c-1"><a href="#c-1" class="headerlink" title="c"></a>c</h3><pre><code>那么我们可以从视图里面导入一下Request，找到request对象的user方法</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> Request</span><br></pre></td></tr></table></figure><img src="/2017/11/25/Django-Rest-Framework源码流程/1.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns the user associated with the current request, as authenticated</span></span><br><span class="line"><span class="string">        by the authentication classes provided to the request.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_user'</span>):</span><br><span class="line">            <span class="keyword">with</span> wrap_attributeerrors():</span><br><span class="line">                self._authenticate()  <span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> self._user  <span class="comment">#返回user</span></span><br></pre></td></tr></table></figure><h3 id="d-1"><a href="#d-1" class="headerlink" title="d"></a>d</h3><pre><code>执行self._authenticate() 开始用户认证，如果验证成功后返回元组： (用户,用户Token)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_authenticate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Attempt to authenticate the request using each authentication instance</span></span><br><span class="line"><span class="string">        in turn.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#循环对象列表</span></span><br><span class="line">        <span class="keyword">for</span> authenticator <span class="keyword">in</span> self.authenticators:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#执行每一个对象的authenticate 方法</span></span><br><span class="line">                user_auth_tuple = authenticator.authenticate(self)   </span><br><span class="line">            <span class="keyword">except</span> exceptions.APIException:</span><br><span class="line">                self._not_authenticated()</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> user_auth_tuple <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                self._authenticator = authenticator</span><br><span class="line">                self.user, self.auth = user_auth_tuple  <span class="comment">#返回一个元组，user，和auth，赋给了self,</span></span><br><span class="line">                <span class="comment"># 只要实例化Request，就会有一个request对象，就可以request.user,request.auth了</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self._not_authenticated()</span><br></pre></td></tr></table></figure><h3 id="e-1"><a href="#e-1" class="headerlink" title="e"></a>e</h3><pre><code>在user_auth_tuple = authenticator.authenticate(self) 进行验证，如果验证成功，执行类里的authenticatie方法 </code></pre><h3 id="f-1"><a href="#f-1" class="headerlink" title="f"></a>f</h3><pre><code>如果用户没有认证成功：self._not_authenticated()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_not_authenticated</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Set authenticator, user &amp; authtoken representing an unauthenticated request.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Defaults are None, AnonymousUser &amp; None.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#如果跳过了所有认证，默认用户和Token和使用配置文件进行设置</span></span><br><span class="line">        self._authenticator = <span class="keyword">None</span>  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> api_settings.UNAUTHENTICATED_USER:</span><br><span class="line">            self.user = api_settings.UNAUTHENTICATED_USER() <span class="comment"># 默认值为：匿名用户AnonymousUser</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.user = <span class="keyword">None</span>  <span class="comment"># None 表示跳过该认证</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> api_settings.UNAUTHENTICATED_TOKEN:</span><br><span class="line">            self.auth = api_settings.UNAUTHENTICATED_TOKEN()  <span class="comment"># 默认值为：None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.auth = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># (user, token)</span></span><br><span class="line">    <span class="comment"># 表示验证通过并设置用户名和Token；</span></span><br><span class="line">    <span class="comment"># AuthenticationFailed异常</span></span><br></pre></td></tr></table></figure><h2 id="执行get-post-delete等方法"><a href="#执行get-post-delete等方法" class="headerlink" title="执行get/post/delete等方法"></a>执行get/post/delete等方法</h2><h2 id="对返回结果在进行加工"><a href="#对返回结果在进行加工" class="headerlink" title="对返回结果在进行加工"></a>对返回结果在进行加工</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;请求到来之后，都要先执行dispatch方法，dispatch方法方法根据请求方式的不同触发get/post/put/delete等方法&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="restful framework" scheme="http://yoursite.com/categories/restful-framework/"/>
    
    
  </entry>
  
</feed>
