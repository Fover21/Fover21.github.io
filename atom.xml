<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>海燕</title>
  
  <subtitle>热爱编程，爱算法，爱生活，爱钻研</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-15T10:15:30.763Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>海燕</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django-Rest-Framework的视图和路由</title>
    <link href="http://yoursite.com/2018/11/15/Django-Rest-Framework%E7%9A%84%E8%B7%AF%E7%94%B1%E5%92%8C%E8%A7%86%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/11/15/Django-Rest-Framework的路由和视图/</id>
    <published>2018-11-15T08:34:44.000Z</published>
    <updated>2018-11-15T10:15:30.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-Rest-Framework的视图"><a href="#Django-Rest-Framework的视图" class="headerlink" title="Django-Rest-Framework的视图"></a>Django-Rest-Framework的视图</h1><h2 id="APIView"><a href="#APIView" class="headerlink" title="APIView"></a>APIView</h2><p>django中写CBV的时候继承的是View，rest_framework继承的是APIView，那么他们两个有什么不同呢<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^book$&apos;, BookView.as_view()),</span><br><span class="line">    url(r&apos;^book/(?P&lt;id&gt;\d+)$&apos;, BookEditView.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">可以看到，不管是View还是APIView最开始调用的都是as_view()方法，那走进源码看看</span><br><span class="line"></span><br><span class="line">![](Django-Rest-Framework的路由和视图/1.png)</span><br><span class="line"></span><br><span class="line">我们能看到，APIView继承了View, 并且执行了View中的as_view()方法，最后把view返回了，用csrf_exempt()方法包裹后去掉了csrf的认证。</span><br><span class="line"></span><br><span class="line">那我们看看View中的as_view()方法做了什么~</span><br><span class="line"></span><br><span class="line">![](Django-Rest-Framework的路由和视图/2.png)</span><br><span class="line"></span><br><span class="line">我们看到了~在View中的as_view方法返回了view函数，而view函数执行了self.dispatch()方法~~但是这里的dispatch方法应该是我们APIView中的~~</span><br><span class="line"></span><br><span class="line">![](Django-Rest-Framework的路由和视图/3.png)</span><br><span class="line"></span><br><span class="line">我们去initialize_request中看下把什么赋值给了request，并且赋值给了self.request, 也就是我们在视图中用的request.xxx到底是什么~~</span><br><span class="line"></span><br><span class="line">![](Django-Rest-Framework的路由和视图/4.png)</span><br><span class="line"></span><br><span class="line">我们看到，这个方法返回的是Request这个类的实例对象~~</span><br><span class="line">我们注意我们看下这个Request类中的第一个参数request，是我们走我们django的时候的原来的request~</span><br><span class="line"></span><br><span class="line">![](Django-Rest-Framework的路由和视图/5.png)</span><br><span class="line"></span><br><span class="line">我们看到了，这个Request类把原来的request赋值给了self._request, 也就是说以后_request是我们老的request，新的request是我们这个Request类~~</span><br><span class="line"></span><br><span class="line">那我们继承APIView之后请求来的数据都在哪呢~~</span><br><span class="line"></span><br><span class="line">![](Django-Rest-Framework的路由和视图/6.png)</span><br><span class="line"></span><br><span class="line">我们用了rest_framework框架以后，我们的request是重新封装的Request类~</span><br><span class="line"></span><br><span class="line">request.query_params 存放的是我们get请求的参数</span><br><span class="line"></span><br><span class="line">request.data 存放的是我们所有的数据，包括post请求的以及put，patch请求</span><br><span class="line"></span><br><span class="line">相比原来的django的request，我们现在的request更加精简，清晰了</span><br></pre></td></tr></table></figure></p><p>现在我们知道了APIView和View的一些区别<del>当然还有</del>后面还会说~~</p><p>我们写的视图可能对多个表进行增删改查，就导致我们的视图特别多重复的代码~~</p><p>那么我们尝试着来进行封装一下~~</p><h2 id="第一次封装"><a href="#第一次封装" class="headerlink" title="第一次封装"></a>第一次封装</h2><h3 id="APIView视图"><a href="#APIView视图" class="headerlink" title="APIView视图"></a>APIView视图</h3><pre><code>class BookView(APIView):    def get(self, request):        query_set = Book.objects.all()        book_ser = BookSerializer(query_set, many=True)        return Response(book_ser.data)    def post(self, request):        query_set = request.data        book_ser = BookSerializer(data=query_set)        if book_ser.is_valid():            book_ser.save()            return Response(book_ser.validated_data)        else:            return Response(book_ser.errors)class BookEditView(APIView):    def get(self, request, id):        query_set = Book.objects.filter(id=id).first()        book_ser = BookSerializer(query_set)        return Response(book_ser.data)    def patch(self, request, id):        query_set = Book.objects.filter(id=id).first()        book_ser = BookSerializer(query_set, data=request.data, partial=True)        if book_ser.is_valid():            book_ser.save()            return Response(book_ser.validated_data)        else:            return Response(book_ser.errors)    def delete(self, request, id):        query_set = Book.objects.filter(id=id).first()        if query_set:            query_set.delete()            return Response(&quot;&quot;)        else:            return Response(&quot;删除的书籍不存在&quot;)</code></pre><h3 id="第一次封装-1"><a href="#第一次封装-1" class="headerlink" title="第一次封装"></a>第一次封装</h3><pre><code>class GenericAPIView(APIView):    queryset = None    serializer_class = None    def get_queryset(self):        return self.queryset.all()    def get_serializer(self, *args, **kwargs):        return self.serializer_class(*args, **kwargs)class ListModelMixin(object):    def list(self, request, *args, **kwargs):        queryset = self.get_queryset()        serializer = self.get_serializer(queryset, many=True)        return Response(serializer.data)class CreateModelMixin(object):    def create(self, request, *args, **kwargs):        serializer = self.get_serializer(data=request.data)        if serializer.is_valid():            serializer.save()            return Response(serializer.validated_data)        else:            return Response(serializer.errors)class RetrieveModelMixin(object):    def retrieve(self, request, id, *args, **kwargs):        book_obj = self.get_queryset().filter(pk=id).first()        book_ser = self.get_serializer(book_obj)        return Response(book_ser.data)class UpdateModelMixin(object):    def update(self, request, id, *args, **kwargs):        book_obj = self.get_queryset().filter(pk=id).first()        book_ser = self.get_serializer(book_obj, data=request.data, partial=True)        if book_ser.is_valid():            book_ser.save()            return Response(book_ser.validated_data)        else:            return Response(book_ser.errors)class DestroyModelMixin(object):    def destroy(self, request, id, *args, **kwargs):        queryset = self.get_queryset()        try:            queryset.get(pk=id).delete()            return Response(&quot;&quot;)        except Exception as e:            return Response(&quot;信息有误&quot;)# 我们把公共的部分抽出来 这样不管写多少表的增删改查都变的很简单# 这样封装后我们的视图会变成这样class BookView(GenericAPIView, ListModelMixin, CreateModelMixin):    queryset = Book.objects.all()    serializer_class = BookSerializer    def get(self, request, *args, **kwargs):        return self.list(request, *args, **kwargs)    def post(self, request, *args, **kwargs):        return self.create(request, *args, **kwargs)class BookEditView(GenericAPIView, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin):    queryset = Book.objects.all()    serializer_class = BookSerializer    def get(self, request, id, *args, **kwargs):        return self.retrieve(request, id, *args, **kwargs)    def patch(self, request, id, *args, **kwargs):        return self.update(request, id, *args, **kwargs)    def destroy(self, request, id, *args, **kwargs):        return self.delete(request, id, *args, **kwargs)</code></pre><p>我们封装的GenericAPIView，包括封装每个方法的类，其实框架都帮我们封装好了~~</p><p>我们可以直接继承这些类<del>来实现上面的视图</del>可是还有没有更简单的方法呢~我们再次封装一下~~</p><h2 id="第二次封装"><a href="#第二次封装" class="headerlink" title="第二次封装"></a>第二次封装</h2><pre><code># 上面我们写的继承类太长了~~我们再改改class ListCreateAPIView(GenericAPIView, ListModelMixin, CreateModelMixin):    passclass RetrieveUpdateDestroyAPIView(GenericAPIView, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin):    passclass BookView(ListCreateAPIView):    queryset = Book.objects.all()    serializer_class = BookSerializer    def get(self, request, *args, **kwargs):        return self.list(request, *args, **kwargs)    def post(self, request, *args, **kwargs):        return self.create(request, *args, **kwargs)class BookEditView(RetrieveUpdateDestroyAPIView):    queryset = Book.objects.all()    serializer_class = BookSerializer    def get(self, request, id, *args, **kwargs):        return self.retrieve(request, id, *args, **kwargs)    def patch(self, request, id, *args, **kwargs):        return self.update(request, id, *args, **kwargs)    def delete(self, request, id, *args, **kwargs):        return self.delete(request, id, *args, **kwargs)</code></pre><p>这次我们只是让继承变的简单了一点而已，好像并没有什么大的进步~~</p><p>我们可不可以把这两个视图合并成一个视图呢<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">我们看下ViewSetMixin</span><br><span class="line">![](Django-Rest-Framework的路由和视图/7.png)</span><br><span class="line"></span><br><span class="line">    actions这个默认参数其实就是我们路由可以进行传参了</span><br></pre></td></tr></table></figure></p><pre><code>下面这个循环~可以看出~我们要传的参数是一个字段~key应该是我们的请求方式，value应该对应我们处理的方法~这样我们每个视图就不用在写函数了~因为已经和内部实现的函数相对应了~</code></pre><h2 id="第三次封装"><a href="#第三次封装" class="headerlink" title="第三次封装"></a>第三次封装</h2><h3 id="路由-urls-py"><a href="#路由-urls-py" class="headerlink" title="路由 urls.py"></a>路由 urls.py</h3><pre><code>urlpatterns = [    # url(r&apos;^book$&apos;, BookView.as_view()),    # url(r&apos;^book/(?P&lt;id&gt;\d+)$&apos;, BookEditView.as_view()),    url(r&apos;^book$&apos;, BookView.as_view({&quot;get&quot;: &quot;list&quot;, &quot;post&quot;: &quot;create&quot;})),    url(r&apos;^book/(?P&lt;pk&gt;\d+)$&apos;, BookView.as_view({&quot;get&quot;: &quot;retrieve&quot;, &quot;patch&quot;: &quot;update&quot;, &quot;delete&quot;: &quot;destroy&quot;})),]</code></pre><h3 id="第三次封装-1"><a href="#第三次封装-1" class="headerlink" title="第三次封装"></a>第三次封装</h3><pre><code>from rest_framework.viewsets import ViewSetMixin# class BookView(ViewSetMixin, ListCreateAPIView, RetrieveUpdateDestroyAPIView):#     queryset = Book.objects.all()#     serializer_class = BookSerializer# 如果我们再定义一个类class ModelViewSet(ViewSetMixin, ListCreateAPIView, RetrieveUpdateDestroyAPIView):    passclass BookView(ModelViewSet):    queryset = Book.objects.all()    serializer_class = BookSerializer</code></pre><p>我们现在的视图就只要写两行就可以了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其实我们写的所有的视图~框架都帮我们封装好了~</span><br><span class="line"></span><br><span class="line">注意一点~~用框架封装的视图~我们url上的那个关键字参数要用pk~~系统默认的~~</span><br><span class="line"></span><br><span class="line">奉献一张图来看下我们的继承顺序</span><br></pre></td></tr></table></figure></p><p><img src="Django-Rest-Framework的路由和视图/8.png" alt=""></p><h1 id="Django-Rest-Framework的路由"><a href="#Django-Rest-Framework的路由" class="headerlink" title="Django-Rest-Framework的路由"></a>Django-Rest-Framework的路由</h1><p>我们上面的路由传参写的特别多~~框架也帮我们封装好了~</p><pre><code>from .views import BookViewfrom rest_framework.routers import DefaultRouterrouter = DefaultRouter()router.register(r&quot;book&quot;, BookView)urlpatterns = [    # url(r&apos;^book$&apos;, BookView.as_view()),    # url(r&apos;^book/(?P&lt;id&gt;\d+)$&apos;, BookEditView.as_view()),    # url(r&apos;^book$&apos;, BookView.as_view({&quot;get&quot;: &quot;list&quot;, &quot;post&quot;: &quot;create&quot;})),    # url(r&apos;^book/(?P&lt;pk&gt;\d+)$&apos;, BookView.as_view({&quot;get&quot;: &quot;retrieve&quot;, &quot;patch&quot;: &quot;update&quot;, &quot;delete&quot;: &quot;destroy&quot;})),]urlpatterns += router.urls</code></pre><p>我们可以看到通过框架我们可以把路由视图都变的非常简单~~</p><p>但是需要自定制的时候还是需要我们自己用APIView写，当不需要那么多路由的时候，也不要用这种路由注册~~</p><p>总之一切按照业务需要去用~~~ </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-Rest-Framework的视图&quot;&gt;&lt;a href=&quot;#Django-Rest-Framework的视图&quot; class=&quot;headerlink&quot; title=&quot;Django-Rest-Framework的视图&quot;&gt;&lt;/a&gt;Django-Rest-Fr
      
    
    </summary>
    
      <category term="restful framework" scheme="http://yoursite.com/categories/restful-framework/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-cli目录结构总结的步骤</title>
    <link href="http://yoursite.com/2018/11/14/vue-cli%E8%87%AA%E5%B7%B1%E6%80%BB%E7%BB%93%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2018/11/14/vue-cli自己总结的步骤/</id>
    <published>2018-11-14T12:37:04.000Z</published>
    <updated>2018-11-15T06:33:03.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="main-js这是js的入口文件"><a href="#main-js这是js的入口文件" class="headerlink" title="main.js这是js的入口文件"></a>main.js这是js的入口文件</h1><pre><code>// The Vue build version to load with the `import` command// (runtime-only or standalone) has been set in webpack.base.conf with an alias.import Vue from &apos;vue&apos;import App from &apos;./App&apos;import router from &apos;./router&apos;import store from &quot;./store&quot;import axios from &apos;axios&apos;// 使用element-uiimport ElementUI from &apos;element-ui&apos;import &apos;element-ui/lib/theme-chalk/index.css&apos;Vue.use(ElementUI);// 全局的（一个一个比较麻烦）// axios.request({//   url: XXX,//   method: &quot;get&quot;// });// 通过使用原型链 这样所有的组件都可以通过$axios去访问了Vue.prototype.$axios = axios;Vue.config.productionTip = false;/* eslint-disable no-new */new Vue({el: &apos;#app&apos;,router,store,components: { App },template: &apos;&lt;App/&gt;&apos;});</code></pre><h1 id="App-vue页面级App组件"><a href="#App-vue页面级App组件" class="headerlink" title="App.vue页面级App组件"></a>App.vue页面级App组件</h1><pre><code>&lt;template&gt;&lt;div id=&quot;app&quot;&gt;    &lt;MyHeader&gt;&lt;/MyHeader&gt;    &lt;router-view&gt;&lt;/router-view&gt;    &lt;MyFooter&gt;&lt;/MyFooter&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import MyHeader from &quot;./components/MyHeader&quot;import MyFooter from &quot;./components/MyFooter&quot;export default {name: &apos;App&apos;,components: {    MyHeader,    MyFooter,}}&lt;/script&gt;&lt;style&gt;body {    margin: 0;    padding: 0;}&lt;/style&gt;</code></pre><h1 id="router-index-js"><a href="#router-index-js" class="headerlink" title="router-index.js"></a>router-index.js</h1><pre><code>import Vue from &apos;vue&apos;import Router from &apos;vue-router&apos;import Home from &apos;../components/headers/Home&apos;import Course from &apos;../components/headers/Course&apos;Vue.use(Router);export default new Router({routes: [    {    path: &apos;/&apos;,    name: &apos;home&apos;,    component: Home    },    {    path: &apos;/course&apos;,    name: &apos;course&apos;,    component: Course    }]})</code></pre><h1 id="Vuex-axios的使用"><a href="#Vuex-axios的使用" class="headerlink" title="Vuex+axios的使用"></a>Vuex+axios的使用</h1><h2 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h2><pre><code>import Vue from &quot;vue&quot;import Vuex from &quot;vuex&quot;Vue.use(Vuex);export default new Vuex.Store({// this.$store.state.name    拿数据state: {    name: &apos;1&apos;,},// 对state中的数据进行处理// this.$store.getters.new_name    拿数据getters: {    new_name: function (state) {    return state.name + &apos;xxx&apos;;    },    new_new_name: function (state, getters) {    return getters.new_name + &apos;000&apos;;    },},mutations: {    change_data: function (state, data) {    // 自己处理change_data事件的    state.name = data;    }}})</code></pre><h2 id="Course-vue"><a href="#Course-vue" class="headerlink" title="Course.vue"></a>Course.vue</h2><pre><code>&lt;template&gt;&lt;div&gt;&lt;h1&gt;course&lt;/h1&gt;{{name}}{{new_name}}&lt;hr&gt;{{try_again}}&lt;/div&gt;&lt;/template&gt;&lt;script&gt;    export default {        name: &quot;Course&quot;,    data(){        return {            name : this.$store.state.name,            new_name: this.$store.getters.new_new_name,            try_again: &apos;&apos;,        }    },    // 方法执行完会改版数据但是不会刷新    // methods: {    //     my_click: function () {    //       this.$store.commit(&quot;change_data&quot;, &apos;到到&apos;)    //     }    // },    // 能够监听到数据的改变能够实时跟新    // computed: {    //     name: function () {    //       return  this.$store.state.name;    //     }    // }    mounted(){        let that = this;        this.$axios.request({            url: &quot;http://127.0.0.1:8000/tryagain/&quot;,            method: &apos;get&apos;,        }).then(function (data) {            // success do something~~            that.try_again = data.data        }).catch(function (data) {            // fail do something~~        })        // 单纯的发get请求        // this.$axios.get(&quot;url&quot;, {}).then()    }    }&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;main-js这是js的入口文件&quot;&gt;&lt;a href=&quot;#main-js这是js的入口文件&quot; class=&quot;headerlink&quot; title=&quot;main.js这是js的入口文件&quot;&gt;&lt;/a&gt;main.js这是js的入口文件&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;// The
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>git下</title>
    <link href="http://yoursite.com/2018/11/14/git%E4%B8%8B/"/>
    <id>http://yoursite.com/2018/11/14/git下/</id>
    <published>2018-11-14T11:08:25.000Z</published>
    <updated>2018-11-15T06:34:36.337Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h1><pre><code>1）master分支非常稳定的，只用来发布新版本，平时不在上面干活2）dev分支不稳定的，主要在上面干活，每个人都有自己的分支，时不时的往dev分支上合并通常，合并分支时，如果可能，Git会用`Fast forward`模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。&gt; git log --graph --pretty=oneline --abbrev-commit</code></pre><h1 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h1><pre><code>你目前在dev分支上工作，工作到一半，但突然有一个紧急的bug需要修复，可以先保存你的工作现场，修复完bug后，在切回来。步骤：当前在dev分支上：    git stash  # 把当前工作现场“储藏”起来切换到要修复bug的分支（假定master）：    git checkout master    git checkout -b issue-101    .... 修复问题    git add filename    git commit filename把修改合并到修复的分支：    git checkout master    git merge --no-ff -m &quot;merge fix 101 modification&quot; issue-101    git branch -D issue-101切换回工作现场：    git checkout dev    git stash list  # 查看之前保存了哪些工作现场    git stash drop    两种恢复方式：    1）git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除        git stash apply stash@{0}        git stash drop stash@{0}    2）git stash pop，恢复的同时把stash内容也删了</code></pre><h1 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h1><pre><code>与bug分支类似两条命令：1）git branch -d dev_name  # 已经合并完的分支可以使用此命令删除2）git branch -d dev_name  # 强制删除分支（未合并的也可以）</code></pre><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><pre><code>多个人在同一分支上工作，如何正确的合并文件？两种情况：**1）你和他人同时修改同一个文件，他人修改完成，提前推送到远程，如何提交你的修改**详细步骤：    1）试图用git push origin &lt;branch-name&gt;推送自己的修改；    2）如果推送失败，则因为远程分支比你的本地更新，需要先用git pull拉取远程最新的版本；    3）如果合并有冲突，则解决冲突，并在本地提交；    4）没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送**2）你和他人操作的不是同一个文件详细步骤：    1）试图用git push origin &lt;branch-name&gt;推送自己的修改；    2）如果推送失败，先用git pull拉取远程最新的版本；    3）git add .  # 添加本地的全部修改到暂存区    4）git commit -m &quot;说明信息&quot;  # 提交更改至本地    5）git push origin &lt;branch-name&gt;推送本地分支至远程提交更改前，都要先git pull拉取远程最新版本  当从远程克隆时，Git自动把本地的master分支与远程的master分支对应起来，远程仓库的默认名称是origin。查看远程库信息：    git remote -v推送分支：    git push origin master  把本地的mater分支推送到远程对应的master分支上    git push origin dev     把本地的dev分支推送到远程对应的dev分支（远程没有dev分支会自动创建一个dev分支）创建远程origin的dev分支到本地    git checkout -b dev origin/dev指定本地dev分支与远程origin/dev分支的链接    git branch --set-upstream-to origin/dev dev    或    git branch --track origin/dev dev</code></pre><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><pre><code>tag是一个容易记住的有意义的名字，它跟某个commit绑定在一起。打标签：    git tag tag_name  # 默认打在最新提交的commit上,当前HEAD的指向    git tag  # 查看标签    git show tag_name  # 查看标签详细信息在指定的commit上打标签：    git log --pretty=oneline  # 查看commit id    git log -a tag_name -m &quot;explain content&quot; commit_id推送标签：    git push origin tag_name    # 推送一个指定的标签    git push origin --tags      # 推送全部尚未推送到远程的本地标签删除标签：    1) 标签尚未推送到远程    git tag -d tag_name    2）标签已推送到远程    git tag -d tag_name    git push origin :refs/tags/tag_name</code></pre><h1 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h1><pre><code>解决查看log分支多，混乱的问题；遗留</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;分支管理策略&quot;&gt;&lt;a href=&quot;#分支管理策略&quot; class=&quot;headerlink&quot; title=&quot;分支管理策略&quot;&gt;&lt;/a&gt;分支管理策略&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1）master分支
非常稳定的，只用来发布新版本，平时不在上面干活
2）dev分
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Django-Rest-Framework的序列化</title>
    <link href="http://yoursite.com/2018/11/14/Django-Rest-Framework%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2018/11/14/Django-Rest-Framework的序列化/</id>
    <published>2018-11-14T08:34:44.000Z</published>
    <updated>2018-11-15T08:37:00.993Z</updated>
    
    <content type="html"><![CDATA[<p>可以直接看总结</p><h1 id="正常的序列化"><a href="#正常的序列化" class="headerlink" title="正常的序列化"></a>正常的序列化</h1><pre><code>from django.http import HttpResponse, JsonResponsefrom django.views import Viewfrom demo import modelsimport jsonfrom django.core import serializersclass BookView(View):def get(self, request):    book_queryset = models.Book.objects.all().values(&quot;id&quot;, &apos;title&apos;)    book_list = list(book_queryset)    # 方式一    # ret = json.dumps(book_list, ensure_ascii=False)    # return HttpResponse(ret)    # 方式二 Django的序列化    # book_list_obj = models.Book.objects.all()    # ret = serializers.serialize(&apos;json&apos;, book_list_obj, ensure_ascii=False)    # return HttpResponse(ret)    # 方式三    return JsonResponse(book_list, safe=False, json_dumps_params={&quot;ensure_ascii&quot;: False})</code></pre><h1 id="为什么要用序列化组件"><a href="#为什么要用序列化组件" class="headerlink" title="为什么要用序列化组件"></a>为什么要用序列化组件</h1><pre><code>当我们做前后端分离的项目~~我们前后端交互一般都选择JSON数据格式，JSON是一个轻量级的数据交互格式。那么我们给前端数据的时候都要转成json格式，那就需要对我们从数据库拿到的数据进行序列化。接下来我们看下django序列化和rest_framework序列化的对比~~</code></pre><h1 id="Django的序列化方法"><a href="#Django的序列化方法" class="headerlink" title="Django的序列化方法"></a>Django的序列化方法</h1><p>.values序列化结果</p><pre><code>class BooksView(View):    def get(self, request):        book_list = Book.objects.values(&quot;id&quot;, &quot;title&quot;, &quot;chapter&quot;, &quot;pub_time&quot;, &quot;publisher&quot;)        book_list = list(book_list)        # 如果我们需要取外键关联的字段信息 需要循环获取外键 再去数据库查然后拼接成我们想要的        ret = []        for book in book_list:            pub_dict = {}            pub_obj = Publish.objects.filter(pk=book[&quot;publisher&quot;]).first()            pub_dict[&quot;id&quot;] = pub_obj.pk            pub_dict[&quot;title&quot;] = pub_obj.title            book[&quot;publisher&quot;] = pub_dict            ret.append(book)        ret = json.dumps(book_list, ensure_ascii=False, cls=MyJson)        return HttpResponse(ret)# json.JSONEncoder.default()# 解决json不能序列化时间字段的问题class MyJson(json.JSONEncoder):    def default(self, field):        if isinstance(field, datetime.datetime):            return field.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;)        elif isinstance(field, datetime.date):            return field.strftime(&apos;%Y-%m-%d&apos;)        else:            return json.JSONEncoder.default(self, field)</code></pre><p>django serializers</p><pre><code>from django.core import serializers# 能够得到我们要的效果 结构有点复杂class BooksView(View):    def get(self, request):        book_list = Book.objects.all()        ret = serializers.serialize(&quot;json&quot;, book_list)        return HttpResponse(ret)</code></pre><h1 id="DRF序列化的方法"><a href="#DRF序列化的方法" class="headerlink" title="DRF序列化的方法"></a>DRF序列化的方法</h1><p>首先，我们要用DRF的序列化，就要遵循人家框架的一些标准，</p><p>　　– Django我们CBV继承类是View，现在DRF我们要用APIView</p><p>　　– Django中返回的时候我们用HTTPResponse，JsonResponse，render ，DRF我们用Response</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="第一步-声明序列化类"><a href="#第一步-声明序列化类" class="headerlink" title="第一步 声明序列化类"></a>第一步 声明序列化类</h3><pre><code>class BookSerializer(serializers.Serializer):    id = serializers.IntegerField()    title = serializers.CharField(max_length=32)    CHOICES = ((1, &quot;Linux&quot;), (2, &quot;Django&quot;), (3, &quot;Python&quot;))    chapter = serializers.ChoiceField(choices=CHOICES, source=&quot;get_chapter_display&quot;)    pub_time = serializers.DateField()</code></pre><h3 id="第二步-序列化对象"><a href="#第二步-序列化对象" class="headerlink" title="第二步 序列化对象"></a>第二步 序列化对象</h3><pre><code>from rest_framework.views import APIViewfrom rest_framework.response import Responseclass BookView(APIView):    def get(self, request):        book_list = Book.objects.all()        ret = BookSerializer(book_list, many=True)        return Response(ret.data)</code></pre><h2 id="外键关系的序列化"><a href="#外键关系的序列化" class="headerlink" title="外键关系的序列化"></a>外键关系的序列化</h2><pre><code>from rest_framework import serializersfrom .models import Bookclass PublisherSerializer(serializers.Serializer):    id = serializers.IntegerField(read_only=True)    title = serializers.CharField(max_length=32)class UserSerializer(serializers.Serializer):    id = serializers.IntegerField(read_only=True)    name = serializers.CharField(max_length=32)    age = serializers.IntegerField()class BookSerializer(serializers.Serializer):    id = serializers.IntegerField(read_only=True)    title = serializers.CharField(max_length=32)    CHOICES = ((1, &quot;Linux&quot;), (2, &quot;Django&quot;), (3, &quot;Python&quot;))    chapter = serializers.ChoiceField(choices=CHOICES, source=&quot;get_chapter_display&quot;, read_only=True)    pub_time = serializers.DateField()    publisher = PublisherSerializer(read_only=True)    user = UserSerializer(many=True, read_only=True)</code></pre><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><pre><code>当前端给我们发post的请求的时候~前端给我们传过来的数据~我们要进行一些校验然后保存到数据库~这些校验以及保存工作，DRF的Serializer也给我们提供了一些方法了~~首先~我们要写反序列化用的一些字段~有些字段要跟序列化区分开~~Serializer提供了.is_valid()  和.save()方法~~</code></pre><h3 id="save"><a href="#save" class="headerlink" title=".save()"></a>.save()</h3><p>反序列化 serializer.py</p><pre><code>class BookSerializer(serializers.Serializer):    id = serializers.IntegerField(read_only=True)    title = serializers.CharField(max_length=32)    CHOICES = ((1, &quot;Linux&quot;), (2, &quot;Django&quot;), (3, &quot;Python&quot;))    chapter = serializers.ChoiceField(choices=CHOICES, source=&quot;get_chapter_display&quot;, read_only=True)    w_chapter = serializers.IntegerField(write_only=True)    pub_time = serializers.DateField()    publisher = PublisherSerializer(read_only=True)    user = UserSerializer(many=True, read_only=True)    users = serializers.ListField(write_only=True)    publisher_id = serializers.IntegerField(write_only=True)    def create(self, validated_data):        book = Book.objects.create(title=validated_data[&quot;title&quot;], chapter=validated_data[&quot;w_chapter&quot;], pub_time=validated_data[&quot;pub_time&quot;],                                  publisher_id=validated_data[&quot;publisher_id&quot;])        book.user.add(*validated_data[&quot;users&quot;])        return book</code></pre><p>序列化 views.py</p><pre><code>class BookView(APIView):    def get(self, request):        book_list = Book.objects.all()        ret = BookSerializer(book_list, many=True)        return Response(ret.data)    def post(self, request):        # book_obj = request.data        print(request.data)        serializer = BookSerializer(data=request.data)        if serializer.is_valid():            print(12341253)            serializer.save()            return Response(serializer.validated_data)        else:            return Response(serializer.errors)</code></pre><p>当前端给我们发送patch请求的时候，前端传给我们用户要更新的数据，我们要对数据进行部分验证~~</p><h3 id="is-valid"><a href="#is-valid" class="headerlink" title=".is_valid()"></a>.is_valid()</h3><p>PATCH请求serializers.py</p><pre><code>class BookSerializer(serializers.Serializer):    id = serializers.IntegerField(read_only=True)    title = serializers.CharField(max_length=32)    CHOICES = ((1, &quot;Linux&quot;), (2, &quot;Django&quot;), (3, &quot;Python&quot;))    chapter = serializers.ChoiceField(choices=CHOICES, source=&quot;get_chapter_display&quot;, read_only=True)    w_chapter = serializers.IntegerField(write_only=True)    pub_time = serializers.DateField()    publisher = PublisherSerializer(read_only=True)    user = UserSerializer(many=True, read_only=True)    users = serializers.ListField(write_only=True)    publisher_id = serializers.IntegerField(write_only=True)    def create(self, validated_data):        book = Book.objects.create(title=validated_data[&quot;title&quot;], chapter=validated_data[&quot;w_chapter&quot;], pub_time=validated_data[&quot;pub_time&quot;],                                publisher_id=validated_data[&quot;publisher_id&quot;])        book.user.add(*validated_data[&quot;users&quot;])        return book    def update(self, instance, validated_data):        instance.title = validated_data.get(&quot;title&quot;, instance.title)        instance.chapter = validated_data.get(&quot;w_chapter&quot;, instance.chapter)        instance.pub_time = validated_data.get(&quot;pub_time&quot;, instance.pub_time)        instance.publisher_id = validated_data.get(&quot;publisher_id&quot;, instance.publisher_id)        if validated_data.get(&quot;users&quot;):            instance.user.set(validated_data.get(&quot;users&quot;))        instance.save()        return instance</code></pre><p>PATCH请求views.py</p><pre><code>class BookView(APIView):    def patch(self, request):        print(request.data)        book_id = request.data[&quot;id&quot;]        book_info = request.data[&quot;book_info&quot;]        book_obj = Book.objects.filter(pk=book_id).first()        serializer = BookSerializer(book_obj, data=book_info, partial=True)        if serializer.is_valid():            serializer.save()            return Response(serializer.validated_data)        else:            return Response(serializer.errors)</code></pre><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>如果需要对一些字段进行自定义的验证—DRF也给我们提供了钩子方法</p><h3 id="单个字段的验证-局部钩子"><a href="#单个字段的验证-局部钩子" class="headerlink" title="单个字段的验证 局部钩子"></a>单个字段的验证 局部钩子</h3><pre><code>class BookSerializer(serializers.Serializer):    id = serializers.IntegerField(read_only=True)    title = serializers.CharField(max_length=32)    # 省略了一些字段 跟上面代码里一样的    # 。。。。。    def validate_title(self, value):        if &quot;python&quot; not in value.lower():            raise serializers.ValidationError(&quot;标题必须含有Python&quot;)        return value</code></pre><h3 id="多个字段的验证-全局钩子"><a href="#多个字段的验证-全局钩子" class="headerlink" title="多个字段的验证  全局钩子"></a>多个字段的验证  全局钩子</h3><pre><code>class BookSerializer(serializers.Serializer):    id = serializers.IntegerField(read_only=True)    title = serializers.CharField(max_length=32)    CHOICES = ((1, &quot;Linux&quot;), (2, &quot;Django&quot;), (3, &quot;Python&quot;))    chapter = serializers.ChoiceField(choices=CHOICES, source=&quot;get_chapter_display&quot;, read_only=True)    w_chapter = serializers.IntegerField(write_only=True)    pub_time = serializers.DateField()    date_added = serializers.DateField(write_only=True)    # 新增了一个上架时间字段      # 省略一些字段。。都是在原基础代码上增加的    # 。。。。。。    # 对多个字段进行验证 要求上架日期不能早于出版日期 上架日期要大    def validate(self, attrs):        if attrs[&quot;pub_time&quot;] &gt; attrs[&quot;date_added&quot;]:            raise serializers.ValidationError(&quot;上架日期不能早于出版日期&quot;)        return attrs</code></pre><h3 id="验证器-validators"><a href="#验证器-validators" class="headerlink" title="验证器 validators"></a>验证器 validators</h3><pre><code>def my_validate(value):    if &quot;敏感词汇&quot; in value.lower:        raise serializers.ValidationError(&quot;包含敏感词汇，请重新提交&quot;)    return valueclass BookSerializer(serializers.Serializer):    id = serializers.IntegerField(read_only=True)    title = serializers.CharField(max_length=32, validators=[my_validate])    # 。。。。。。</code></pre><h1 id="ModelSerializer"><a href="#ModelSerializer" class="headerlink" title="ModelSerializer"></a>ModelSerializer</h1><pre><code>已经清楚了Serializer的用法，会发现我们所有的序列化跟我们的模型都紧密相关~那么，DRF也给我们提供了跟模型紧密相关的序列化器~~ModelSerializer~~　　-- 它会根据模型自动生成一组字段　　-- 它简单的默认实现了.update()以及.create()方法</code></pre><h2 id="定义一个ModelSerializer序列化器"><a href="#定义一个ModelSerializer序列化器" class="headerlink" title="定义一个ModelSerializer序列化器"></a>定义一个ModelSerializer序列化器</h2><p>定义ModelSerializer</p><pre><code>class BookSerializer(serializers.ModelSerializer):    class Meta:        model = Book        fields = &quot;__all__&quot;        # fields = [&quot;id&quot;, &quot;title&quot;, &quot;pub_time&quot;]        # exclude = [&quot;user&quot;]        # 分别是所有字段 包含某些字段 排除某些字段</code></pre><h2 id="外键关系的序列化-1"><a href="#外键关系的序列化-1" class="headerlink" title="外键关系的序列化"></a>外键关系的序列化</h2><p>注意：当序列化类MATE中定义了depth时，这个序列化类中引用字段（外键）则自动变为只读</p><p>外键关系序列化</p><pre><code>class BookSerializer(serializers.ModelSerializer):    class Meta:        model = Book        fields = &quot;__all__&quot;        # fields = [&quot;id&quot;, &quot;title&quot;, &quot;pub_time&quot;]        # exclude = [&quot;user&quot;]        # 分别是所有字段 包含某些字段 排除某些字段        depth = 1# depth 代表找嵌套关系的第几层</code></pre><h2 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h2><p>我们可以声明一些字段来覆盖默认字段，来进行自定制~</p><p>比如我们的选择字段，默认显示的是选择的key，我们要给用户展示的是value。</p><p>自定义字段</p><pre><code>class BookSerializer(serializers.ModelSerializer):    chapter = serializers.CharField(source=&quot;get_chapter_display&quot;, read_only=True)    class Meta:        model = Book        fields = &quot;__all__&quot;        # fields = [&quot;id&quot;, &quot;title&quot;, &quot;pub_time&quot;]        # exclude = [&quot;user&quot;]        # 分别是所有字段 包含某些字段 排除某些字段        depth = 1</code></pre><h2 id="Meta中其它关键字参数"><a href="#Meta中其它关键字参数" class="headerlink" title="Meta中其它关键字参数"></a>Meta中其它关键字参数</h2><p>Meta中参数</p><pre><code>class BookSerializer(serializers.ModelSerializer):    chapter = serializers.CharField(source=&quot;get_chapter_display&quot;, read_only=True)    class Meta:        model = Book        fields = &quot;__all__&quot;        # fields = [&quot;id&quot;, &quot;title&quot;, &quot;pub_time&quot;]        # exclude = [&quot;user&quot;]        # 分别是所有字段 包含某些字段 排除某些字段        depth = 1        read_only_fields = [&quot;id&quot;]        extra_kwargs = {&quot;title&quot;: {&quot;validators&quot;: [my_validate,]}}</code></pre><h2 id="post以及patch请求"><a href="#post以及patch请求" class="headerlink" title="post以及patch请求"></a>post以及patch请求</h2><p>由于depth会让我们外键变成只读，所以我们再定义一个序列化的类，其实只要去掉depth就可以了~~</p><p>post/patch请求序列化类</p><pre><code>class BookSerializer(serializers.ModelSerializer):    chapter = serializers.CharField(source=&quot;get_chapter_display&quot;, read_only=True)    class Meta:        model = Book        fields = &quot;__all__&quot;        # fields = [&quot;id&quot;, &quot;title&quot;, &quot;pub_time&quot;]        # exclude = [&quot;user&quot;]        # 分别是所有字段 包含某些字段 排除某些字段        read_only_fields = [&quot;id&quot;]        extra_kwargs = {&quot;title&quot;: {&quot;validators&quot;: [my_validate,]}}</code></pre><h2 id="SerializerMethodField"><a href="#SerializerMethodField" class="headerlink" title="SerializerMethodField"></a>SerializerMethodField</h2><p>外键关联的对象有很多字段我们是用不到的~都传给前端会有数据冗余~就需要我们自己去定制序列化外键对象的哪些字段~~</p><p>SerializerMethodField</p><pre><code>class BookSerializer(serializers.ModelSerializer):    chapter = serializers.CharField(source=&quot;get_chapter_display&quot;, read_only=True)    user = serializers.SerializerMethodField()    publisher = serializers.SerializerMethodField()    # get_是重写字段的钩子方法    def get_user(self, obj):        # obj是当前序列化的book对象        users_query_set = obj.user.all()        return [{&quot;id&quot;: user_obj.pk, &quot;name&quot;: user_obj.name} for user_obj in users_query_set]    def get_publisher(self, obj):        publisher_obj = obj.publisher        return {&quot;id&quot;: publisher_obj.pk, &quot;title&quot;: publisher_obj.title}    class Meta:        model = Book        fields = &quot;__all__&quot;        # fields = [&quot;id&quot;, &quot;title&quot;, &quot;pub_time&quot;]        # exclude = [&quot;user&quot;]        # 分别是所有字段 包含某些字段 排除某些字段        read_only_fields = [&quot;id&quot;]        extra_kwargs = {&quot;title&quot;: {&quot;validators&quot;: [my_validate,]}}</code></pre><h2 id="用ModelSerializer改进上面Serializer的完整版"><a href="#用ModelSerializer改进上面Serializer的完整版" class="headerlink" title="用ModelSerializer改进上面Serializer的完整版"></a>用ModelSerializer改进上面Serializer的完整版</h2><p>ModelSerializer</p><pre><code>class BookSerializer(serializers.ModelSerializer):    dis_chapter = serializers.SerializerMethodField(read_only=True)    users = serializers.SerializerMethodField(read_only=True)    publishers = serializers.SerializerMethodField(read_only=True)    def get_users(self, obj):        # obj是当前序列化的book对象        users_query_set = obj.user.all()        return [{&quot;id&quot;: user_obj.pk, &quot;name&quot;: user_obj.name} for user_obj in users_query_set]    def get_publishers(self, obj):        publisher_obj = obj.publisher        return {&quot;id&quot;: publisher_obj.pk, &quot;title&quot;: publisher_obj.title}    def get_dis_chapter(self, obj):        return obj.get_chapter_display()    class Meta:        model = Book        # fields = &quot;__all__&quot;        # 字段是有序的        fields = [&quot;id&quot;, &quot;title&quot;,&quot;dis_chapter&quot;, &quot;pub_time&quot;, &quot;publishers&quot;, &quot;users&quot;,&quot;chapter&quot;, &quot;user&quot;, &quot;publisher&quot;]        # exclude = [&quot;user&quot;]        # 分别是所有字段 包含某些字段 排除某些字段        read_only_fields = [&quot;id&quot;, &quot;dis_chapter&quot;, &quot;users&quot;, &quot;publishers&quot;]        extra_kwargs = {&quot;title&quot;: {&quot;validators&quot;: [my_validate,]}, &quot;user&quot;: {&quot;write_only&quot;: True}, &quot;publisher&quot;: {&quot;write_only&quot;: True},                        &quot;chapter&quot;: {&quot;write_only&quot;: True}}</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h2><pre><code>class Book(models.Model):    title = models.CharField(max_length=32)    CHOICE = ((1, &quot;python&quot;), (2, &quot;Linux&quot;), (3, &apos;Go&apos;))    category = models.IntegerField(choices=CHOICE)    pub_time = models.DateField()    publisher = models.ForeignKey(to=&apos;Publisher&apos;)    authors = models.ManyToManyField(to=&quot;Author&quot;)class Publisher(models.Model):    title = models.CharField(max_length=32)class Author(models.Model):    name = models.CharField(max_length=32)</code></pre><h2 id="同一个views-py"><a href="#同一个views-py" class="headerlink" title="同一个views.py"></a>同一个views.py</h2><pre><code>from demo import modelsfrom rest_framework.views import APIViewfrom rest_framework.response import Responsefrom serdemo import serializers# 展示增加全部数据class BookView(APIView):    def get(self, request):        book_queryset = models.Book.objects.all()        # many=True代表可以序列化多个数据        ser_obj = serializers.BookSerializer(book_queryset, many=True)        return Response(ser_obj.data)    def post(self, request):        # 确定数据类型已经数据结构        # 对妹子传来的数据进行校验        book_obj = request.data        ser_obj = serializers.BookSerializer(data=book_obj)        if ser_obj.is_valid():            ser_obj.save()            # 校验通过的数据            return Response(ser_obj.validated_data)        return Response(ser_obj.errors)# 展示和编辑某条数据class BookEditView(APIView):    def get(self, request, id):        book_obj = models.Book.objects.filter(id=id).first()        ser_obj = serializers.BookSerializer(book_obj)        return Response(ser_obj.data)    def put(self, request, id):        book_obj = models.Book.objects.filter(id=id).first()        # partial=True 代表的是可以改部分数据        ser_obj = serializers.BookSerializer(instance=book_obj, data=request.data, partial=True)        if ser_obj.is_valid():            ser_obj.save()            return Response(ser_obj.validated_data)        return Response(ser_obj.errors)</code></pre><h2 id="普通版Serializer"><a href="#普通版Serializer" class="headerlink" title="普通版Serializer"></a>普通版Serializer</h2><pre><code>from rest_framework import serializersfrom demo import modelsclass PublisherSerializer(serializers.Serializer):    id = serializers.IntegerField()    title = serializers.CharField(max_length=32)class AuthorSerializer(serializers.Serializer):    id = serializers.IntegerField()    name = serializers.CharField(max_length=32)# 自定义校验def my_validate(value):    if &quot;敏感词汇&quot; in value.lower():        raise serializers.ValidationError(&quot;包含敏感词汇，请重新提交&quot;)    return valueclass BookSerializer(serializers.Serializer):    # required=False 反序列化的时候可以没有,只序列化用不走校验    id = serializers.IntegerField(required=False)    title = serializers.CharField(max_length=32, validators=[my_validate])    pub_time = serializers.DateField()    # read_only=True 序列化用，反序列化的时候不要了    category = serializers.CharField(source=&quot;get_category_display&quot;, read_only=True)    # write_only=True 反序列化 的时候用    post_category = serializers.IntegerField(write_only=True)    publisher = PublisherSerializer(read_only=True)    authors = AuthorSerializer(many=True, read_only=True)    publisher_id = serializers.IntegerField(write_only=True)    author_list = serializers.ListField(write_only=True)    # 重写create方法  创建新数据的时候  validated_data就是传来的数据    def create(self, validated_data):        # validated_data 校验通过的数据 就是book_obj        # 同ORM操作给Book表新增数据        book_obj = models.Book.objects.create(            title=validated_data[&apos;title&apos;],            pub_time=validated_data[&apos;pub_time&apos;],            category=validated_data[&apos;post_category&apos;],            publisher_id=validated_data[&apos;publisher_id&apos;]        )        book_obj.authors.add(*validated_data[&apos;author_list&apos;])        return book_obj    # 重写update方法  更新数据的时候    def update(self, instance, validated_data):        # instance 更新的book_obj对象        # validated_data 校验通过的数据        # ORM做更新操作        instance.title = validated_data.get(&apos;title&apos;, instance.title)        instance.pub_time = validated_data.get(&apos;pub_time&apos;, instance.pub_time)        instance.category = validated_data.get(&apos;post_category&apos;, instance.category)        instance.publisher_id = validated_data.get(&apos;publisher_id&apos;, instance.publisher_id)        if validated_data.get(&apos;author_list&apos;):            instance.authors.set(validated_data[&apos;author_list&apos;])        instance.save()        return instance    # 局部钩子校验    单个字段   数据校验    def validate_title(self, value):        # value 就是title 的值 对value处理        if &quot;python&quot; not in value.lower():            raise serializers.ValidationError(&apos;标题必须包含python&apos;)        return value    # 全局钩子校验    全部字段   数据校验    def validate(self, attrs):        # attr 字典有你传过来的所有的字段        if &quot;python&quot; in attrs[&quot;title&quot;].lower():            return attrs        else:            raise serializers.ValidationError(&quot;分类或标题不合符要求&quot;)</code></pre><h2 id="升级版ModelSerializer"><a href="#升级版ModelSerializer" class="headerlink" title="升级版ModelSerializer"></a>升级版ModelSerializer</h2><pre><code>from rest_framework import serializersfrom demo import modelsclass PublisherSerializer(serializers.Serializer):    id = serializers.IntegerField()    title = serializers.CharField(max_length=32)class AuthorSerializer(serializers.Serializer):    id = serializers.IntegerField()    name = serializers.CharField(max_length=32)# 自定义校验def my_validate(value):    if &quot;敏感词汇&quot; in value.lower():        raise serializers.ValidationError(&quot;包含敏感词汇，请重新提交&quot;)    return valueclass BookSerializer(serializers.ModelSerializer):    # 重写正序    category_info = serializers.SerializerMethodField(read_only=True)    publisher_info = serializers.SerializerMethodField(read_only=True)    authors_info = serializers.SerializerMethodField(read_only=True)    def get_category_info(self, obj):        # obj 就是序列化的每一个Book对象        return obj.get_category_display()    def get_publisher_info(self, obj):        # obj 就是序列化的每一个Book对象        publisher_obj = obj.publisher        return {&quot;id&quot;: publisher_obj.pk, &quot;title&quot;: publisher_obj.title}    def get_authors_info(self, obj):        # obj 就是序列化的每一个Book对象        author_qureryset = obj.authors.all()        return [{&quot;id&quot;: author_obj.pk, &quot;name&quot;: author_obj.name} for author_obj in author_qureryset]    class Meta:        model = models.Book        fields = &quot;__all__&quot;        # exclude=[&quot;id&quot;]        # 会让所有的外键关系变成只读read_only=True        # depth = 1　　 # 向下找几层        # 反序列化的时候不用自己定义的，而是还是用原来的字段        extra_kwargs = {&quot;title&quot;: {&quot;validators&quot;: [my_validate]}, &quot;publisher&quot;: {&quot;write_only&quot;: True}, &quot;authors&quot;: {&quot;write_only&quot;: True},                        &quot;category&quot;: {&quot;write_only&quot;: True}}    # 验证    # 局部钩子校验    单个字段    def validate_title(self, value):        # value 就是title 的值 对value处理        if &quot;python&quot; not in value.lower():            raise serializers.ValidationError(&apos;标题必须包含python&apos;)        return value    # 全局钩子校验    全部字段    def validate(self, attrs):        # attr 字典有你传过来的所有的字段        if &quot;python&quot; in attrs[&quot;title&quot;].lower():            return attrs        else:            raise serializers.ValidationError(&quot;分类或标题不合符要求&quot;)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可以直接看总结&lt;/p&gt;
&lt;h1 id=&quot;正常的序列化&quot;&gt;&lt;a href=&quot;#正常的序列化&quot; class=&quot;headerlink&quot; title=&quot;正常的序列化&quot;&gt;&lt;/a&gt;正常的序列化&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from django.http import HttpR
      
    
    </summary>
    
      <category term="restful framework" scheme="http://yoursite.com/categories/restful-framework/"/>
    
    
  </entry>
  
  <entry>
    <title>conda常用命令</title>
    <link href="http://yoursite.com/2018/11/14/conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/11/14/conda常用命令/</id>
    <published>2018-11-14T08:03:33.000Z</published>
    <updated>2018-11-15T06:34:58.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看-conda-版本号"><a href="#查看-conda-版本号" class="headerlink" title="查看 conda 版本号"></a>查看 conda 版本号</h1><p>conda -V<br>conda –version</p><h1 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h1><ol><li>查看当前有哪些环境<blockquote><p>conda env list 或<br>conda info -e</p><p>实际执行命令示例:<br>➜  ~ conda env list</p><h1 id="conda-environments"><a href="#conda-environments" class="headerlink" title="conda environments:"></a>conda environments:</h1><p>#<br>base                  *  /anaconda3<br>flaskdev                 /anaconda3/envs/flaskdev<br>pythonRoad               /anaconda3/envs/pythonRoad<br>test_py2                 /anaconda3/envs/test_py2</p></blockquote></li></ol><blockquote><p>➜  ~ conda info -e</p><h1 id="conda-environments-1"><a href="#conda-environments-1" class="headerlink" title="conda environments:"></a>conda environments:</h1><p>#<br>base                  *  /anaconda3<br>flaskdev                 /anaconda3/envs/flaskdev<br>pythonRoad               /anaconda3/envs/pythonRoad<br>test_py2                 /anaconda3/envs/test_py2</p></blockquote><ol start="2"><li><p>查看环境管理的命令帮助</p><blockquote><p>conda env -h</p></blockquote></li><li><p>创建环境</p><blockquote><p>conda create –name your_env_name</p></blockquote></li><li><p>创建指定 python 版本的环境</p><blockquote><p>conda create –name your_env_name python=2.7<br>conda create –name your_env_name python=3.6</p></blockquote></li><li><p>创建包含某些包的环境</p><blockquote><p>conda create –name your_env_name numpy scrapy</p></blockquote></li><li><p>创建指定版本下包含某些包的环境</p><blockquote><p>conda create –name your_env_name python=3.6 numpy scrapy</p></blockquote></li><li><p>激活某个环境</p><blockquote><p>source activate target_env_name</p></blockquote></li><li><p>关闭激活的环境</p><blockquote><p>source deactivate target_env_name</p></blockquote></li><li><p>复制某个环境</p><blockquote><p>conda create –name new_env_name –clone old_env_name</p></blockquote></li><li><p>删除某个环境</p><blockquote><p>conda remove –name target_env_name –all</p></blockquote></li></ol><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><ol><li><p>列举当前活跃环境下的所有包</p><blockquote><p>conda list</p></blockquote></li><li><p>列举一个指定环境下的所有包</p><blockquote><p>conda list -n your_env_name</p></blockquote></li><li><p>为激活环境安装某个包</p><blockquote><p>conda install package_name</p></blockquote></li><li><p>为指定环境安装某个包</p><blockquote><p>conda install –name target_env_name package_name</p></blockquote></li><li><p>更新当前环境某个包</p><blockquote><p>conda update package_name</p></blockquote></li><li><p>更新指定环境某个包</p><blockquote><p>conda update -n target_env_name package_name</p></blockquote></li><li><p>删除当前环境某个包</p><blockquote><p>conda remove package_name<br>注意: 如果是通过pip安装的包,移除时也请使用 pip uninstall package_name 命令移除,如果使用 conda remove 可能会发生异常,导致conda不可用</p></blockquote></li><li><p>删除指定环境某个包</p><blockquote><p>conda remove -n target_env_name package_name</p></blockquote></li><li><p>搜索某个包信息</p><blockquote><p>conda search package_name</p></blockquote></li><li><p>更新anaconda</p><blockquote><p>conda update anaconda</p></blockquote></li><li><p>更新python至最新版本</p><blockquote><p>conda update python</p></blockquote></li><li><p>更新所有包</p><blockquote><p>conda update –all</p></blockquote></li></ol><h1 id="分享环境"><a href="#分享环境" class="headerlink" title="分享环境"></a>分享环境</h1><p>把自己的环境分享给别人,方便他人快速建立与你一模一样的环境(同一个版本的python及各种包). 一个分享环境快速的方法就是给他人一个你要分享环境的.yml文件<br>步骤:<br>1) 生成欲分享环境的yml文件</p><blockquote><p>conda env export &gt; environment.yml</p></blockquote><p>2) 他人在自己本地使用yml文件创建文件</p><blockquote><p>conda env create -f environment.yml</p></blockquote><hr><p>参考博客: <a href="https://blog.csdn.net/menc15/article/details/71477949/" target="_blank" rel="noopener">https://blog.csdn.net/menc15/article/details/71477949/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查看-conda-版本号&quot;&gt;&lt;a href=&quot;#查看-conda-版本号&quot; class=&quot;headerlink&quot; title=&quot;查看 conda 版本号&quot;&gt;&lt;/a&gt;查看 conda 版本号&lt;/h1&gt;&lt;p&gt;conda -V&lt;br&gt;conda –version&lt;/p&gt;
      
    
    </summary>
    
      <category term="conda" scheme="http://yoursite.com/categories/conda/"/>
    
    
  </entry>
  
  <entry>
    <title>RESTful规范</title>
    <link href="http://yoursite.com/2018/11/14/RESTful%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/11/14/RESTful规范/</id>
    <published>2018-11-14T03:30:06.000Z</published>
    <updated>2018-11-15T06:35:39.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web服务交互"><a href="#web服务交互" class="headerlink" title="web服务交互"></a>web服务交互</h1><pre><code>　　我们在浏览器中能看到的每个网站，都是一个web服务。那么我们在提供每个web服务的时候，　　都需要前后端交互，前后端交互就一定有一些实现方案，我们通常叫web服务交互方案。　　目前主流的三种web服务交互方案：　　　　-- REST （ Representational State Transfer）表述性状态转移　　　　-- SOAP （Simple Object Access Protocol）  简单的对象访问协议　　　　-- XML-RPC （XML Remote Procedure Call）基于XML的远程过程调用　　XML-RPC是通过XML将调用函数封装，并使用HTTP协议作为传送机制。　　后来在新的功能不断被引入下，这个标准慢慢演变成为今日的SOAP协定。　　SOAP服务则是以本身所定义的操作集，来访问网络上的资源。　　SOAP也是基于XML的，但是它不只限于HTTP协议的传输，包括TCP协议，UDP协议都可以传输。　　REST是Roy Thomas Fielding博士于2000年在他的博士论文里提出来的。　　REST相比SOAP更加简洁，性能和开发效率也有突出的优势。　　我们今天主要说一下这个REST，现在越来越多的web服务开始采用REST风格设计和实现。　　例如，amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。　　我们接下来要学的框架也是遵循REST风格的，那么我们来看下它到底是个什么样的风格，　　了解了它是什么后，我们看下它的优点是什么，我们为什么用它。</code></pre><h1 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h1><pre><code>表述性状态转移资源 网页中能看到的都是资源    URL 统一资源定位符    URI 统一资源标识符统一资源接口    对资源的操作根据HTTP请求方式的不同来进行不同的操作    遵循HTTP请求方式的语义前后端传输的是资源的表述展现的是资源的状态通过超链接的指引来告诉用户接下来有哪些资源状态可以进入</code></pre><h1 id="凡是遵循TEST风格实现的前后端交互都叫RESTful架构"><a href="#凡是遵循TEST风格实现的前后端交互都叫RESTful架构" class="headerlink" title="凡是遵循TEST风格实现的前后端交互都叫RESTful架构"></a>凡是遵循TEST风格实现的前后端交互都叫RESTful架构</h1><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><pre><code>面向资源去编程  url中尽量名词不要动词根据HTTP请求方式的不同对资源进行不同的操作</code></pre><h2 id="在url中体现的"><a href="#在url中体现的" class="headerlink" title="在url中体现的"></a>在url中体现的</h2><pre><code>体现版本    https://v3.bootcss.com/    https://.bootcss.com/v3体现是否是API     https://v3.bootcss.com/api有过滤条件     https://v3.bootcss.com/course?page=1尽量用https</code></pre><h2 id="在返回值中"><a href="#在返回值中" class="headerlink" title="在返回值中"></a>在返回值中</h2><pre><code>携带状态码    1**   信息，服务器收到请求，需要请求者继续执行操作　　 2**  成功，操作被成功接收并处理　　 3**  重定向，需要进一步的操作以完成请求　　 4**  客户端错误，请求包含语法错误或无法完成请求　　 5**  服务器错误，服务器在处理请求的过程中发生了错误返回值    get  返回查看的所有或者单条数据    post 返回新增的这条数据    put/patch 返回更新的这条数据     delete 返回值空携带错误信息携带超链接    在不分离的项目用的多　　ret = {        code: 1000,        data:{            id:1,            name:&apos;小强&apos;,            depart_id:http://www.luffycity.com/api/v1/depart/8/        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;web服务交互&quot;&gt;&lt;a href=&quot;#web服务交互&quot; class=&quot;headerlink&quot; title=&quot;web服务交互&quot;&gt;&lt;/a&gt;web服务交互&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;　　我们在浏览器中能看到的每个网站，都是一个web服务。那么我们在提供每个web服务
      
    
    </summary>
    
      <category term="restful framework" scheme="http://yoursite.com/categories/restful-framework/"/>
    
    
  </entry>
  
  <entry>
    <title>Vuex+axios</title>
    <link href="http://yoursite.com/2018/11/13/Vuex-axios/"/>
    <id>http://yoursite.com/2018/11/13/Vuex-axios/</id>
    <published>2018-11-13T13:54:25.000Z</published>
    <updated>2018-11-15T06:36:23.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuex-简介"><a href="#Vuex-简介" class="headerlink" title="Vuex 简介"></a>Vuex 简介</h1><pre><code>vuex是一个专门为Vue.js设计的集中式状态管理架构。状态？ 我们把它理解为在data中需要共享给其他组件使用的部分。Vuex和单纯的全局对象有以下不同：1、Vuex 的状态存储是响应式的。当vue组件从store中读取状态的时候，若store中的状态发生变化，那么相应的组件也会相应的得到高效更新。2、你不能直接改变store中的状态。改变store中的状态的唯一途径就是显示的提交(commit)mutation。这样使得我们可以方便的跟踪每一个状态的变化，从而让我们能够实现一些工具来帮助我们更好的了解我们的应用。</code></pre><h2 id="安装使用vuex"><a href="#安装使用vuex" class="headerlink" title="安装使用vuex"></a>安装使用vuex</h2><p>–  npm install vuex</p><pre><code>vuex的使用一// main.jsimport Vue from &apos;vue&apos;import App from &apos;./App&apos;import router from &apos;./router&apos;import vuex from &apos;vuex&apos;Vue.use(vuex)Vue.config.productionTip = falseconst store = new vuex.Store({    state: {    show: false,    }});new Vue({el: &apos;#app&apos;,router,store,components: { App },template: &apos;&lt;App/&gt;&apos;});vuex的使用二// 为了方便维护，我们通常把在src下面新建一个store文件夹，// 然后在里面新建一个index.jsimport Vue from &apos;vue&apos;import Vue_x from &quot;vuex&quot;Vue.use(Vue_x);export default  new Vue_x.Store({state: {    show: false,    },});// 那么main.js要改成import Vue from &apos;vue&apos;import App from &apos;./App&apos;import router from &apos;./router&apos;import store from &quot;./store&quot;Vue.config.productionTip = false;new Vue({el: &apos;#app&apos;,router,store,components: { App },template: &apos;&lt;App/&gt;&apos;});</code></pre><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><pre><code>简而言之~~state是保存我们data中需要共享的数据。由于Vuex的存储是响应式的，从store实例中读取状态的最简单的方式就是在计算属性中返回某个状态。this.$store.state.count</code></pre><p>组件中获取vuex中状态</p><pre><code>// 创建一个组件const Counter = {template: `&lt;div&gt;{{ count }}&lt;/div&gt;`,computed: {    count(){    return this.$store.state.count    }}};</code></pre><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>有时候我们需要从store中的state中派生出一些状态，例如对数据进行简单的计算。</p><p>并且很多组件都需要用到此方法，我们要么复制这个函数，要么抽取到一个公共函数，多处导入。</p><p>我们vuex提供了更加方便的方法，getter ，它就像计算属性一样，getter的返回值会根据它的依赖被</p><p>缓存起来，只有它的依赖发生改变时，才会重新计算。</p><p>Getter会接收state作为其第一个参数：</p><pre><code>import Vue from &apos;vue&apos;import Vue_x from &quot;vuex&quot;Vue.use(Vue_x);export default  new Vue_x.Store({state: {    count: 20,},// 通过 this.$store.getters.my_funcgetters: {    my_func: function (state) {    return state.count * 2    }},});</code></pre><p>Getter也可以接收getters为第二个参数：</p><pre><code>import Vue from &apos;vue&apos;import Vue_x from &quot;vuex&quot;Vue.use(Vue_x);export default  new Vue_x.Store({state: {    count: 20,},// 通过 this.$store.getters.my_funcgetters: {    my_func: function (state) {    return state.count * 2    },    // 通过 this.$store.getters.my_func_count    my_func_count: function (state, getters) {    return getters.my_func.length    }},});</code></pre><h2 id="Mutatiion"><a href="#Mutatiion" class="headerlink" title="Mutatiion"></a>Mutatiion</h2><p>更改Vuex中的store中的状态的唯一方法是提交mutation。</p><p>每个mutation都有一个字符串的事件类型(type)，和一个回调函数handler。</p><p>也就是说我们要触发mutation中定义的方法(type)，然后才会执行这个方法(handler)。</p><p>这个方法就是我们更改状态的地方，它会接收state为第一个参数，后面接收其他参数：</p><pre><code>Mutation基本使用import Vue from &apos;vue&apos;import Vue_x from &quot;vuex&quot;Vue.use(Vue_x);export default  new Vue_x.Store({state: {    count: 20,},// 需要通过 this.$store.commit(&apos;increment&apos;, 10)mutations: {    increment (state, n) {    // 变更状态    state.count += n    }}});</code></pre><p>Mutation需要遵守Vue的响应规则</p><p>既然vuex中的store中的状态是响应式的，那么当我们状态变更时，监视状态的vue组件也会更新。</p><p>这就意味着vuex中的mutation也需要与使用vue一样遵守一些注意事项：</p><p>　　– 1，最好提前在你的store中初始化好所有的所需要的属性</p><p>　　– 2，当对象需要添加属性时，你应该使用</p><p>　　　　　　–  Vue.set(obj, ‘newProp’, 123)</p><p>　　　　　　–  以新对象代替老对象  state.obj = { …state.obj, newProp: 123}</p><h1 id="axios的简单使用"><a href="#axios的简单使用" class="headerlink" title="axios的简单使用"></a>axios的简单使用</h1><p>基于Promise的HTTP请求客户端，可以同时在浏览器和node.js使用。</p><p>##　使用npm安装axios</p><p>– npm install axios -D</p><h2 id="基本的配置"><a href="#基本的配置" class="headerlink" title="基本的配置"></a>基本的配置</h2><pre><code>// main.jsimport axios from &quot;axios&quot;Vue.prototype.$axios = axios// 组件中methods: {    init () {        this.$axios({            method: &quot;get&quot;,            url: &quot;/user&quot;        })    },};</code></pre><h2 id="基本的使用"><a href="#基本的使用" class="headerlink" title="基本的使用"></a>基本的使用</h2><p>get请求</p><pre><code>test(){      this.$axios.get(this.$store.state.apiList.course,{        params: {          id: 123,        }      }).then(function (response) {        // 请求成功回调函数      }).catch(function (response) {        // 请求失败的回调函数      })}</code></pre><p>post请求</p><pre><code>test(){      this.$axios.post(this.$store.state.apiList.course,{          course_title: &quot;Python&quot;,          course_price: &quot;19.88&quot;      }).then(function (response) {        // 请求成功回调函数      }).catch(function (response) {        // 请求失败的回调函数      })}</code></pre><p>发送多个并发请求</p><pre><code>function getCourse(){      return this.$axios.get(&apos;/course/12&apos;)    }function getCourse_all() {        return this.$axios.get(&apos;/course&apos;)        }this.$axios.all([getCourse_all(),getCourse()])        .then().catch()</code></pre><p>axios.request</p><pre><code>methods: {      init(){        var that = this        this.$axios.request({          url: that.$store.state.apiList.course,          method: &apos;get&apos;        }).then(function (data) {          if (data.status === 200){              that.courseList = data.data          }        }).catch(function (reason) {          console.log(reason)        })      }},</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vuex-简介&quot;&gt;&lt;a href=&quot;#Vuex-简介&quot; class=&quot;headerlink&quot; title=&quot;Vuex 简介&quot;&gt;&lt;/a&gt;Vuex 简介&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;vuex是一个专门为Vue.js设计的集中式状态管理架构。
状态？ 我们把它理解
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>npm+webpack+vue-cli快速上手</title>
    <link href="http://yoursite.com/2018/11/13/npm-webpack-vue-cli%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://yoursite.com/2018/11/13/npm-webpack-vue-cli快速上手/</id>
    <published>2018-11-13T12:53:56.000Z</published>
    <updated>2018-11-15T06:37:09.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js-npm"><a href="#Node-js-npm" class="headerlink" title="Node.js   npm"></a>Node.js   npm</h1><h2 id="什么是Node-js-以及npm"><a href="#什么是Node-js-以及npm" class="headerlink" title="什么是Node.js  以及npm"></a>什么是Node.js  以及npm</h2><pre><code>简单的来说 Node.js 就是运行在服务端的JavaScript，基于Chrome V8 引擎的。npm 是Node.js 的包管理工具。</code></pre><h2 id="npm的安装和更新"><a href="#npm的安装和更新" class="headerlink" title="npm的安装和更新"></a>npm的安装和更新</h2><pre><code>Node.js下载安装   Node.js 官网下载安装。npm自带的包管理工具。查看安装版本信息：</code></pre><p>　　    –  node -v  查看Node.js 版本信息</p><p>　　    –  npm -v  查看npm版本信息</p><pre><code>更新npm到指定版本：</code></pre><p>　　    –  npm install <a href="mailto:npm@5.3.0" target="_blank" rel="noopener">npm@5.3.0</a> -g</p><p>　　    – npm install npm@latest -g 更新最新的稳定版本</p><h2 id="npm-常用操作"><a href="#npm-常用操作" class="headerlink" title="npm 常用操作"></a>npm 常用操作</h2><pre><code>之前我们用JQuery或者Bootstrap用cdn 或者直接手动下载并放入项目，而且要管理版本。有了npm，我们管理自己的依赖包以及版本更加简单。到自己项目目录下，进行以下命令：</code></pre><p>　　    – npm init -y    输入-y使用默认配置项 生成package.json文件。</p><p>　　    – npm i <a href="mailto:jquery@0.0.0" target="_blank" rel="noopener">jquery@0.0.0</a>   简写install 为 i 下载依赖  不写@ 默认最新版本</p><p>　　    – npm uninstall jquery  卸载依赖包</p><p>　　    – npm update jquery   更新依赖包</p><p>　　    – npm list  列出已安装的依赖</p><p>　　    – npm install webpack –D 保存为开发环境依赖</p><p>　　    – 老版本需要 –save 参数 现在不需要了</p><pre><code>我们的项目目录下会生成一个 node_modules 目录，我们用npm下的包会在这个目录下。我们所有的依赖信息放在package.json文件中，包括我们所有的依赖以及版本。如果我们删掉 node_modules目录，可以使用 npm i  来下载所有依赖。</code></pre><h2 id="npm-常用配置项"><a href="#npm-常用配置项" class="headerlink" title="npm 常用配置项"></a>npm 常用配置项</h2><pre><code>当我们用npm init 的时候用了参数 -y，如果不用-y我们可以进行一些配置。在我们的package.json文件中有很多配置项</code></pre><p>　　    – name  项目名字 中间不能有空格只能用小写</p><p>　　    – version  项目版本</p><p>　　    – description   项目描述信息</p><p>　　    – main  项目的入口文件</p><p>　　    – scripts 指定命令的快捷方式 npm run test     test是scripts里的键名 值为具体命令</p><p>　　    – author 作者</p><p>　　    – license  许可证</p><p>　　    – dependencies  生成环境依赖的包以及版本信息</p><p>　　    – devDependencies  开发环境的依赖</p><h1 id="webpack3"><a href="#webpack3" class="headerlink" title="webpack3"></a>webpack3</h1><h2 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h2><p>webpack是一个模块打包器，它将根据模块的依赖关系进行静态分析，</p><p>然后将这些模块按照指定的规则生成静态资源。</p><p>那么，我们为什么要用这个东西呢~~因为前端的包袱太多，历史遗留问题太重<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##安装和配置</span><br><span class="line">    webpack是跑在Node.js环境下的，所以确定自己有node环境。</span><br><span class="line"></span><br><span class="line">安装方式：</span><br><span class="line"></span><br><span class="line">　　-- npm install webpack -g  全局安装</span><br><span class="line"></span><br><span class="line">　　-- webpack  &lt;要打包文件&gt;  &lt;打包后文件&gt;     全局这种方式进行打包</span><br><span class="line"></span><br><span class="line">　　-- npm install webpack   在自己的项目下 npm init 后在下载webpack 这就是局部安装</span><br><span class="line"></span><br><span class="line">　　-- node_modules/.bin/webpack &lt;要打包文件&gt;  &lt;打包后文件&gt;   项目里要打包文件是入口文件</span><br><span class="line"></span><br><span class="line">　　-- 路径太长 太烦 可以自定义命令  在package.json 文件的 scripts下面自定义</span><br><span class="line"></span><br><span class="line">## entry 和 output</span><br><span class="line">    entry 入口文件  output 出口文件</span><br><span class="line"></span><br><span class="line">    上面我们自定义命令的时候 命令太长了~~而且我们命令太多的时候我们需要每次都自定义多条命令~~</span><br><span class="line"></span><br><span class="line">    我们可以把命令写在webpack.config.js文件中~~</span><br><span class="line">&gt;webpack.config.js</span><br><span class="line">module.export = &#123;</span><br><span class="line">    // 所有的入口文件</span><br><span class="line">    entry: &#123;</span><br><span class="line">         home: &apos;./main.js&apos;, </span><br><span class="line">         login: &apos;./login.js&apos;,</span><br><span class="line">    &#125;, </span><br><span class="line">    // 出口文件  </span><br><span class="line">    output: &#123;</span><br><span class="line">         filename: &apos;[name].bundle.js&apos;,</span><br><span class="line">         path: __dirname + &apos;/dist&apos;,</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br><span class="line">// backage.json  下的scripts</span><br><span class="line">scripts: &#123;</span><br><span class="line">     &quot;pack&quot;: &quot;node_moudles/.bin/webpack --watch&quot;</span><br><span class="line">&#125;</span><br><span class="line">//  运行命令</span><br><span class="line">npm  run pack</span><br><span class="line"></span><br><span class="line"># webpack4</span><br><span class="line">## webpack的新特性</span><br><span class="line">1, webpack不在单独使用，需要webpack-cli</span><br><span class="line"></span><br><span class="line">　　-- 全局安装  npm install webpack webpack-cli -g -D</span><br><span class="line"></span><br><span class="line">　　-- 局部安装  npm install webpack webpack-cli -D</span><br><span class="line"></span><br><span class="line">2, 增加了模式区分 （development, production）</span><br><span class="line"></span><br><span class="line">　　--webpack --mode development/production 进行模式切换</span><br><span class="line"></span><br><span class="line">　　-- development 开发者模式 打包默认不压缩代码</span><br><span class="line"></span><br><span class="line">　　-- production  生产者模式 上线时使用，压缩代码。 默认是这个模式</span><br><span class="line"></span><br><span class="line">3，固定入口目录为src，与入口默认文件index.js，打包后文件在新增的dist目录下</span><br><span class="line"></span><br><span class="line">　　-- 当只有一个入口文件也就是src/index.js时，无需增加webpack.config.js</span><br><span class="line"></span><br><span class="line">4，多入口以及多出口</span><br><span class="line">&gt;webpack.config.js　</span><br><span class="line">entry: &#123;</span><br><span class="line">    // 多入口</span><br><span class="line">    a: &quot;./src/js/index.js&quot;,</span><br><span class="line">    b: &quot;./src/js/index2.js&quot;,</span><br><span class="line">&#125;</span><br><span class="line">output: &#123;</span><br><span class="line">    // 多出口</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;./js/[name].bundle.js&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># vue-cli</span><br><span class="line">vue-cli是官方提供的快速构建这个单页面应用的脚手架。</span><br><span class="line"></span><br><span class="line">## 根据官方文档中的构件流程：</span><br><span class="line"></span><br><span class="line">　　-- 前提是已经安装了node.js 否则npm都用不了</span><br><span class="line"></span><br><span class="line">　　-- 1，使用npm全局安装vue-cli </span><br><span class="line"></span><br><span class="line">　　　　　　npm install -g vue-cli</span><br><span class="line"></span><br><span class="line">　　-- 2, 安装完成后在自己的工作空间里</span><br><span class="line"></span><br><span class="line">　　　　　　vue init webpack vue-demo  </span><br><span class="line"></span><br><span class="line">　　　　输入命令后进入安装阶段，需要用户输入一些信息 这里省略了.....</span><br><span class="line"></span><br><span class="line">　　-- 3，切换到我们的项目目录下 </span><br><span class="line"></span><br><span class="line">　　　　　　cd vue-demo</span><br><span class="line"></span><br><span class="line">　　　　　　npm run dev</span><br><span class="line"></span><br><span class="line">## 目录结构：</span><br><span class="line"></span><br><span class="line">　　-- build 里面是一些操作文件，使用npm run * 时其实执行的就是这里的文件</span><br><span class="line"></span><br><span class="line">　　-- config 配置文件，执行文件需要的配置信息</span><br><span class="line"></span><br><span class="line">　　-- src 资源文件 所有的组件以及所有的图片 都在这个文件夹下</span><br><span class="line"></span><br><span class="line">　　-- node_modules  项目依赖包</span><br><span class="line"></span><br><span class="line">　　-- static 静态资源</span><br><span class="line"></span><br><span class="line">　　-- package.json   依赖包的json文件</span><br><span class="line"></span><br><span class="line">其实这里面命令很多~我们在后续项目中应用到再说</span><br></pre></td></tr></table></figure></p><h1 id="vue-cli配置JQuery、bootstrap"><a href="#vue-cli配置JQuery、bootstrap" class="headerlink" title="vue-cli配置JQuery、bootstrap"></a>vue-cli配置JQuery、bootstrap</h1><h2 id="第一步-下载安装"><a href="#第一步-下载安装" class="headerlink" title="第一步  下载安装"></a>第一步  下载安装</h2><p>　　– npm install jquery </p><p>　　– npm install bootstrap </p><h2 id="第二步-修改build-webpack-base-conf-js"><a href="#第二步-修改build-webpack-base-conf-js" class="headerlink" title="第二步 修改build/webpack.base.conf.js"></a>第二步 修改build/webpack.base.conf.js</h2><blockquote><p>const webpack = require(‘webpack’)<br>// 在module.exports里添加插件<br>plugins: [<br>    new webpack.ProvidePlugin({<br>      $: “jquery”,<br>      jQuery: “jquery”,<br>      “windows.jQuery”: “jquery”,<br>      // Popper: [‘popper.js’, ‘default’]<br>    })<br>],<br>//  <strong>***</strong>下面是如果手动下载bootstrap用的<strong>***</strong><br>resolve: {<br>    extensions: [‘.js’, ‘.vue’, ‘.json’],<br>    alias: {<br>      ‘vue$’: ‘vue/dist/vue.esm.js’,<br>      ‘@’: resolve(‘src’),<br>      // 如果是手动下载的bootstrap需要添加这个配置<br>      // ‘assets’: path.resolve(__dirname, ‘../src/assets’),<br>      // ‘jquery’: ‘jquery/src/jquery’<br>    }<br>  },</p></blockquote><p>修改配置文件</p><h2 id="第三步-修改主程序的js文件-main-js"><a href="#第三步-修改主程序的js文件-main-js" class="headerlink" title="第三步 修改主程序的js文件 main.js"></a>第三步 修改主程序的js文件 main.js</h2><blockquote><p>import $ from ‘jquery’<br>import ‘bootstrap/dist/css/bootstrap.min.css’<br>import ‘bootstrap/dist/js/bootstrap.min.js’</p></blockquote><h1 id="vue-cli-3-0"><a href="#vue-cli-3-0" class="headerlink" title="vue-cli 3.0"></a>vue-cli 3.0</h1><h2 id="第一步-下载vue-cli-3-0"><a href="#第一步-下载vue-cli-3-0" class="headerlink" title="第一步 下载vue-cli 3.0"></a>第一步 下载vue-cli 3.0</h2><p>　　– npm install -g @vue/cli</p><p>　　– 报错 npm error  可以运行下面命令</p><p>　　　　– npm cache clean –force &amp;&amp; npm cache verify</p><h2 id="第二步-创建项目"><a href="#第二步-创建项目" class="headerlink" title="第二步 创建项目"></a>第二步 创建项目</h2><p>　　– vue create xxxx</p><p>　　之后会出现很多选项，我们可以根据自己的习惯去选择~~</p><h2 id="第三步-目录结构以及配置文件"><a href="#第三步-目录结构以及配置文件" class="headerlink" title="第三步 目录结构以及配置文件"></a>第三步 目录结构以及配置文件</h2><p>　　– vue-cli3 目录更加简单</p><p>　　– 我们手动在项目根目录下创建  vue.config.js 里面写vue的配置信息</p><h1 id="vue-cli3-配置jQuery、bootstrap"><a href="#vue-cli3-配置jQuery、bootstrap" class="headerlink" title="vue-cli3 配置jQuery、bootstrap"></a>vue-cli3 配置jQuery、bootstrap</h1><p>　　– 跟vue-cli2一样的配置，手动创建一个webpack.base.conf.js </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Node-js-npm&quot;&gt;&lt;a href=&quot;#Node-js-npm&quot; class=&quot;headerlink&quot; title=&quot;Node.js   npm&quot;&gt;&lt;/a&gt;Node.js   npm&lt;/h1&gt;&lt;h2 id=&quot;什么是Node-js-以及npm&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>git上</title>
    <link href="http://yoursite.com/2018/11/13/git%E4%B8%8A/"/>
    <id>http://yoursite.com/2018/11/13/git上/</id>
    <published>2018-11-13T06:52:40.000Z</published>
    <updated>2018-11-15T06:33:54.674Z</updated>
    
    <content type="html"><![CDATA[<p>目录：<br>    建立本地版本库<br>    本地版本库与远程关联<br>    修改文件并提交<br>    创建分支,修改文件合并至master</p><h1 id="git的由来"><a href="#git的由来" class="headerlink" title="git的由来"></a>git的由来</h1><pre><code>linux系统是很多开发者贡献代码不断完善的,linux的创始人linus起初管理贡献者的代码,是通过手工的方式,但随着代码的增多,很难通过手工方式去管理,于是找了一个商业的版本控制系统BitKeeper管理代码.开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！</code></pre><h1 id="集中式与分布式区别"><a href="#集中式与分布式区别" class="headerlink" title="集中式与分布式区别"></a>集中式与分布式区别</h1><pre><code>- 集中式： cvs, svn版本库集中放在中央服务器上,所有人干活时,都要先从中央服务器获取最新版本到本地,然后在本地修改,干完活后,将修改推送到中央服务器.**必须联网**才能工作.- 分布式每个人的电脑都是一个版本库,工作的时候 **不需要联网**,直接在本地修改,提交就可以.你和同事同时修改一个文件A,修改完成后互相将自己修改的文件推送给对方即可.**安全性高**, 每个人的本地都有一个完整的版本库,某个人的电脑突然崩溃,从其他人那直接copy一份就可以了.但集中式版本控制系统,一旦中央服务器垮掉,版本库信息就都丢失了.</code></pre><h1 id="创建版本库-添加文件"><a href="#创建版本库-添加文件" class="headerlink" title="创建版本库,添加文件"></a>创建版本库,添加文件</h1><pre><code>命令:    - 创建版本库        mkdir studyGit        git init    - 添加文件        vim readme.txt        git add readme.txt        git commit -m &quot;注释说明,方便自己或他人查看&quot;</code></pre><h1 id="修改文件并提交"><a href="#修改文件并提交" class="headerlink" title="修改文件并提交"></a>修改文件并提交</h1><pre><code>命令:    - vim  编辑修改文件内容    - git status  查看当前仓库状态    - git diff filename  查看文件具体改动内容    - 提交:        git add filename        git commit -m &quot;本次提交注释说明&quot;</code></pre><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><pre><code>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD指向至你切换的版本.命令:    - 回退到上一个版本        git reset --hard HEAD^    - 回退到上上版本        git reset --hard HEAD^^    - 回退到指定版本        git log  查看你要切换版本的commit id        或 git log --pretty=oneline        git reset --hard target_commit_id    - 回退之后后悔了,想切换到回退前的版本        1) 通过git log是找不到回退前那次提交的日志的,没办法指定commit id回退切换        2) 通过git reflog查看, git reflog是记录我们的历史命令的,找到你那次提交历史命令前的commit id,即可切换回去</code></pre><h1 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h1><pre><code>工作区: 电脑上直接看到的,你管理的文件夹(使用git init创建的),就是工作区暂存区: 在工作区下,隐藏的.git文件夹,其中有很多文件,有几个重要的要理解:        - 暂存区: stage        - 版本信息(master分支)        - HEAD指针,指向具体分支提交工作区的文件修改或新增文件:    1) git add files  -&gt; 实际将这些修改先推送到本地暂存区(暂存区中存放了所有待提交的文件)    2) git commit -m &quot;说明&quot;  -&gt; 提交暂存区中的所有文件至master或分支版本</code></pre><h1 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h1><pre><code>工作区中readme.txt文件1) 第一次修改, 增加一行内容, git add readme.txt2) 第二次修改, 又增加了一行内容, 但未执行 git add readme.txt3) git commit -m &quot;注释&quot;; 那么此次提交的只是第一次修改的内容git diff HEAD -- readme.txt  查看工作区中与版本库中的不同之处</code></pre><h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><pre><code>1) 工作区修改,改乱了,还没有提交至暂存区; 可以通过 git checkout -- filename 恢复至与版本库一致的状态2) 工作区修改,改乱了,但之前已提交至暂存区,撤销修改:    git reset HEAD filename  把暂存区的修改撤销掉(unstage)    git checkout -- filename  恢复工作区与版本库一致</code></pre><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><pre><code>git rm filenamegit commit -m &quot;delete file filename&quot;</code></pre><h1 id="远程仓库关联"><a href="#远程仓库关联" class="headerlink" title="远程仓库关联"></a>远程仓库关联</h1><pre><code>1) 创建ssh key:ssh-keygen -t rsa -C &quot;youremail@example.com&quot;  # 一路回车即可在用户主目录里会生成一个.ssh文件夹,里面有id_rsa和id_rsa.pub, id_rsa是私钥, id_rsa.pub是公钥;登录github,进入个人账户settings页面,选择ssh key -&gt; add new; 添加, 将id_rsa.pub复制到页面中,完成.2) 添加远程仓库    - 在github网站新增仓库,与本地要关联的仓库同名    - 进入本地仓库所在的目录, git remote add origin &lt;新增的远程仓库地址&gt;    - git push -u origin master  # 将本地仓库的master分支推送到远程服务器上,后续提交可以省略参数-u(远程初始仓库为空,所以加-u)    - 本地修改文件,提交; 推送至远程</code></pre><h1 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h1><pre><code>进入你想保存仓库的路径,然后执行:git clone &lt;远程仓库地址&gt;</code></pre><h1 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h1><pre><code>查看分支：git branch创建分支：git branch &lt;name&gt;切换分支：git checkout &lt;name&gt;创建+切换分支：git checkout -b &lt;name&gt;合并某分支到当前分支：git merge &lt;name&gt;删除分支：git branch -d &lt;name&gt;</code></pre><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><pre><code>1) 在分支上修改了文件,并commit2) 在mster上修改了文件,并commit3) git merge &lt;ranchname&gt;; 报错, 无法实现快速合并, 需先解决冲突, 把冲突文件改成自己想要的内容,然后 git add filename, git commit -m &quot;注释&quot;.        </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目录：&lt;br&gt;    建立本地版本库&lt;br&gt;    本地版本库与远程关联&lt;br&gt;    修改文件并提交&lt;br&gt;    创建分支,修改文件合并至master&lt;/p&gt;
&lt;h1 id=&quot;git的由来&quot;&gt;&lt;a href=&quot;#git的由来&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue总结</title>
    <link href="http://yoursite.com/2018/11/13/Vue%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/11/13/Vue总结/</id>
    <published>2018-11-13T00:30:00.000Z</published>
    <updated>2018-11-15T06:36:05.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue总结"><a href="#vue总结" class="headerlink" title="vue总结"></a>vue总结</h1><blockquote><p>MVC  Model View Controller</p></blockquote><blockquote><p>MVVM Model View ViweMode</p></blockquote><h2 id="ES6常用语法"><a href="#ES6常用语法" class="headerlink" title="ES6常用语法"></a>ES6常用语法</h2><pre><code>1.1 变量的提升1.2 模板字符串 ``${}1.3 数据的解构1.4 类 class extends constructor  super1.5 函数    1.5.1 注意this和普通函数的区别1.6 箭头函数1.7 单体模式1.8 import export   export default</code></pre><h2 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a>Vue常用指令</h2><pre><code>2.1 v-text  innerText2.2 v-html  innerHtml2.3 v-for  :key2.4 v-if v-else-if v-else  appendChild2.5 v-show  display2.6 v-on  @xxxx=&quot;自己处理的方法&quot;2.7 v-bind  :属性名称=“属性的值”2.8 v-model    2.8.1 input    2.8.2 textarea    2.8.3 select2.9 指令修饰符    2.9.1 .lazy    2.9.2 .number    2.9.3 .trim2.10 计算属性    2.10.1 放入缓存    2.10.2 只有数据改变的时候才会重新计算2.11 数据监听    2.11.1 注意可变类型和不可变    2.11.2 深监听  deep=true2.12 获取DOM    2.12.1 给便签绑定ref属性  ref=“属性值”    2.12.2 this.$refs.属性值2.13 自定义指令    2.13.1 vue.directive(“指令名称”, function(el, binding){        el 绑定指令的便签元素        binding 指令的所有信息    })</code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><pre><code>3.1 数据监听    3.1.1 改变数据        直接赋值    3.1.2 改变数组长度        能够被监听到，新值和旧值一样    3.1.3 改变数组内的值        app = new vue({})        app.$set(this.hobby, 0, &apos;抽烟&apos;)        $set()修改数组中的值可以监听        $delete()</code></pre><h2 id="Vue的组件"><a href="#Vue的组件" class="headerlink" title="Vue的组件"></a>Vue的组件</h2><h3 id="组件的注册"><a href="#组件的注册" class="headerlink" title="组件的注册"></a>组件的注册</h3><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><pre><code>Vue.compontent(“组件名称”, {})</code></pre><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><pre><code>const = app = new Vue({    el: &apos;#app&apos;,    components: {        组件的名称: 组件的配置信息    }})</code></pre><h4 id="子组件的注册"><a href="#子组件的注册" class="headerlink" title="子组件的注册"></a>子组件的注册</h4><pre><code>在父组件中注册components## 注意写组件标签## 每个组件的template只识别一个作用域块</code></pre><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><h4 id="父子的通信"><a href="#父子的通信" class="headerlink" title="父子的通信"></a>父子的通信</h4><pre><code>在父组件中给子组件绑定属性子组件通过props=[&quot;属性名称&quot;]</code></pre><h4 id="子父的通信"><a href="#子父的通信" class="headerlink" title="子父的通信"></a>子父的通信</h4><pre><code>子组件先提交事件    this.$emit(&quot;事件名称&quot;, 值)在父组件中给子组件绑定事件    &lt;child @事件名称=&quot;父亲处理的方法&quot;&gt;&lt;/child&gt;</code></pre><h4 id="非父子的通信"><a href="#非父子的通信" class="headerlink" title="非父子的通信"></a>非父子的通信</h4><pre><code>其中一个组件向中间调度器提交事件另一个组件监听中间调度器的事件注意this的问题中间调度器  let temp = new Vue();temp.$emit(&quot;say&quot;, value) // 事件名称和值mounted(){    that = this    // 监听中间调度器中的方法    temp.$on(&quot;say&quot;, function(data){        // 这里的this是temp的this        that.xxx = data // 这样改值    })}</code></pre><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><pre><code>&lt;slot&gt;&lt;/slot&gt;命名的插槽</code></pre><h3 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h3><pre><code>代码重用的mixins = [base] </code></pre><h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><h3 id="vue生命周期之beforeCreate"><a href="#vue生命周期之beforeCreate" class="headerlink" title="vue生命周期之beforeCreate"></a>vue生命周期之beforeCreate</h3><pre><code>实例创建之前除标签外，所有的vue需要的数据，事件都不存在</code></pre><h3 id="vue生命周期之created"><a href="#vue生命周期之created" class="headerlink" title="vue生命周期之created"></a>vue生命周期之created</h3><pre><code>实例创建之后，data和事件已经被解析到，el还没有找到</code></pre><h3 id="vue生命周期之beforeMount"><a href="#vue生命周期之beforeMount" class="headerlink" title="vue生命周期之beforeMount"></a>vue生命周期之beforeMount</h3><pre><code>开始找标签，数据还没有被渲染，事件也没有被监听</code></pre><h3 id="vue生命周期之mounted"><a href="#vue生命周期之mounted" class="headerlink" title="vue生命周期之mounted"></a>vue生命周期之mounted</h3><pre><code>开始渲染数据，开始监听事件</code></pre><h3 id="vue生命周期之beforeUpdata"><a href="#vue生命周期之beforeUpdata" class="headerlink" title="vue生命周期之beforeUpdata"></a>vue生命周期之beforeUpdata</h3><pre><code>数据已经被修改在虚拟DOM，但没有被渲染到页面上</code></pre><h3 id="vue生命周期之updata"><a href="#vue生命周期之updata" class="headerlink" title="vue生命周期之updata"></a>vue生命周期之updata</h3><pre><code>开始使用Diff算法，将虚拟DOM中的修改应用大页面上，此时真实DOM中数据被修改</code></pre><h3 id="vue生命周期之beforeDestory"><a href="#vue生命周期之beforeDestory" class="headerlink" title="vue生命周期之beforeDestory"></a>vue生命周期之beforeDestory</h3><pre><code>所有的数据都存在</code></pre><h3 id="vue生命周期之destoryed"><a href="#vue生命周期之destoryed" class="headerlink" title="vue生命周期之destoryed"></a>vue生命周期之destoryed</h3><pre><code>所有的数据都有(虚拟DOM中找数据)展示的真实DOM已经是静态页面了&lt;keep-alive&gt;&lt;/keep-alive&gt;vue提供的用来缓存被消除的标签用activated和deactivated取代了beforeUpdate和destory的执行</code></pre><h3 id="最常用的钩子"><a href="#最常用的钩子" class="headerlink" title="最常用的钩子"></a>最常用的钩子</h3><pre><code>beforeMountmounted</code></pre><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><pre><code>let url = [    {        path: &apos;/&apos;,        name: &quot;home&quot;,        component: {            template: ``,        }    }]let router = nwe VueRouter({    routes: url})const app = new Vue({    el: &apos;app&apos;,    router: router,})&lt;router-link to=&apos;/&apos;&gt;首页&lt;/router-link&gt;&lt;router-link :to=&apos;{name: &quot;home&quot;}&apos;&gt;首页&lt;/router-link&gt;&lt;router-view&gt;&lt;/router-view&gt;</code></pre><h3 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h3><pre><code>children: [    {}]append在父路由对应的组件的template里面写router-link router-view</code></pre><h3 id="路由的命名"><a href="#路由的命名" class="headerlink" title="路由的命名"></a>路由的命名</h3><pre><code>name注意to加冒号动态绑定</code></pre><h3 id="路由的参数"><a href="#路由的参数" class="headerlink" title="路由的参数"></a>路由的参数</h3><pre><code>{    path: &quot;/course/:id&quot;,}this.$route.params.idthis.$route.query.xxx$route 是一个对象 存放当前路由的所有信息$router VueRouter实例化对象</code></pre><h3 id="手动路由"><a href="#手动路由" class="headerlink" title="手动路由"></a>手动路由</h3><pre><code>this.$router.push(&apos;/&apos;)this.$router.push({name:&quot;home&quot;})</code></pre><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><pre><code>redirect: {name: &apos;xxx&apos;, params: {key: value}}</code></pre><h3 id="路由的钩子"><a href="#路由的钩子" class="headerlink" title="路由的钩子"></a>路由的钩子</h3><pre><code>router.beforeEach(function(to, from next){    // to 你要去哪    // from 你要从哪里来    // next() 你要去做什么 参数可以给路径  必须有，没有就不走})router.afterEach(function(to, from){    // to 你要去哪    // from 你从哪里来})to和from都是$route对象   路由的所有信息</code></pre><p></p><h2 id="node-js-npm-webpack-vue-cli-自带webpack"><a href="#node-js-npm-webpack-vue-cli-自带webpack" class="headerlink" title="node.js + npm + webpack + vue-cli(自带webpack)"></a>node.js + npm + webpack + vue-cli(自带webpack)</h2><pre><code>node.js / npm    - npm 管理工作目录        npm init -y    - 下载包        npm i xxx@0.0.0    - 卸载        npm uninstall xxx    - 更新        npm updata xxxwebpack  4    - 下载        npm i webpack webpack-cli    - 打包        webpack --mode development/production    - 打包默认的入口文件        src目录下的index.js    - 出口文件        dist目录的main.jswue-cli  2    - 帮助我们快速搭建项目的脚手架工具    - 下载        npm i vue-cli    - 用vue-cli帮助我们创建项目        vue init webpack xxxx(项目名称)    - 启动项目        cd xxxx(项目名称)        npm run dev    - 打吧包        npm run build</code></pre><h2 id="Vuex和axios"><a href="#Vuex和axios" class="headerlink" title="Vuex和axios"></a>Vuex和axios</h2><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><pre><code>存放一些公共的东西,是一个仓库安装    npm i vuex配置    导入        import vuex from &quot;vuex&quot;    vue使用vuex        vue.use(vuex)    实例化仓库        new vuex.Store({            state: {},            getters: {},            mutations: {}        })    new Vue({        el: &apos;#app&apos;,        store,    })获取残仓库数据    this.$store.state.xxx    this.$store.getters.xxx改变仓库中的数据    组件向仓库提交修改事件        this.$store.commit(&quot;事件名称&quot;, data)    在仓库中的mutations中        mutations: {            &quot;事件名称&quot;: function(state, data){                修改state中的数据            }        }注意计算属性    仓库中的数据建议都放在计算属性中</code></pre><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><pre><code>向后端服务器发送请求实现ajax技术的工具配置    下载        npm i axios    导入        import axios from “axios”    在vue的原型链中加入方法        Vue.prototype.#axios = axios发送请求    this.$axios.request({        url: &apos;&apos;,        method: &apos;&apos;,    }).then(function(){    }).catch(function(){    })</code></pre><h2 id="前后端的接通"><a href="#前后端的接通" class="headerlink" title="前后端的接通"></a>前后端的接通</h2><pre><code>后端设计一个接口前端通过axios发送请求拿到数据跨域问题</code></pre><h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h2><pre><code>按照文档安装，并研究如何使用</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue总结&quot;&gt;&lt;a href=&quot;#vue总结&quot; class=&quot;headerlink&quot; title=&quot;vue总结&quot;&gt;&lt;/a&gt;vue总结&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MVC  Model View Controller&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue组件系统</title>
    <link href="http://yoursite.com/2018/10/14/vue%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/10/14/vue组件系统/</id>
    <published>2018-10-14T12:37:04.000Z</published>
    <updated>2018-11-15T06:36:47.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue组件系统之全局组件的注册"><a href="#Vue组件系统之全局组件的注册" class="headerlink" title="Vue组件系统之全局组件的注册"></a>Vue组件系统之全局组件的注册</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 注册</span></span><br><span class="line"><span class="undefined">&gt;    Vue.component(</span></span><br><span class="line"><span class="undefined">&gt;        // 第一个是组件名称  第二个object</span></span><br><span class="line"><span class="undefined">&gt;        "global-component", &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // 组件内容  抱一个div-单个根元素</span></span><br><span class="line"><span class="xml">&gt;            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;            // data必须是函数</span></span><br><span class="line"><span class="undefined">&gt;            data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;                // return中写数据</span></span><br><span class="line"><span class="undefined">&gt;                return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;            &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    );</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="xml">&gt;        // template: `<span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 注册组件</span></span><br><span class="line"><span class="undefined">&gt;    Vue.component(</span></span><br><span class="line"><span class="undefined">&gt;        // 第一个是组件名称  第二个object</span></span><br><span class="line"><span class="undefined">&gt;        "global-component", &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // 组件内容  抱一个div-单个根元素，包在app这个div中</span></span><br><span class="line"><span class="xml">&gt;            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;            // data必须是函数</span></span><br><span class="line"><span class="undefined">&gt;            data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;                // return中写数据</span></span><br><span class="line"><span class="undefined">&gt;                return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;            &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    );</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        // 根元素会替换div</span></span><br><span class="line"><span class="xml">&gt;        template: `<span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>全局组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;// 总结</span><br><span class="line">&gt;Vue.component(</span><br><span class="line">&gt;        // 第一个是组件名称  第二个object</span><br><span class="line">&gt;        "global-component", &#123;</span><br><span class="line">&gt;            // 组件内容  抱一个div-单个根元素，包在app这个div中</span><br><span class="line">&gt;            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span><br><span class="line">&gt;            // data必须是函数</span><br><span class="line">&gt;            data()&#123;</span><br><span class="line">&gt;                // return中写数据</span><br><span class="line">&gt;                return &#123;</span><br><span class="line">&gt;                    db: 'hello',</span><br><span class="line">&gt;                &#125;,</span><br><span class="line">&gt;computed: &#123;&#125;,</span><br><span class="line">&gt;watch: &#123;&#125;,</span><br><span class="line">&gt;methods: &#123;&#125;,</span><br><span class="line">&gt;            &#125;</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    );</span><br><span class="line">&gt;</span><br><span class="line">&gt;new Vue(&#123;</span><br><span class="line">&gt;        el: '#app',</span><br><span class="line">&gt;        // 根元素会替换div</span><br><span class="line">&gt;        template: `<span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span>`</span><br><span class="line">&gt;    &#125;)</span><br><span class="line">&gt;</span><br><span class="line">&gt;// data 必须是函数</span><br><span class="line">&gt;// 没有属性</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="组件系统之组件的复用"><a href="#组件系统之组件的复用" class="headerlink" title="组件系统之组件的复用"></a>组件系统之组件的复用</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">global-component</span>&gt;</span><span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 注册</span></span><br><span class="line"><span class="undefined">&gt;    Vue.component(</span></span><br><span class="line"><span class="undefined">&gt;        // 第一个是组件名称  第二个object</span></span><br><span class="line"><span class="undefined">&gt;        "global-component", &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // 组件内容  抱一个div-单个根元素</span></span><br><span class="line"><span class="xml">&gt;            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;            // data必须是函数</span></span><br><span class="line"><span class="undefined">&gt;            data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;                // return中写数据</span></span><br><span class="line"><span class="undefined">&gt;                return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;            &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    );</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        </span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="组价系统之局部组件的注册"><a href="#组价系统之局部组件的注册" class="headerlink" title="组价系统之局部组件的注册"></a>组价系统之局部组件的注册</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line">&gt;   </span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="xml">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;            return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        computed: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="xml">&gt;        template: `<span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            'app-header': Header</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;    <span class="comment">&lt;!--&lt;App&gt;&lt;/App&gt;--&gt;</span>   </span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="xml">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;            return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        computed: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // ...</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 在入口组件中注册写的局部组件</span></span><br><span class="line"><span class="undefined">&gt;    let App = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        template: `</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            'app-header': Header</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // 组件的私有数据</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;&#125;,</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 根实例</span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        // 作为根被渲染</span></span><br><span class="line"><span class="xml">&gt;        template: `<span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // App:App,</span></span><br><span class="line"><span class="undefined">&gt;            App,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>局部组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;- 总结</span><br><span class="line">&gt;</span><br><span class="line">&gt;创建组件</span><br><span class="line">&gt;创建局部组件，起始就是创建一个JavaScript object</span><br><span class="line">&gt;    let Header = &#123;</span><br><span class="line">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; db &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span><br><span class="line">&gt;        data()&#123;</span><br><span class="line">&gt;            return &#123;</span><br><span class="line">&gt;                    db: 'hello',</span><br><span class="line">&gt;                &#125;</span><br><span class="line">&gt;        &#125;,</span><br><span class="line">&gt;        computed: &#123;&#125;,</span><br><span class="line">&gt;    &#125;;</span><br><span class="line">&gt;注册组件</span><br><span class="line">&gt;</span><br><span class="line">&gt;    new Vue(&#123;</span><br><span class="line">&gt;        el: '#app',</span><br><span class="line">&gt;        template: `<span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span>`,</span><br><span class="line">&gt;        components: &#123;</span><br><span class="line">&gt;            'app-header': Header</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    &#125;)</span><br><span class="line">&gt;</span><br><span class="line">&gt;组件可以嵌套使用</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h1 id="Vue组件系统之父子组件的通信"><a href="#Vue组件系统之父子组件的通信" class="headerlink" title="Vue组件系统之父子组件的通信"></a>Vue组件系统之父子组件的通信</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;   </span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 子</span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="undefined">&gt;      template: `&lt;div&gt;&lt;h3&gt;&#123;&#123; db &#125;&#125;&lt;/h3&gt;&lt;h3&gt;&#123;&#123; fData &#125;&#125;&lt;/h3&gt;&lt;&lt;/div&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;            return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                    db: 'hello',</span></span><br><span class="line"><span class="undefined">&gt;                &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // 接收父亲传来的数据</span></span><br><span class="line"><span class="undefined">&gt;        props:['fData'],</span></span><br><span class="line"><span class="undefined">&gt;        computed: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // ...</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 在入口组件中注册写的局部组件</span></span><br><span class="line"><span class="undefined">&gt;    // 父</span></span><br><span class="line"><span class="undefined">&gt;    let App = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        template: `</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">app-header</span> <span class="attr">v-bind:fData</span>=<span class="string">"fatherData"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            'app-header': Header</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // 组件的私有数据</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;            return &#123;fatherData: 0,&#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 根实例</span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        // 作为根被渲染</span></span><br><span class="line"><span class="xml">&gt;        template: `<span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // App:App,</span></span><br><span class="line"><span class="undefined">&gt;            App,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="Vue组件系统之子父组件的通信"><a href="#Vue组件系统之子父组件的通信" class="headerlink" title="Vue组件系统之子父组件的通信"></a>Vue组件系统之子父组件的通信</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">dic</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 子</span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="xml">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'sonClick'</span>&gt;</span>点击改变字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        methods: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            sonClick: function()&#123;</span></span><br><span class="line"><span class="undefined">&gt;                // 儿子的的行为传给父亲</span></span><br><span class="line"><span class="undefined">&gt;                this.$emit("change-size", 0.1)</span></span><br><span class="line"><span class="undefined">&gt;            &#125;  </span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        computed: &#123;&#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // ...</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 父</span></span><br><span class="line"><span class="undefined">&gt;    let App = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        template: `</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123; fontSize: postFontSize + 'em' &#125;"</span>&gt;</span>我是字体<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">app-header</span> <span class="attr">v-on:change-size</span>=<span class="string">"fatherClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            'app-header': Header</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        // 组件的私有数据</span></span><br><span class="line"><span class="undefined">&gt;        data()&#123;</span></span><br><span class="line"><span class="undefined">&gt;            return &#123;</span></span><br><span class="line"><span class="undefined">&gt;                postFontSize: 1,</span></span><br><span class="line"><span class="undefined">&gt;            &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        methods: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // 自己定义的change-size事件，一直在监听，等着儿子传来的信息</span></span><br><span class="line"><span class="undefined">&gt;            fatherClick: function(value)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                this.postFontSize += value;</span></span><br><span class="line"><span class="undefined">&gt;            &#125;</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 根实例</span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        // 作为根被渲染</span></span><br><span class="line"><span class="xml">&gt;        template: `<span class="tag">&lt;<span class="name">App</span>&gt;</span><span class="tag">&lt;/<span class="name">App</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            // App:App,</span></span><br><span class="line"><span class="undefined">&gt;            App,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="Vue组件系统之混入（mixin）"><a href="#Vue组件系统之混入（mixin）" class="headerlink" title="Vue组件系统之混入（mixin）"></a>Vue组件系统之混入（mixin）</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">dic</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">my-header</span>&gt;</span><span class="tag">&lt;/<span class="name">my-header</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">my-app</span>&gt;</span><span class="tag">&lt;/<span class="name">my-app</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="xml">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'show('</span><span class="attr">xxx</span>')'&gt;</span>点击显示xxx来了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'hide('</span><span class="attr">xxx</span>')'&gt;</span>点击显示xxx去了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        methods: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            show: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;            &#125;,</span></span><br><span class="line"><span class="undefined">&gt;            hide: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;            &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;,</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    let App = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        template: `</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">mouseenter</span>=<span class="string">'show('</span><span class="attr">000</span>')'&gt;</span>点击显示000来了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">mouseleve</span>=<span class="string">'hide('</span><span class="attr">000</span>')'&gt;</span>点击显示000去了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        methods: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            show: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;            &#125;,</span></span><br><span class="line"><span class="undefined">&gt;            hide: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;            &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 根实例</span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            "my-header": Header,</span></span><br><span class="line"><span class="undefined">&gt;            "my-app": App,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">my-header</span>&gt;</span><span class="tag">&lt;/<span class="name">my-header</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">my-app</span>&gt;</span><span class="tag">&lt;/<span class="name">my-app</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">dic</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    let mixs = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        methods:&#123;</span></span><br><span class="line"><span class="undefined">&gt;            show: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                    console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;                &#125;,</span></span><br><span class="line"><span class="undefined">&gt;            hide: function(name)&#123;</span></span><br><span class="line"><span class="undefined">&gt;                    console.log(name+'来了');</span></span><br><span class="line"><span class="undefined">&gt;                &#125;,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;</span></span><br><span class="line"><span class="undefined">&gt;    let Header = &#123;</span></span><br><span class="line"><span class="xml">&gt;      template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'show('</span><span class="attr">xxx</span>')'&gt;</span>点击显示xxx来了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'hide('</span><span class="attr">xxx</span>')'&gt;</span>点击显示xxx去了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        mixins: [mixs],</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    let App = &#123;</span></span><br><span class="line"><span class="undefined">&gt;        template: `</span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">mouseenter</span>=<span class="string">'show("000")'</span>&gt;</span>点击显示000来了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">mouseleve</span>=<span class="string">'hide("000")'</span>&gt;</span>点击显示000去了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">&gt;`,</span></span><br><span class="line"><span class="undefined">&gt;        mixins: [mixs],</span></span><br><span class="line"><span class="undefined">&gt;    &#125;;</span></span><br><span class="line"><span class="undefined">&gt;    // 根实例</span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;        components: &#123;</span></span><br><span class="line"><span class="undefined">&gt;            "my-header": Header,</span></span><br><span class="line"><span class="undefined">&gt;            "my-app": App,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h1 id="Vue组件系统之插槽"><a href="#Vue组件系统之插槽" class="headerlink" title="Vue组件系统之插槽"></a>Vue组件系统之插槽<slot></slot></h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;- 内容分发</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    .box &#123;</span></span><br><span class="line"><span class="undefined">&gt;        width: 50px;</span></span><br><span class="line"><span class="undefined">&gt;        height: 50px;</span></span><br><span class="line"><span class="undefined">&gt;        float: left;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">global-component</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">global-component</span>&gt;</span>免费<span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">global-component</span>&gt;</span>收费<span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 注册全局组件</span></span><br><span class="line"><span class="undefined">&gt;    Vue.component(</span></span><br><span class="line"><span class="undefined">&gt;        "global-component", &#123;</span></span><br><span class="line"><span class="xml">&gt;            template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    );</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="Vue组件系统之具名插槽"><a href="#Vue组件系统之具名插槽" class="headerlink" title="Vue组件系统之具名插槽"></a>Vue组件系统之具名插槽</h1><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    .box &#123;</span></span><br><span class="line"><span class="undefined">&gt;        width: 50px;</span></span><br><span class="line"><span class="undefined">&gt;        height: 50px;</span></span><br><span class="line"><span class="undefined">&gt;        float: left;</span></span><br><span class="line"><span class="undefined">&gt;    &#125;</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">'home'</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">'free'</span>&gt;</span>免费<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">'toll'</span>&gt;</span>收费<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;/<span class="name">global-component</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">&gt;    // 注册全局组件</span></span><br><span class="line"><span class="undefined">&gt;    Vue.component(</span></span><br><span class="line"><span class="undefined">&gt;        "global-component", &#123;</span></span><br><span class="line"><span class="xml">&gt;            template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"home"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"free"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;<span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"toll"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">&gt;    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">&gt;        &#125;</span></span><br><span class="line"><span class="undefined">&gt;    );</span></span><br><span class="line"><span class="undefined">&gt;    </span></span><br><span class="line"><span class="undefined">&gt;    new Vue(&#123;</span></span><br><span class="line"><span class="undefined">&gt;        el: '#app',</span></span><br><span class="line"><span class="undefined">&gt;    &#125;)</span></span><br><span class="line"><span class="undefined">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue组件系统之全局组件的注册&quot;&gt;&lt;a href=&quot;#Vue组件系统之全局组件的注册&quot; class=&quot;headerlink&quot; title=&quot;Vue组件系统之全局组件的注册&quot;&gt;&lt;/a&gt;Vue组件系统之全局组件的注册&lt;/h1&gt;&lt;blockquote&gt;
&lt;figure 
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>权限管理的三级菜单的流程</title>
    <link href="http://yoursite.com/2018/08/14/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%BB%84%E4%BB%B6%E6%B5%81%E7%A8%8B%E5%A4%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/08/14/权限管理组件流程大总结/</id>
    <published>2018-08-14T08:34:44.000Z</published>
    <updated>2018-11-15T06:39:17.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="权限管理的三级菜单的流程"><a href="#权限管理的三级菜单的流程" class="headerlink" title="权限管理的三级菜单的流程"></a>权限管理的三级菜单的流程</h1><blockquote><p>权限控制</p><ul><li><p>url代表了权限</p></li><li><p>表结构（6张表，ORM创建4个类，两个many2many会自动再生成两张表）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;  用户表</span><br><span class="line">&gt;  用户名</span><br><span class="line">&gt;  密码</span><br><span class="line">&gt;  多对多 roles(角色)</span><br><span class="line">&gt;  角色表</span><br><span class="line">&gt;  标题 title</span><br><span class="line">&gt;  多对多 permission(权限)</span><br><span class="line">&gt;  权限表</span><br><span class="line">&gt;  标题 title</span><br><span class="line">&gt;  权限 url</span><br><span class="line">&gt;  URL别名 name    - 设置唯一(方便为了将权限粒度控制到按钮级别)</span><br><span class="line">&gt;  外键 menu(菜单)</span><br><span class="line">&gt;  外键 permission(self自己)</span><br><span class="line">&gt;  菜单表</span><br><span class="line">&gt;  标题 title</span><br><span class="line">&gt;  图标 icon</span><br><span class="line">&gt;  权重 weight</span><br><span class="line">&gt;  用户和角色关系表</span><br><span class="line">&gt;  角色和权限的关系表</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;from django.db import models</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;class Menu(models.Model):</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    一级菜单</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    title = models.CharField(max_length=32, verbose_name=&apos;标题&apos;, unique=True)  # 一级菜单的名字</span><br><span class="line">&gt;  &gt;    icon = models.CharField(max_length=32, verbose_name=&apos;图标&apos;, null=True, blank=True)</span><br><span class="line">&gt;  &gt;    weight = models.IntegerField(verbose_name=&apos;权重&apos;, default=1)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    class Meta:</span><br><span class="line">&gt;  &gt;        verbose_name_plural = &apos;菜单表&apos;</span><br><span class="line">&gt;  &gt;        verbose_name = &apos;菜单表&apos;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    def __str__(self):</span><br><span class="line">&gt;  &gt;        return self.title</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;class Permission(models.Model):</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    权限表</span><br><span class="line">&gt;  &gt;    有关联Menu的二级菜单</span><br><span class="line">&gt;  &gt;    没有关联Menu的不是二级菜单，是不可以做菜单的权限</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    title = models.CharField(max_length=32, verbose_name=&apos;标题&apos;)</span><br><span class="line">&gt;  &gt;    url = models.CharField(max_length=32, verbose_name=&apos;权限&apos;)</span><br><span class="line">&gt;  &gt;    menu = models.ForeignKey(&apos;Menu&apos;, null=True, blank=True, verbose_name=&apos;菜单&apos;)</span><br><span class="line">&gt;  &gt;    # 该权限关联的其他权限是否也是在当前url上展示</span><br><span class="line">&gt;  &gt;    parent = models.ForeignKey(to=&apos;Permission&apos;, null=True, blank=True, verbose_name=&apos;父权限&apos;)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    name = models.CharField(max_length=32, null=True, blank=True, unique=True, verbose_name=&apos;权限的别名&apos;)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    class Meta:</span><br><span class="line">&gt;  &gt;        verbose_name_plural = &apos;权限表&apos;</span><br><span class="line">&gt;  &gt;        verbose_name = &apos;权限表&apos;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    def __str__(self):</span><br><span class="line">&gt;  &gt;        return self.title</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;class Role(models.Model):</span><br><span class="line">&gt;  &gt;    name = models.CharField(max_length=32, verbose_name=&apos;角色名称&apos;)</span><br><span class="line">&gt;  &gt;    permissions = models.ManyToManyField(to=&apos;Permission&apos;, verbose_name=&apos;角色所拥有的权限&apos;, blank=True)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    def __str__(self):</span><br><span class="line">&gt;  &gt;        return self.name</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;class User(models.Model):</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    用户表</span><br><span class="line">&gt;  &gt;    &quot;&quot;&quot;</span><br><span class="line">&gt;  &gt;    name = models.CharField(max_length=32, verbose_name=&apos;用户名&apos;)</span><br><span class="line">&gt;  &gt;    password = models.CharField(max_length=32, verbose_name=&apos;密码&apos;)</span><br><span class="line">&gt;  &gt;    roles = models.ManyToManyField(to=&apos;Role&apos;, verbose_name=&apos;用户所拥有的角色&apos;, blank=True)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    def __str__(self):</span><br><span class="line">&gt;  &gt;        return self.name</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><ul><li><p>流程梳理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;  - 当一个url回车发出这个请求后，给到server端先判断这个请求url是不是有访问的权限</span><br><span class="line">&gt;    这个时候我们设置了白名单(在中间件这里(因为一开始就要判断身份))，如果是白名单</span><br><span class="line">&gt;    谁都可以访问</span><br><span class="line">&gt;    eg：</span><br><span class="line">&gt;      PERMISSION_SESSION_KEY = &apos;permissions&apos;</span><br><span class="line">&gt;      MENU_SESSION_KEY = &apos;menus&apos;</span><br><span class="line">&gt;      WHITE_URL_LIST = [</span><br><span class="line">&gt;          r&apos;^/login/$&apos;,</span><br><span class="line">&gt;          r&apos;^/logout/$&apos;,</span><br><span class="line">&gt;          r&apos;^/reg/$&apos;,</span><br><span class="line">&gt;          r&apos;^/admin/.*&apos;,</span><br><span class="line">&gt;      ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;  - 这时用户登录，如果登录成功</span><br><span class="line">&gt;    不同的用户对应不同的权限，也就是可以访问不同的url</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&gt;  - 登录成功，(权限信息的初始化)</span><br><span class="line">&gt;    我们该做的就是拿到这个用户对应的权限信息 - ORM(用户信息-角色-权限-菜单)</span><br><span class="line">&gt;    # user = models.User.objects.filter(name=username, password=pwd).first()</span><br><span class="line">&gt;    permission_query = user.roles.filter(permissions__url__isnull=False).values(</span><br><span class="line">&gt;          &apos;permissions__url&apos;,  # 权限url</span><br><span class="line">&gt;          &apos;permissions__title&apos;,  # 权限的标题</span><br><span class="line">&gt;          &apos;permissions__id&apos;,  # 权限的id</span><br><span class="line">&gt;          &apos;permissions__name&apos;,  # 权限的别名</span><br><span class="line">&gt;          &apos;permissions__parent_id&apos;,  # 此权限对应的父权限的id</span><br><span class="line">&gt;          &apos;permissions__parent__name&apos;,  # 次权限对应的父权限的别名</span><br><span class="line">&gt;          &apos;permissions__menu_id&apos;,  # 此权限对应的菜单id</span><br><span class="line">&gt;          &apos;permissions__menu__title&apos;,  # 此权限对应的菜单标题</span><br><span class="line">&gt;          &apos;permissions__menu__icon&apos;,  # 此权限对应的菜单的图标</span><br><span class="line">&gt;          &apos;permissions__menu__weight&apos;,  # 表单排序用的</span><br><span class="line">&gt;      ).distinct()</span><br><span class="line">&gt;    数据结构(字典)</span><br><span class="line">&gt;    permission_dict来存储此权限信息</span><br><span class="line">&gt;    menu_dict来存储菜单信息</span><br><span class="line">&gt;    permission_dict = &#123;</span><br><span class="line">&gt;        &apos;URL的别名&apos;：&#123;&apos;url&apos;,&apos;title&apos;,&apos;id&apos;,&apos;pid&apos;,&apos;pname&apos; &#125;</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;    menu_list = &#123;</span><br><span class="line">&gt;        &apos;菜单ID&apos;：&#123;</span><br><span class="line">&gt;  &apos;title&apos;: 一级菜单的标题，</span><br><span class="line">&gt;  &apos;icon&apos;: 一级菜单的图标，</span><br><span class="line">&gt;  &apos;weight&apos;: 权重，</span><br><span class="line">&gt;  &apos;children&apos;: [</span><br><span class="line">&gt;  &#123;&apos;url&apos;,&apos;title&apos;,&apos;id&apos;,&#125;</span><br><span class="line">&gt;  ]</span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  权限信息存的就是：</span><br><span class="line">&gt;  当前这个权限的是谁，他的id多少，他的标题是什么，他的父权限是谁(id)，他的父权限的别名是什么</span><br><span class="line">&gt;  菜单信息存的就是：</span><br><span class="line">&gt;  这个权限(url)对应的菜单的标题是什么，菜单的图标是什么，权重是多少，他对应的二级菜单是哪些</span><br><span class="line">&gt;  二级菜单(children)也就是，对应的权限信息</span><br><span class="line">&gt;  这里面存的也就是他的权限信息(他的title，url，id，parent_id)</span><br><span class="line">&gt;  将所有的权限遍历一遍后，将这些信息存入session中</span><br><span class="line">&gt;  为什么存入session，是因为session可以配置(放入缓存，访问次数比较多，所有存到缓存比较好)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;  # 遍历此用户对应的权限信息</span><br><span class="line">&gt;  for item in permission_query:</span><br><span class="line">&gt;  # 首先是权限信息，以权限的别名为键</span><br><span class="line">&gt;          permission_dict[item[&apos;permissions__name&apos;]] = (&#123;</span><br><span class="line">&gt;              &apos;url&apos;: item[&apos;permissions__url&apos;],</span><br><span class="line">&gt;              &apos;id&apos;: item[&apos;permissions__id&apos;],</span><br><span class="line">&gt;              &apos;parent_id&apos;: item[&apos;permissions__parent_id&apos;],</span><br><span class="line">&gt;              &apos;parent_name&apos;: item[&apos;permissions__parent__name&apos;],</span><br><span class="line">&gt;              &apos;title&apos;: item[&apos;permissions__title&apos;],</span><br><span class="line">&gt;          &#125;)</span><br><span class="line">&gt;          menu_id = item.get(&apos;permissions__menu_id&apos;)</span><br><span class="line">&gt;          if not menu_id:</span><br><span class="line">&gt;              continue</span><br><span class="line">&gt;          if menu_id not in menu_dict:</span><br><span class="line">&gt;              menu_dict[menu_id] = &#123;</span><br><span class="line">&gt;                  &apos;title&apos;: item[&apos;permissions__menu__title&apos;],</span><br><span class="line">&gt;                  &apos;icon&apos;: item[&apos;permissions__menu__icon&apos;],</span><br><span class="line">&gt;                  &apos;weight&apos;: item[&apos;permissions__menu__weight&apos;],</span><br><span class="line">&gt;                  &apos;children&apos;: [</span><br><span class="line">&gt;                      &#123;</span><br><span class="line">&gt;                          &apos;title&apos;: item[&apos;permissions__title&apos;],</span><br><span class="line">&gt;                          &apos;url&apos;: item[&apos;permissions__url&apos;],</span><br><span class="line">&gt;                          &apos;id&apos;: item[&apos;permissions__id&apos;],</span><br><span class="line">&gt;                          &apos;parent_id&apos;: item[&apos;permissions__parent_id&apos;],</span><br><span class="line">&gt;                      &#125;</span><br><span class="line">&gt;                  ]</span><br><span class="line">&gt;              &#125;</span><br><span class="line">&gt;          else:</span><br><span class="line">&gt;              menu_dict[menu_id][&apos;children&apos;].append(</span><br><span class="line">&gt;                  &#123;</span><br><span class="line">&gt;                      &apos;title&apos;: item[&apos;permissions__title&apos;],</span><br><span class="line">&gt;                      &apos;url&apos;: item[&apos;permissions__url&apos;],</span><br><span class="line">&gt;                      &apos;id&apos;: item[&apos;permissions__id&apos;],</span><br><span class="line">&gt;                      &apos;parent_id&apos;: item[&apos;permissions__parent_id&apos;],</span><br><span class="line">&gt;                  &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&gt;  - 登录成功后，信息存入session后，这时给服务器发送一个请求，这时就会走中间件进行权限的校验</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  - 走中间件process_request(self, request):</span><br><span class="line">&gt;  - 先获取这个请求的url   request.path_info</span><br><span class="line">&gt;  刚开始也先判断白名单， 白名单不符合从session中获取这个用户存的权限信息</span><br><span class="line">&gt;  permission_dict = request.session.get(settings.PERMISSION_SESSION_KEY)</span><br><span class="line">&gt;  - 导航栏可以存这里  - 写了一个inclution_tag来处理</span><br><span class="line">&gt;  request.breadcrumd_list = [</span><br><span class="line">&gt;              &#123;&quot;title&quot;: &apos;首页&apos;, &apos;url&apos;: &apos;#&apos;&#125;,</span><br><span class="line">&gt;          ]</span><br><span class="line">&gt;          @register.inclusion_tag(&apos;rbac/breadcrumbs.html&apos;)</span><br><span class="line">&gt;  def breadcrumb(request):</span><br><span class="line">&gt;      return &#123;&quot;breadcrumd_list&quot;: request.breadcrumd_list&#125;</span><br><span class="line">&gt;  - 遍历这个权限信息</span><br><span class="line">&gt;  可以通过正则匹配，匹配他是不是该用户的权限</span><br><span class="line">&gt;  如果匹配成功看他是否由parent_id有是子权限没有是父权限</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  if parent_id:</span><br><span class="line">&gt;          # 表示当前权限是子权限，让父权限是展开</span><br><span class="line">&gt;              request.current_menu_id = parent_id</span><br><span class="line">&gt;              request.breadcrumd_list.extend([</span><br><span class="line">&gt;              &#123;</span><br><span class="line">&gt;                &quot;title&quot;: permission_dict[parent_name][&apos;title&apos;],</span><br><span class="line">&gt;                    &apos;url&apos;: permission_dict[parent_name][&apos;url&apos;]</span><br><span class="line">&gt;                   &#125;,</span><br><span class="line">&gt;                     &#123;&quot;title&quot;: item[&apos;title&apos;], &apos;url&apos;: item[&apos;url&apos;]&#125;,</span><br><span class="line">&gt;                   ])</span><br><span class="line">&gt;           else:</span><br><span class="line">&gt;           # 表示当前权限是父权限，要展开的二级菜单</span><br><span class="line">&gt;              request.current_menu_id = id</span><br><span class="line">&gt;              # 添加面包屑导航</span><br><span class="line">&gt;              request.breadcrumd_list.append(&#123;</span><br><span class="line">&gt;              &quot;title&quot;: item[&apos;title&apos;], </span><br><span class="line">&gt;              &apos;url&apos;: item[&apos;url&apos;]</span><br><span class="line">&gt;              &#125;)</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   - request.current_menu_id</span><br><span class="line">&gt;  这个就是用来展示菜单和展示该权限的子权限为了选中同一个二级菜单的时候用的</span><br><span class="line">&gt;  -写一个includtion_tag</span><br><span class="line">&gt;  - </span><br><span class="line">&gt;     @register.inclusion_tag(&apos;rbac/menu.html&apos;)</span><br><span class="line">&gt;                  def menu(request):</span><br><span class="line">&gt;                      menu_list = request.session.get(settings.MENU_SESSION_KEY)</span><br><span class="line">&gt;                      order_dict = OrderedDict()</span><br><span class="line">&gt;                      for key in sorted(menu_list, key=lambda x: menu_list[x][&apos;weight&apos;], reverse=True):</span><br><span class="line">&gt;                          order_dict[key] = menu_list[key]</span><br><span class="line">&gt;                          item = order_dict[key]</span><br><span class="line">&gt;                          item[&apos;class&apos;] = &apos;hide&apos;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;                          for i in item[&apos;children&apos;]:</span><br><span class="line">&gt;  </span><br><span class="line">&gt;                              if i[&apos;id&apos;] == request.current_menu_id:</span><br><span class="line">&gt;                                  i[&apos;class&apos;] = &apos;active&apos;</span><br><span class="line">&gt;                                  item[&apos;class&apos;] = &apos;&apos;</span><br><span class="line">&gt;                      return &#123;&quot;menu_list&quot;: order_dict&#125;</span><br><span class="line">&gt;  </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&gt;  from django.utils.deprecation import MiddlewareMixin</span><br><span class="line">&gt;  from django.conf import settings</span><br><span class="line">&gt;  from django.shortcuts import HttpResponse</span><br><span class="line">&gt;  import re</span><br><span class="line">&gt;  </span><br><span class="line">&gt;  </span><br><span class="line">&gt;  class PermissionMiddleware(MiddlewareMixin):</span><br><span class="line">&gt;      def process_request(self, request):</span><br><span class="line">&gt;          # 对权限进行校验</span><br><span class="line">&gt;          # 1. 当前访问的URL</span><br><span class="line">&gt;          current_url = request.path_info</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          # 白名单的判断</span><br><span class="line">&gt;          for i in settings.WHITE_URL_LIST:</span><br><span class="line">&gt;              if re.match(i, current_url):</span><br><span class="line">&gt;                  return</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          # 2. 获取当前用户的所有权限信息</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          permission_dict = request.session.get(settings.PERMISSION_SESSION_KEY)</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          request.breadcrumd_list = [</span><br><span class="line">&gt;              &#123;&quot;title&quot;: &apos;首页&apos;, &apos;url&apos;: &apos;#&apos;&#125;,</span><br><span class="line">&gt;          ]</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          # 3. 权限的校验</span><br><span class="line">&gt;          print(current_url)</span><br><span class="line">&gt;  </span><br><span class="line">&gt;          for item in permission_dict.values():</span><br><span class="line">&gt;              print(permission_dict)</span><br><span class="line">&gt;              url = item[&apos;url&apos;]</span><br><span class="line">&gt;              if re.match(&quot;^&#123;&#125;$&quot;.format(url), current_url):</span><br><span class="line">&gt;                  parent_id = item[&apos;parent_id&apos;]</span><br><span class="line">&gt;                  id = item[&apos;id&apos;]</span><br><span class="line">&gt;                  parent_name = item[&apos;parent_name&apos;]</span><br><span class="line">&gt;                  if parent_id:</span><br><span class="line">&gt;                      # 表示当前权限是子权限，让父权限是展开</span><br><span class="line">&gt;                      request.current_menu_id = parent_id</span><br><span class="line">&gt;                      request.breadcrumd_list.extend([</span><br><span class="line">&gt;                          &#123;&quot;title&quot;: permission_dict[parent_name][&apos;title&apos;],</span><br><span class="line">&gt;                           &apos;url&apos;: permission_dict[parent_name][&apos;url&apos;]&#125;,</span><br><span class="line">&gt;                          &#123;&quot;title&quot;: item[&apos;title&apos;], &apos;url&apos;: item[&apos;url&apos;]&#125;,</span><br><span class="line">&gt;                      ])</span><br><span class="line">&gt;                  else:</span><br><span class="line">&gt;                      # 表示当前权限是父权限，要展开的二级菜单</span><br><span class="line">&gt;                      request.current_menu_id = id</span><br><span class="line">&gt;                      # 添加面包屑导航</span><br><span class="line">&gt;                      request.breadcrumd_list.append(&#123;&quot;title&quot;: item[&apos;title&apos;], &apos;url&apos;: item[&apos;url&apos;]&#125;)</span><br><span class="line">&gt;                  return</span><br><span class="line">&gt;          else:</span><br><span class="line">&gt;              return HttpResponse(&apos;没有权限&apos;)</span><br><span class="line">&gt;  </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  - 权限力度控制到按钮级别</span><br><span class="line">&gt;  一个filter</span><br><span class="line">&gt;  一个url的反向解析</span><br><span class="line">&gt;  @register.filter</span><br><span class="line">&gt;  def has_permission(request, permission):</span><br><span class="line">&gt;  # session中存的就是权限的别名，别名就是反向解析的那个字符串</span><br><span class="line">&gt;      if permission in request.session.get(settings.PERMISSION_SESSION_KEY):</span><br><span class="line">&gt;          return True</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &#123;% if request|has_permission:&apos;web:customer_edit&apos; or request|has_permission:&apos;web:customer_del&apos; %&#125;</span><br><span class="line">&gt;  &lt;td&gt;</span><br><span class="line">&gt;  &#123;% if request|has_permission:&apos;web:customer_edit&apos; %&#125;</span><br><span class="line">&gt;  &lt;a style=&quot;color: #333333;&quot; href=&quot;&#123;% url &apos;web:customer_edit&apos; row.id %&#125;&quot;&gt;</span><br><span class="line">&gt;  &lt;i class=&quot;fa fa-edit&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">&gt;  &#123;% endif %&#125;</span><br><span class="line">&gt;  &#123;% if request|has_permission:&apos;web:customer_del&apos; %&#125;</span><br><span class="line">&gt;  &lt;a style=&quot;color: #d9534f;&quot; href=&quot;&#123;% url &apos;web:customer_del&apos; row.id  %&#125;&quot;&gt;&lt;i class=&quot;fa fa-trash-o&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">&gt;  &#123;% endif %&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><h1 id="菜单和权限的展示在一个页面"><a href="#菜单和权限的展示在一个页面" class="headerlink" title="菜单和权限的展示在一个页面"></a>菜单和权限的展示在一个页面</h1><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment"># 菜单和权限的展示</span></span><br><span class="line">&gt;<span class="comment"># 点击每一个菜单出现对应的权限信息</span></span><br><span class="line">&gt;<span class="function"><span class="keyword">def</span> <span class="title">menu_list</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;    all_menu = models.Menu.objects.all()</span><br><span class="line">&gt;    <span class="comment"># 拿到菜单对应的菜单id</span></span><br><span class="line">&gt;    mid = request.GET.get(<span class="string">'mid'</span>)</span><br><span class="line">&gt;    <span class="comment"># 如果拿到菜单id代表着有子权限</span></span><br><span class="line">&gt;    <span class="keyword">if</span> mid:</span><br><span class="line">&gt;        <span class="comment"># 从子权限出发 拿到 父权限对应的菜单id对应的权限  或者  菜单对应的权限（也就是二级菜单） 因为自己关联自己（从父亲和儿子两方面出发）</span></span><br><span class="line">&gt;        permission_query = models.Permission.objects.filter(Q(menu_id=mid) | Q(parent__menu_id=mid))</span><br><span class="line">&gt;    <span class="comment"># 如果没有菜单id则输出所有的权限信息</span></span><br><span class="line">&gt;    <span class="keyword">else</span>:</span><br><span class="line">&gt;        permission_query = models.Permission.objects.all()</span><br><span class="line">&gt;    <span class="comment"># 拿到查询出的权限对应的信息</span></span><br><span class="line">&gt;    all_permission = permission_query.values(<span class="string">'id'</span>, <span class="string">'url'</span>, <span class="string">'title'</span>, <span class="string">'name'</span>, <span class="string">'menu_id'</span>, <span class="string">'parent_id'</span>, <span class="string">'menu__title'</span>)</span><br><span class="line">&gt;    all_permission_dict = &#123;&#125;</span><br><span class="line">&gt;    <span class="keyword">for</span> item <span class="keyword">in</span> all_permission:</span><br><span class="line">&gt;        menu_id = item.get(<span class="string">'menu_id'</span>)</span><br><span class="line">&gt;        <span class="comment"># 找到有菜单id的权限，将其存入字典，键为权限的id</span></span><br><span class="line">&gt;        <span class="keyword">if</span> menu_id:</span><br><span class="line">&gt;            all_permission_dict[item[<span class="string">'id'</span>]] = item</span><br><span class="line">&gt;            <span class="comment"># 可以改都是引用</span></span><br><span class="line">&gt;            <span class="comment"># 得到所有有菜单的权限后，将每一个权限都设置一个children键值对，用来存储子权限信息</span></span><br><span class="line">&gt;            item[<span class="string">'children'</span>] = []</span><br><span class="line">&gt;    <span class="keyword">for</span> item <span class="keyword">in</span> all_permission:</span><br><span class="line">&gt;        pid = item.get(<span class="string">'parent_id'</span>)</span><br><span class="line">&gt;        <span class="comment"># 如果有父id代表的是子权限</span></span><br><span class="line">&gt;        <span class="keyword">if</span> pid:</span><br><span class="line">&gt;            <span class="comment"># 如果是子权限，就将子权限的信息存入多上一步做的处理（有菜单的父权限）children中</span></span><br><span class="line">&gt;            all_permission_dict[pid][<span class="string">'children'</span>].append(item)</span><br><span class="line">&gt;    <span class="keyword">return</span> render(request, <span class="string">'rbac/menu_list.html'</span>, &#123;</span><br><span class="line">&gt;        <span class="string">"mid"</span>: mid,</span><br><span class="line">&gt;        <span class="string">"all_menu"</span>: all_menu,</span><br><span class="line">&gt;        <span class="string">"all_permission_dict"</span>: all_permission_dict,</span><br><span class="line">&gt;    &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="权限系统的应用"><a href="#权限系统的应用" class="headerlink" title="权限系统的应用"></a>权限系统的应用</h1><blockquote><ul><li><p>拷贝rbac  App到新项目中</p></li><li><p>注册APP 以及配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;  #  ###### 权限相关的配置 ######</span><br><span class="line">&gt;  PERMISSION_SESSION_KEY = &apos;permissions&apos;</span><br><span class="line">&gt;  MENU_SESSION_KEY = &apos;menus&apos;</span><br><span class="line">&gt;  WHITE_URL_LIST = [</span><br><span class="line">&gt;      r&apos;^/login/$&apos;,</span><br><span class="line">&gt;      r&apos;^/logout/$&apos;,</span><br><span class="line">&gt;      r&apos;^/reg/$&apos;,</span><br><span class="line">&gt;      r&apos;^/admin/.*&apos;,</span><br><span class="line">&gt;  ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>数据库迁移命令</p><ul><li>删除rbac所有的迁移文件</li><li>执行两条命令</li></ul></li><li><p>路由相关</p><ul><li>url(r’rbac/‘,include(‘rbac.urls’,namespace=’rbac’))</li><li>给所有的URL起名字</li></ul></li><li><p>layout  模板注意</p><ul><li>block   css  js   content</li></ul></li><li><p>权限的管理</p><ul><li>添加角色</li><li>添加菜单</li><li>添加权限</li></ul></li><li><p>分配权限</p><ul><li><p>用户关联—修改原系统的用户表</p><ul><li>跟rbac的UserInfo<br>user = models.OneToOneField(UserInfo,null=True,blank=True)</li><li>给用户分角色</li><li>给角色分权限</li></ul></li><li><p>登录应用权限</p><ul><li><p>登录成功后</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;      auth.login(request, obj)</span><br><span class="line">&gt;      ret = init_permission(request, obj)</span><br><span class="line">&gt;      if ret:</span><br><span class="line">&gt;          return ret</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></blockquote><blockquote><ul><li><p>初始化权限信息init_permission函数中修改</p><p>user -&gt; user.user</p><p>permission_query = user.user.roles.filter</p></li><li><p>应用权限校验中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;      &apos;rbac.middleware.rbac.PermissionMiddleware&apos;,</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>应用左侧菜单和面包屑导航</p><ul><li><p>在layout模板中，引用CSS和JS</p></li><li><p>二级菜单</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;    &#123;% load rbac %&#125;</span><br><span class="line">&gt;    &#123;% menu request %&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><ul><li><p>应用路径导航</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    &#123;% breadcrumb request %&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>权限控制到按钮级别</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;    &#123;% load rbac %&#125;</span><br><span class="line">&gt;    判断 filter  判断里面只能用filter 只能一个一个判断</span><br><span class="line">&gt;    &#123;% load rbac %&#125;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;    &#123;% if request|has_permission:&apos;add_customer&apos; %&#125;</span><br><span class="line">&gt;    &lt;a href=&quot;&#123;% url &apos;add_customer&apos; %&#125;?&#123;&#123; query_params &#125;&#125;&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;添加&lt;/a&gt;</span><br><span class="line">&gt;    &#123;% endif %&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><ul><li><p>使用注意事项</p><ul><li>用户注册后  对应在rbac中的UserInfo创建用户 和 原系统的用户做一对一关联</li><li>菜单   父权限  子权限  的层级关系</li></ul></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;权限管理的三级菜单的流程&quot;&gt;&lt;a href=&quot;#权限管理的三级菜单的流程&quot; class=&quot;headerlink&quot; title=&quot;权限管理的三级菜单的流程&quot;&gt;&lt;/a&gt;权限管理的三级菜单的流程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;权限控制&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="RBAC" scheme="http://yoursite.com/categories/RBAC/"/>
    
    
  </entry>
  
  <entry>
    <title>Django之中间件</title>
    <link href="http://yoursite.com/2018/07/15/Django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/07/15/Django之中间件/</id>
    <published>2018-07-15T07:38:48.000Z</published>
    <updated>2018-11-15T09:46:31.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><blockquote><h3 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h3><ul><li><p>中间件顾名思义，是介于request与response处理之间的一道处理过程，相对比较轻量级，并且在全局</p><p>上改变django的输入与输出。因为改变的是全局，所以需要谨慎实用，用不好会影响到性能。</p></li><li><p>Django的中间件的定义：</p><blockquote><p>Middleware <code>is` `a framework of hooks into Django’s request</code>/<code>response processing.</code></p><p><code>&lt;br&gt;It’s a light, low</code>-<code>level “plugin” system</code>forglobally altering Django’s <code>input</code> <code>or</code></p><p><code>output</code>.</p></blockquote><p>应用：</p><ul><li><p>如果想修改请求，例如被传送到view中的<strong>HttpRequest</strong>对象。 或者想修改view返回的HttpResponse对象，这些都可以通过中间件来实现。</p></li><li><p>可能还想在view执行之前做一些操作，这种情况就可以用 middleware来实现。</p></li><li><p>我们可能频繁在view使用<code>request.user</code>吧。 Django想在每个view执行之前把user设置request</p><p>的属性，于是就用了一个中间件来实现这个目标。所以Django提供了可以修改request 对象的中间</p><p>件 <code>AuthenticationMiddleware</code>。</p><p>Django默认的Middleware：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;    MIDDLEWARE = [</span><br><span class="line">&gt;        <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">&gt;        <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">&gt;    ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><p>   每一个中间件都有具体的功能</p></blockquote><blockquote><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><ul><li><p>中间件一共有四种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;  <span class="comment"># process_request</span></span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="comment"># process_view</span></span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="comment">#　process_exception</span></span><br><span class="line">&gt;  </span><br><span class="line">&gt;  <span class="comment">#　process_response</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><h6 id="process-request-process-response"><a href="#process-request-process-response" class="headerlink" title="process_request,process_response"></a>process_request,process_response</h6><blockquote><ul><li><p>当用户发起请求的时候会依次经过所有的的中间件，这个时候的请求时process_request,最后到达views的函数中，views函数处理后，在依次穿过中间件，这个时候是process_response,最后返回给请求者。</p></li><li><p>我们也可以自己定义一个中间件，我们可以自己写一个类，但是必须继承MiddlewareMixin</p><p>需要导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  <span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></blockquote><blockquote><blockquote><p> <img src="/Users/busensei/Desktop/MiddlewareMixin.png" alt=""></p><blockquote><p><strong>in views:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  &gt;<span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;</span><br><span class="line">&gt;  &gt;  &gt;    print(<span class="string">"view函数..."</span>)</span><br><span class="line">&gt;  &gt;  &gt;    <span class="keyword">return</span> HttpResponse(<span class="string">"OK"</span>)</span><br><span class="line">&gt;  &gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p><strong>in Mymiddlewares.py：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  &gt;<span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line">&gt;  &gt;  &gt;<span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line">&gt;  &gt;  &gt;</span><br><span class="line">&gt;  &gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;</span><br><span class="line">&gt;  &gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;        print(<span class="string">"Md1请求"</span>)</span><br><span class="line">&gt;  &gt;  &gt; </span><br><span class="line">&gt;  &gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;        print(<span class="string">"Md1返回"</span>)</span><br><span class="line">&gt;  &gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;  &gt;</span><br><span class="line">&gt;  &gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;</span><br><span class="line">&gt;  &gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;        print(<span class="string">"Md2请求"</span>)</span><br><span class="line">&gt;  &gt;  &gt;        <span class="comment">#return HttpResponse("Md2中断")</span></span><br><span class="line">&gt;  &gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;  &gt;        print(<span class="string">"Md2返回"</span>)</span><br><span class="line">&gt;  &gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p><strong>结果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;  &gt;view函数...</span><br><span class="line">&gt;  &gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p><strong>注意：</strong>如果当请求到达请求2的时候直接不符合条件返回，即return HttpResponse(“Md2中断”)，程序将把请求直接发给中间件2返回，然后依次返回到请求者，结果如下：</p><p>返回Md2中断的页面，后台打印如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>流程图如下：</p><p><img src="/Users/busensei/Desktop/process_request，process_response.png" alt=""></p></blockquote></blockquote><h5 id="process-view"><a href="#process-view" class="headerlink" title="process_view"></a>process_view</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;process_view(self, request, callback, callback_args, callback_kwargs)</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p><strong>Mymiddlewares.py</strong>修改如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;<span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line">&gt;  &gt;<span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1请求"</span>)</span><br><span class="line">&gt;  &gt;        <span class="comment">#return HttpResponse("Md1中断")</span></span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1返回"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1view"</span>)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md2请求"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> HttpResponse(<span class="string">"Md2中断"</span>)</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md2返回"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md2view"</span>)</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;Md1view</span><br><span class="line">&gt;  &gt;Md2view</span><br><span class="line">&gt;  &gt;view函数...</span><br><span class="line">&gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>下图进行分析上面的过程：</p><p><img src="/Users/busensei/Desktop/process_view.png" alt="img"></p><p>当最后一个中间的process_request到达路由关系映射之后，返回到中间件1的process_view，然后</p><p>依次往下，到达views函数，最后通过process_response依次返回到达用户。</p><p>process_view可以用来调用视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1请求"</span>)</span><br><span class="line">&gt;  &gt;        <span class="comment">#return HttpResponse("Md1中断")</span></span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1返回"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;        <span class="comment"># return HttpResponse("hello")</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;        response=callback(request,*callback_args,**callback_kwargs)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;view函数...</span><br><span class="line">&gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>注意：process_view如果有返回值，会越过其他的process_view以及视图函数，但是所有的</p><p>process_response都还会执行。</p></blockquote><h5 id="process-exception"><a href="#process-exception" class="headerlink" title="process_exception"></a>process_exception</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;process_exception(self, request, exception)</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>示例修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1请求"</span>)</span><br><span class="line">&gt;  &gt;        <span class="comment">#return HttpResponse("Md1中断")</span></span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md1返回"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;        <span class="comment"># return HttpResponse("hello")</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;        <span class="comment"># response=callback(request,*callback_args,**callback_kwargs)</span></span><br><span class="line">&gt;  &gt;        <span class="comment"># return response</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"md1 process_view..."</span>)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"md1 process_exception..."</span>)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;<span class="class"><span class="keyword">class</span> <span class="title">Md2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md2请求"</span>)</span><br><span class="line">&gt;  &gt;        <span class="comment"># return HttpResponse("Md2中断")</span></span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self,request,response)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"Md2返回"</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> response</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"md2 process_view..."</span>)</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;  &gt;        print(<span class="string">"md1 process_exception..."</span>)</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;md1 process_view...</span><br><span class="line">&gt;  &gt;md2 process_view...</span><br><span class="line">&gt;  &gt;view函数...</span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>流程图如下：</p><p>当views出现错误时：</p><p><img src="/Users/busensei/Desktop/process_exception.png" alt="img"></p><p>将md2的process_exception修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;  <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self,request,exception)</span>:</span></span><br><span class="line">&gt;  &gt;</span><br><span class="line">&gt;  &gt;        print(<span class="string">"md2 process_exception..."</span>)</span><br><span class="line">&gt;  &gt;        <span class="keyword">return</span> HttpResponse(<span class="string">"error"</span>)</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &gt;Md1请求</span><br><span class="line">&gt;  &gt;Md2请求</span><br><span class="line">&gt;  &gt;md1 process_view...</span><br><span class="line">&gt;  &gt;md2 process_view...</span><br><span class="line">&gt;  &gt;view函数...</span><br><span class="line">&gt;  &gt;md2 process_exception...</span><br><span class="line">&gt;  &gt;Md2返回</span><br><span class="line">&gt;  &gt;Md1返回</span><br><span class="line">&gt;  &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;中间件&quot;&gt;&lt;a href=&quot;#中间件&quot; class=&quot;headerlink&quot; title=&quot;中间件&quot;&gt;&lt;/a&gt;中间件&lt;/h1&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;中间件的概念&quot;&gt;&lt;a href=&quot;#中间件的概念&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
  </entry>
  
</feed>
